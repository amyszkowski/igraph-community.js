// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

"use strict";

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = true;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;


// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  if (!(typeof window === 'object' || typeof importScripts === 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {


  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary') } });
// TODO: add when SDL2 is fixed if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';


// TODO remove when SDL2 is fixed (also see above)



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready

/** @suppress{duplicate} */
var stackSave;
/** @suppress{duplicate} */
var stackRestore;
/** @suppress{duplicate} */
var stackAlloc;

stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort('failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}






// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;
  var ret;
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    ret = freeTableIndexes.pop();
  } else {
    ret = table.length;
    // Grow the table
    try {
      table.grow(1);
    } catch (err) {
      if (!(err instanceof RangeError)) {
        throw err;
      }
      throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
    }
  }

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  return ret;
}

function removeFunctionWasm(index) {
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

function removeFunction(index) {
  removeFunctionWasm(index);
}



var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}





function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

/** @param {Array=} args */
function dynCall(sig, ptr, args) {
  if (args && args.length) {
    // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
    assert(args.length === sig.substring(1).replace(/j/g, '--').length);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime') } });


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.


// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{const} */
var
WebAssembly = {
  Memory: /** @constructor */ function(opts) {
    return {
      buffer: new ArrayBuffer(opts['initial'] * 65536),
      grow: function(amount) {
        var oldBuffer = this.buffer;
        var ret = __growWasmMemory(amount);
        assert(this.buffer !== oldBuffer); // the call should have updated us
        return ret;
      }
    };
  },

  Table: function(opts) {
    var ret = new Array(opts['initial']);
    ret.grow = function(by) {
      if (ret.length >= 56 + 0) {
        abort('Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.')
      }
      ret.push(null);
    };
    ret.set = function(i, func) {
      ret[i] = func;
    };
    ret.get = function(i) {
      return ret[i];
    };
    return ret;
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
    return {};
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    var exports = (
function instantiate(asmLibraryArg, wasmMemory, wasmTable) {


  var scratchBuffer = new ArrayBuffer(8);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function legalimport$wasm2js_scratch_store_i64(low, high) {
    i32ScratchView[0] = low;
    i32ScratchView[1] = high;
  }
      
function asmFunc(global, env, buffer) {
 var memory = env.memory;
 var FUNCTION_TABLE = wasmTable;
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var fimport$0 = env.time;
 var fimport$1 = env.__assert_fail;
 var fimport$2 = env.abort;
 var fimport$3 = env.__cxa_allocate_exception;
 var fimport$4 = env.__cxa_throw;
 var fimport$5 = env.fd_close;
 var fimport$6 = env.fd_write;
 var fimport$7 = env.environ_sizes_get;
 var fimport$8 = env.environ_get;
 var fimport$9 = env.emscripten_resize_heap;
 var fimport$10 = env.emscripten_memcpy_big;
 var fimport$11 = env.__handle_stack_overflow;
 var fimport$12 = env.setTempRet0;
 var fimport$13 = env.fd_seek;
 var global$0 = 5259472;
 var global$1 = 16584;
 var global$2 = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  return 16592 | 0;
 }
 
 function $1() {
  $1058();
  $1014();
 }
 
 function $2($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $1062((HEAP32[($3_1 + 12 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $3($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $16_1 = 0, $15_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $15_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $12_1 = $1062((Math_imul(HEAP32[($4_1 + 12 | 0) >> 2] | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) << 0 | 0 | 0) | 0;
  label$3 : {
   $16_1 = $4_1 + 16 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  return $12_1 | 0;
 }
 
 function $4($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $1064(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return;
 }
 
 function $5($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $40_1 = 0, $50_1 = 0, $79_1 = 0, $90_1 = 0, $117_1 = 0, $120_1 = 0, $8_1 = 0, $14_1 = 0, $29_1 = 0, $34_1 = 0, $35_1 = 0, $63_1 = 0, $72_1 = 0, $75_1 = 0, $97_1 = 0, $138_1 = 0, $137_1 = 0, i64toi32_i32$0 = 0, $134_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 208 | 0;
  label$1 : {
   $137_1 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $137_1;
  }
  $8_1 = 0;
  $14_1 = $7_1 + 80 | 0;
  HEAP32[($7_1 + 200 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 196 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 192 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 188 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 184 | 0) >> 2] = $4_1;
  $487($14_1 | 0, HEAP32[($7_1 + 192 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 188 | 0) >> 2] | 0 | 0) | 0;
  $52($7_1 + 96 | 0 | 0, $14_1 | 0, HEAP32[($7_1 + 196 | 0) >> 2] | 0 | 0, $8_1 | 0) | 0;
  label$3 : {
   if (!((HEAP32[($7_1 + 184 | 0) >> 2] | 0 | 0) != ($8_1 | 0) & 1 | 0)) {
    break label$3
   }
   $487($7_1 + 64 | 0 | 0, HEAP32[($7_1 + 184 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 196 | 0) >> 2] | 0 | 0) | 0;
  }
  $29_1 = 0;
  $486($7_1 + 48 | 0 | 0, $29_1 | 0) | 0;
  $486($7_1 + 32 | 0 | 0, $29_1 | 0) | 0;
  $34_1 = 5;
  HEAP32[($7_1 + 28 | 0) >> 2] = $34_1;
  i64toi32_i32$0 = -1073741824;
  HEAP32[($7_1 + 8 | 0) >> 2] = 0;
  HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $35_1 = HEAP32[($7_1 + 200 | 0) >> 2] | 0;
  label$4 : {
   label$5 : {
    label$6 : {
     if ($35_1 >>> 0 > $34_1 >>> 0) {
      break label$6
     }
     label$7 : {
      switch ($35_1 | 0) {
      default:
       $40_1 = 0;
       $232($7_1 + 96 | 0 | 0, $40_1 | 0, $40_1 | 0, $40_1 | 0, $40_1 | 0, $7_1 + 48 | 0 | 0, $7_1 + 32 | 0 | 0, $40_1 | 0, $40_1 | 0) | 0;
       break label$5;
      case 1:
       $50_1 = 0;
       $233($7_1 + 96 | 0 | 0, $50_1 | 0, $50_1 | 0, $50_1 | 0, $50_1 | 0, $7_1 + 48 | 0 | 0, $7_1 + 32 | 0 | 0, $50_1 | 0, $50_1 | 0, $7_1 + 64 | 0 | 0) | 0;
       break label$5;
      case 2:
       $63_1 = 0;
       $277($7_1 + 96 | 0 | 0, $63_1 | 0, $63_1 | 0, $7_1 + 48 | 0 | 0, $7_1 + 32 | 0 | 0) | 0;
       break label$5;
      case 4:
       $72_1 = $7_1 + 96 | 0;
       $75_1 = $7_1 + 32 | 0;
       $79_1 = 0;
       $953($72_1 | 0, $79_1 | 0, $79_1 | 0, HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0, $75_1 | 0, $7_1 + 16 | 0 | 0) | 0;
       $229($72_1 | 0, $75_1 | 0, $7_1 + 8 | 0 | 0, $79_1 | 0) | 0;
       break label$5;
      case 5:
       $90_1 = 0;
       $236($7_1 + 96 | 0 | 0, $7_1 + 32 | 0 | 0, $90_1 | 0, $90_1 | 0, $90_1 | 0, $7_1 + 8 | 0 | 0) | 0;
       break label$5;
      case 3:
       break label$7;
      };
     }
     $97_1 = 0;
     $245($7_1 + 96 | 0 | 0, $97_1 | 0, $7_1 + 32 | 0 | 0, $97_1 | 0, $7_1 + 48 | 0 | 0) | 0;
     break label$5;
    }
    HEAP32[($7_1 + 204 | 0) >> 2] = 1;
    break label$4;
   }
   label$13 : {
    if (!(+HEAPF64[($7_1 + 8 | 0) >> 3] != -2.0 & 1 | 0)) {
     break label$13
    }
    $493($7_1 + 48 | 0 | 0, +(+HEAPF64[($7_1 + 8 | 0) >> 3])) | 0;
   }
   $117_1 = $7_1 + 48 | 0;
   $120_1 = $7_1 + 32 | 0;
   (wasm2js_i32$0 = 0, wasm2js_i32$1 = $2($490($120_1 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 10656 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = 0, wasm2js_i32$1 = $490($117_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 10660 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = 0, wasm2js_i32$1 = $2(HEAP32[(0 + 10660 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 10664 | 0) >> 2] = wasm2js_i32$1;
   $503($120_1 | 0, HEAP32[(0 + 10656 | 0) >> 2] | 0 | 0);
   $503($117_1 | 0, HEAP32[(0 + 10664 | 0) >> 2] | 0 | 0);
   $488($120_1 | 0);
   $488($117_1 | 0);
   $250($7_1 + 96 | 0 | 0);
   HEAP32[($7_1 + 204 | 0) >> 2] = 0;
  }
  $134_1 = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
  label$14 : {
   $138_1 = $7_1 + 208 | 0;
   if ($138_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $138_1;
  }
  return $134_1 | 0;
 }
 
 function $6($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $14_1 = 0, $13_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $6_1 = 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $10_1 = $5($6_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $6_1 | 0) | 0;
  label$3 : {
   $14_1 = $5_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $10_1 | 0;
 }
 
 function $7($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $16_1 = 0, $15_1 = 0, $12_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $15_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $12_1 = $5(1 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0;
  label$3 : {
   $16_1 = $6_1 + 16 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  return $12_1 | 0;
 }
 
 function $8($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $15_1 = 0, $14_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $11_1 = $5(2 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  label$3 : {
   $15_1 = $5_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return $11_1 | 0;
 }
 
 function $9($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $15_1 = 0, $14_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $11_1 = $5(4 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  label$3 : {
   $15_1 = $5_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return $11_1 | 0;
 }
 
 function $10($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $15_1 = 0, $14_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $11_1 = $5(5 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  label$3 : {
   $15_1 = $5_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return $11_1 | 0;
 }
 
 function $11($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $15_1 = 0, $14_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $11_1 = $5(3 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  label$3 : {
   $15_1 = $5_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return $11_1 | 0;
 }
 
 function $12() {
  return HEAP32[(0 + 10656 | 0) >> 2] | 0 | 0;
 }
 
 function $13() {
  return HEAP32[(0 + 10664 | 0) >> 2] | 0 | 0;
 }
 
 function $14() {
  return HEAP32[(0 + 10660 | 0) >> 2] | 0 | 0;
 }
 
 function $15() {
  $4(HEAP32[(0 + 10656 | 0) >> 2] | 0 | 0);
  $4(HEAP32[(0 + 10664 | 0) >> 2] | 0 | 0);
  return;
 }
 
 function $16($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $11$hi = 0, i64toi32_i32$3 = 0, $12$hi = 0, $13$hi = 0, i64toi32_i32$2 = 0, $15$hi = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  i64toi32_i32$0 = 2146435072;
  $11$hi = i64toi32_i32$0;
  HEAPF64[($3_1 + 8 | 0) >> 3] = $0_1;
  i64toi32_i32$0 = $17(+(+HEAPF64[($3_1 + 8 | 0) >> 3])) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 2147483647;
  $13$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$1 = $13$hi;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$0 = $15$hi;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$0 = $15$hi;
  i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $11$hi;
  i64toi32_i32$3 = 0;
  $6_1 = (i64toi32_i32$0 >>> 0 < $11$hi >>> 0 | ((i64toi32_i32$0 | 0) == ($11$hi | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) & 1 | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $17($0_1) {
  $0_1 = +$0_1;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAPF64[($3_1 + 8 | 0) >> 3] = $0_1;
  HEAPF64[$3_1 >> 3] = +HEAPF64[($3_1 + 8 | 0) >> 3];
  i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $18($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $19_1 = 0, $18_1 = 0, $15_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $486(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  $15_1 = HEAP32[$5_1 >> 2] | 0;
  label$3 : {
   $19_1 = $5_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  return $15_1 | 0;
 }
 
 function $19($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $488(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return;
 }
 
 function $20($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $18_1 = 0, $17_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $17_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $17_1;
  }
  $6_1 = 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $494(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0) | 0;
  HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  label$3 : {
   $18_1 = $5_1 + 16 | 0;
   if ($18_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  return $6_1 | 0;
 }
 
 function $21($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $22($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $497(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return;
 }
 
 function $23($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $46_1 = 0, $52_1 = 0, $51_1 = 0, $44_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $51_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $51_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $494(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0, (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0) | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$3
    }
    $508(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0, Math_imul(HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0, (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) | 0, Math_imul((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0) | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    continue label$4;
   };
  }
  $44_1 = 0;
  $46_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($46_1 + 12 | 0) >> 2] = (HEAP32[($46_1 + 12 | 0) >> 2] | 0) + (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
  label$5 : {
   $52_1 = $4_1 + 16 | 0;
   if ($52_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $52_1;
  }
  return $44_1 | 0;
 }
 
 function $24($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $107_1 = 0, $106_1 = 0, $96_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $106_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $106_1;
  }
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    label$5 : {
     if (!(HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 16 | 0) >> 2] = 0;
     label$6 : {
      label$7 : while (1) {
       if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$6
       }
       HEAPF64[((HEAP32[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + ((Math_imul(HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) - 1 | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + ((Math_imul(HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0) + (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
       HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 1 | 0;
       continue label$7;
      };
     }
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  HEAP32[($5_1 + 16 | 0) >> 2] = 0;
  label$8 : {
   label$9 : while (1) {
    if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$8
    }
    $507(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, Math_imul((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 1 | 0, (HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) - (HEAP32[($5_1 + 20 | 0) >> 2] | 0) | 0) | 0, Math_imul((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 1 | 0, (HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) - (HEAP32[($5_1 + 20 | 0) >> 2] | 0) | 0) + (HEAP32[($5_1 + 20 | 0) >> 2] | 0) | 0 | 0);
    HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$9;
   };
  }
  $96_1 = 0;
  $20(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, (HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) - (HEAP32[($5_1 + 20 | 0) >> 2] | 0) | 0 | 0, HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) | 0;
  label$10 : {
   $107_1 = $5_1 + 32 | 0;
   if ($107_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $107_1;
  }
  return $96_1 | 0;
 }
 
 function $25($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $17_1 = 0, $29_1 = 0, $65_1 = 0, $64_1 = 0, $61_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $64_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $64_1;
  }
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) >= (HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    $17_1 = 4;
    $28(1103 | 0, 1024 | 0, 980 | 0, $17_1 | 0) | 0;
    HEAP32[($5_1 + 28 | 0) >> 2] = $17_1;
    break label$3;
   }
   label$5 : {
    if (!(($490(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    $29_1 = 4;
    $28(1147 | 0, 1024 | 0, 983 | 0, $29_1 | 0) | 0;
    HEAP32[($5_1 + 28 | 0) >> 2] = $29_1;
    break label$3;
   }
   HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   HEAP32[$5_1 >> 2] = 0;
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[$5_1 >> 2] | 0 | 0) < (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAPF64[((HEAP32[(HEAP32[($5_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[$5_1 >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0;
     HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 1 | 0;
     continue label$7;
    };
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = 0;
  }
  $61_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$8 : {
   $65_1 = $5_1 + 32 | 0;
   if ($65_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $65_1;
  }
  return $61_1 | 0;
 }
 
 function $26($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $41_1 = 0, $148_1 = 0, $147_1 = 0, $144_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 64 | 0;
  label$1 : {
   $147_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $147_1;
  }
  HEAP32[($4_1 + 56 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 52 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $254(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 48 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $249(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 44 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $253(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 40 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (!(HEAP32[($4_1 + 48 | 0) >> 2] | 0)) {
       break label$6
      }
      if (HEAP32[($4_1 + 44 | 0) >> 2] | 0) {
       break label$5
      }
     }
     HEAP32[(HEAP32[($4_1 + 52 | 0) >> 2] | 0) >> 2] = 0;
     break label$4;
    }
    HEAP32[($4_1 + 8 | 0) >> 2] = 0;
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $486($4_1 + 24 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
    label$7 : {
     if (!(HEAP32[($4_1 + 4 | 0) >> 2] | 0)) {
      break label$7
     }
     $28(1227 | 0, 1192 | 0, 3691 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($4_1 + 60 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     break label$3;
    }
    $33(1 | 0, $4_1 + 24 | 0 | 0);
    HEAP32[($4_1 + 20 | 0) >> 2] = 0;
    label$8 : while (1) {
     $41_1 = 0;
     label$9 : {
      if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      $41_1 = (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) ^ -1 | 0;
     }
     label$10 : {
      if (!($41_1 & 1 | 0)) {
       break label$10
      }
      (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $256(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0, $4_1 + 24 | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, 1 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      label$11 : {
       if (!(HEAP32[$4_1 >> 2] | 0)) {
        break label$11
       }
       $28(1227 | 0, 1192 | 0, 3694 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
       HEAP32[($4_1 + 60 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
       break label$3;
      }
      (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $490($4_1 + 24 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
      HEAP32[($4_1 + 16 | 0) >> 2] = 1;
      label$12 : {
       label$13 : while (1) {
        if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$12
        }
        label$14 : {
         if (!(+HEAPF64[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 16 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] == +HEAPF64[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
          break label$14
         }
         label$15 : {
          if (!(HEAP32[($4_1 + 40 | 0) >> 2] | 0)) {
           break label$15
          }
          HEAP32[($4_1 + 8 | 0) >> 2] = 1;
          break label$12;
         }
         label$16 : {
          if (!(+HEAPF64[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 16 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] != +(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$16
          }
          HEAP32[($4_1 + 8 | 0) >> 2] = 1;
          break label$12;
         }
         label$17 : {
          if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) < ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
           break label$17
          }
          if (!(+HEAPF64[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +HEAPF64[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
           break label$17
          }
          HEAP32[($4_1 + 8 | 0) >> 2] = 1;
          break label$12;
         }
        }
        HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
        continue label$13;
       };
      }
      HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
      continue label$8;
     }
     break label$8;
    };
    HEAP32[(HEAP32[($4_1 + 52 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $488($4_1 + 24 | 0 | 0);
    $34(1 | 0);
   }
   HEAP32[($4_1 + 60 | 0) >> 2] = 0;
  }
  $144_1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
  label$18 : {
   $148_1 = $4_1 + 64 | 0;
   if ($148_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $148_1;
  }
  return $144_1 | 0;
 }
 
 function $27($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$3
     }
     if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 >= 61 >>> 0 & 1 | 0)) {
      break label$2
     }
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 1228;
    break label$1;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[(9872 + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
  }
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $28($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $29_1 = 0, $28_1 = 0, $25_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $28_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $28_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[(0 + 10668 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    FUNCTION_TABLE[HEAP32[(0 + 10668 | 0) >> 2] | 0](HEAP32[($6_1 + 12 | 0) >> 2] | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0);
    break label$3;
   }
   $29(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0);
  }
  $25_1 = HEAP32[$6_1 >> 2] | 0;
  label$5 : {
   $29_1 = $6_1 + 16 | 0;
   if ($29_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $29_1;
  }
  return $25_1 | 0;
 }
 
 function $29($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $15_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 32 | 0;
  label$1 : {
   $15_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  $8_1 = HEAP32[(0 + 9448 | 0) >> 2] | 0;
  $9_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  $10_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  $11_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $27(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $11_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $10_1;
  HEAP32[$6_1 >> 2] = $9_1;
  $994($8_1 | 0, 1275 | 0, $6_1 | 0) | 0;
  fimport$2();
  abort();
 }
 
 function $30($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $10_1 = 0, $9_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $31();
  label$3 : {
   $10_1 = $6_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $31() {
  var $2_1 = 0, $14_1 = 0, $33_1 = 0, $32_1 = 0;
  $2_1 = global$0 - 16 | 0;
  label$1 : {
   $32_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $32_1;
  }
  HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[(0 + 10672 | 0) >> 2] | 0) - 1 | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$3
    }
    $14_1 = 10672;
    FUNCTION_TABLE[HEAP32[(($14_1 + Math_imul(HEAP32[($2_1 + 12 | 0) >> 2] | 0, 12) | 0) + 8 | 0) >> 2] | 0](HEAP32[(($14_1 + Math_imul(HEAP32[($2_1 + 12 | 0) >> 2] | 0, 12) | 0) + 4 | 0) >> 2] | 0);
    HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + -1 | 0;
    continue label$4;
   };
  }
  HEAP32[(0 + 10672 | 0) >> 2] = 0;
  label$5 : {
   $33_1 = $2_1 + 16 | 0;
   if ($33_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $33_1;
  }
  return;
 }
 
 function $32($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[(0 + 10668 | 0) >> 2] | 0;
  HEAP32[(0 + 10668 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $33($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $29_1 = 0, $48_1 = 0, $47_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $47_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $47_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(0 + 10672 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) < (100 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(1299 | 0, 1308 | 0, 186 | 0, 1334 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(1354 | 0, 1308 | 0, 187 | 0, 1334 | 0);
   abort();
  }
  $29_1 = 10672;
  HEAP32[(($29_1 + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 12) | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[(($29_1 + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 12) | 0) + 8 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[(0 + 10672 | 0) >> 2] = (HEAP32[(0 + 10672 | 0) >> 2] | 0) + 1 | 0;
  label$5 : {
   $48_1 = $4_1 + 16 | 0;
   if ($48_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $48_1;
  }
  return;
 }
 
 function $34($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[(0 + 10672 | 0) >> 2] = (HEAP32[(0 + 10672 | 0) >> 2] | 0) - (HEAP32[($3_1 + 12 | 0) >> 2] | 0) | 0;
  label$1 : {
   if (!((HEAP32[(0 + 10672 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[(0 + 10672 | 0) >> 2] = 0;
  }
  return;
 }
 
 function $35($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $16_1 = 0, $15_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $6_1 = global$0 - 32 | 0;
  label$1 : {
   $15_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  $8_1 = HEAP32[(0 + 9448 | 0) >> 2] | 0;
  $9_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  $10_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = $10_1;
  HEAP32[$6_1 >> 2] = $9_1;
  $994($8_1 | 0, 1362 | 0, $6_1 | 0) | 0;
  label$3 : {
   $16_1 = $6_1 + 32 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  return;
 }
 
 function $36($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $29_1 = 0, $28_1 = 0, $25_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $28_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $28_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[(0 + 11872 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    FUNCTION_TABLE[HEAP32[(0 + 11872 | 0) >> 2] | 0](HEAP32[($6_1 + 12 | 0) >> 2] | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0);
    break label$3;
   }
   $35(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0);
  }
  $25_1 = HEAP32[$6_1 >> 2] | 0;
  label$5 : {
   $29_1 = $6_1 + 16 | 0;
   if ($29_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $29_1;
  }
  return $25_1 | 0;
 }
 
 function $37($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $36_1 = 0, $40_1 = 0, $56_1 = 0, $55_1 = 0, $27_1 = 0, $52_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $55_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $55_1;
  }
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$3 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(3391 | 0, 3398 | 0, 59 | 0, 3477 | 0);
   abort();
  }
  label$4 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) <= (0 | 0) & 1 | 0)) {
    break label$4
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = 1;
  }
  $27_1 = $1068(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, 8 | 0) | 0;
  HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] = $27_1;
  label$5 : {
   label$6 : {
    if (!((HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$6
    }
    $36_1 = 2;
    $28(3496 | 0, 3398 | 0, 65 | 0, $36_1 | 0) | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $36_1;
    break label$5;
   }
   $40_1 = 0;
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0;
   HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $40_1;
   HEAP32[($4_1 + 12 | 0) >> 2] = $40_1;
  }
  $52_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$7 : {
   $56_1 = $4_1 + 16 | 0;
   if ($56_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $56_1;
  }
  return $52_1 | 0;
 }
 
 function $38($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $23_1 = 0, $31_1 = 0, $30_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $30_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $30_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(3391 | 0, 3398 | 0, 85 | 0, 3515 | 0);
   abort();
  }
  label$4 : {
   if (!((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$4
   }
   $23_1 = 0;
   $1064(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
   HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = $23_1;
   HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = $23_1;
  }
  label$5 : {
   $31_1 = $3_1 + 16 | 0;
   if ($31_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $31_1;
  }
  return;
 }
 
 function $39($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $38_1 = 0, $37_1 = 0, $34_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $37_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $37_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(3391 | 0, 3398 | 0, 105 | 0, 3537 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(3557 | 0, 3398 | 0, 106 | 0, 3537 | 0);
   abort();
  }
  $34_1 = (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0;
  label$5 : {
   $38_1 = $3_1 + 16 | 0;
   if ($38_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $38_1;
  }
  return $34_1 | 0;
 }
 
 function $40($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $47_1 = 0, $46_1 = 0, $50_1 = 0.0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $46_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $46_1;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(3391 | 0, 3398 | 0, 200 | 0, 3576 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(3557 | 0, 3398 | 0, 201 | 0, 3576 | 0);
   abort();
  }
  label$5 : {
   label$6 : {
    if (!((HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAPF64[($3_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + -8 | 0) >> 3];
    break label$5;
   }
   HEAPF64[($3_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + -8 | 0) >> 3];
  }
  $50_1 = +HEAPF64[($3_1 + 8 | 0) >> 3];
  label$7 : {
   $47_1 = $3_1 + 16 | 0;
   if ($47_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $47_1;
  }
  return +$50_1;
 }
 
 function $41($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $29_1 = 0, $59_1 = 0, $58_1 = 0, $61_1 = 0.0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $58_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $58_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAPF64[$3_1 >> 3] = +HEAPF64[(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0) >> 3];
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(3391 | 0, 3398 | 0, 223 | 0, 3595 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(3557 | 0, 3398 | 0, 224 | 0, 3595 | 0);
   abort();
  }
  $29_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$29_1 >> 2] = (HEAP32[$29_1 >> 2] | 0) + 8 | 0;
  label$5 : {
   if (!((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$5
   }
   HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  }
  label$6 : {
   if (!((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$6
   }
   HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  }
  $61_1 = +HEAPF64[$3_1 >> 3];
  label$7 : {
   $59_1 = $3_1 + 16 | 0;
   if ($59_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $59_1;
  }
  return +$61_1;
 }
 
 function $42($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $68_1 = 0, $67_1 = 0, $71_1 = 0.0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $67_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $67_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(3391 | 0, 3398 | 0, 251 | 0, 3613 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(3557 | 0, 3398 | 0, 252 | 0, 3613 | 0);
   abort();
  }
  label$5 : {
   label$6 : {
    if (!((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAPF64[$3_1 >> 3] = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + -8 | 0) >> 3];
    HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + -8 | 0;
    break label$5;
   }
   HEAPF64[$3_1 >> 3] = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + -8 | 0) >> 3];
   HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + -8 | 0;
  }
  label$7 : {
   if (!((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$7
   }
   HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  }
  $71_1 = +HEAPF64[$3_1 >> 3];
  label$8 : {
   $68_1 = $3_1 + 16 | 0;
   if ($68_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $68_1;
  }
  return +$71_1;
 }
 
 function $43($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $4_1 = 0, $50_1 = 0, $66_1 = 0, $88_1 = 0, $180_1 = 0, $203_1 = 0, $202_1 = 0, $199_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $202_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $202_1;
  }
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAPF64[($4_1 + 16 | 0) >> 3] = $1_1;
  label$3 : {
   if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(3391 | 0, 3398 | 0, 285 | 0, 3636 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(3557 | 0, 3398 | 0, 286 | 0, 3636 | 0);
   abort();
  }
  label$5 : {
   label$6 : {
    label$7 : {
     if (!((HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$7
     }
     label$8 : {
      if (!((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
       break label$8
      }
      HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
     }
     HEAPF64[(HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 3] = +HEAPF64[($4_1 + 16 | 0) >> 3];
     $50_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
     HEAP32[($50_1 + 4 | 0) >> 2] = (HEAP32[($50_1 + 4 | 0) >> 2] | 0) + 8 | 0;
     label$9 : {
      if (!((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     }
     break label$6;
    }
    $66_1 = 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $66_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1068(((((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) | 0) >> 3 | 0) << 1 | 0) + 1 | 0 | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
    label$10 : {
     if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($66_1 | 0) & 1 | 0)) {
      break label$10
     }
     $88_1 = 2;
     $28(3655 | 0, 3398 | 0, 304 | 0, $88_1 | 0) | 0;
     HEAP32[($4_1 + 28 | 0) >> 2] = $88_1;
     break label$5;
    }
    label$11 : {
     if (!(((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) - (HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 3 | 0)) {
      break label$11
     }
     $1070(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0, (((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) - (HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 3 | 0) << 3 | 0 | 0) | 0;
    }
    label$12 : {
     if (!((((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) | 0) >> 3 | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$12
     }
     $1070((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) - (HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 3 | 0) << 3 | 0) | 0 | 0, HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, (((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) | 0) >> 3 | 0) << 3 | 0 | 0) | 0;
    }
    HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) | 0) >> 3 | 0) << 3 | 0) | 0;
    HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] = ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + (((((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) | 0) >> 3 | 0) << 1 | 0) << 3 | 0) | 0) + 8 | 0;
    HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    HEAPF64[(HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 3] = +HEAPF64[($4_1 + 16 | 0) >> 3];
    $180_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
    HEAP32[($180_1 + 4 | 0) >> 2] = (HEAP32[($180_1 + 4 | 0) >> 2] | 0) + 8 | 0;
    label$13 : {
     if (!((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$13
     }
     HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    }
    $1064(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($4_1 + 8 | 0) >> 2] = 0;
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $199_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$14 : {
   $203_1 = $4_1 + 32 | 0;
   if ($203_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $203_1;
  }
  return $199_1 | 0;
 }
 
 function $44($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $34_1 = 0, $42_1 = 0, $41_1 = 0, $38_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 32 | 0;
  label$1 : {
   $41_1 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $41_1;
  }
  HEAP32[($7_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
  label$3 : {
   label$4 : {
    label$5 : {
     if ((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0) {
      break label$5
     }
     if ($253(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) | 0) {
      break label$4
     }
    }
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $45(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
    break label$3;
   }
   label$6 : {
    if (!((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
     break label$6
    }
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $46(HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
    break label$3;
   }
   $34_1 = 4;
   $28(3674 | 0, 3700 | 0, 83 | 0, $34_1 | 0) | 0;
   HEAP32[($7_1 + 28 | 0) >> 2] = $34_1;
  }
  $38_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  label$7 : {
   $42_1 = $7_1 + 32 | 0;
   if ($42_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $42_1;
  }
  return $38_1 | 0;
 }
 
 function $45($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, $8_1 = 0, $322_1 = 0, $30_1 = 0, $45_1 = 0, $118_1 = 0, $326_1 = 0.0, $187_1 = 0, $329_1 = 0.0, $223_1 = 0, $230_1 = 0, $308_1 = 0, $321_1 = 0, $320_1 = 0, $214_1 = 0, $317_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 112 | 0;
  label$1 : {
   $320_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $320_1;
  }
  $7_1 = 0;
  $8_1 = 1;
  HEAP32[($6_1 + 104 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 100 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 96 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 92 | 0) >> 2] = $3_1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $254(HEAP32[($6_1 + 104 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 88 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($6_1 + 76 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 72 | 0) >> 2] = $8_1;
  i64toi32_i32$0 = 0;
  $322_1 = 0;
  i64toi32_i32$1 = $6_1 + 56 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $322_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $322_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $6_1 + 40 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $1068(HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0, $8_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 84 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0) == ($7_1 | 0) & 1 | 0)) {
     break label$4
    }
    $30_1 = 2;
    $28(3674 | 0, 3700 | 0, 103 | 0, $30_1 | 0) | 0;
    HEAP32[($6_1 + 108 | 0) >> 2] = $30_1;
    break label$3;
   }
   $33(2 | 0, HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0);
   label$5 : {
    label$6 : {
     if (!((HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0) > (1e5 | 0) & 1 | 0)) {
      break label$6
     }
     $45_1 = 1e4;
     break label$5;
    }
    $45_1 = (HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0) / (10 | 0) | 0;
   }
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $37($6_1 + 56 | 0 | 0, $45_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
   label$7 : {
    if (!(HEAP32[($6_1 + 36 | 0) >> 2] | 0)) {
     break label$7
    }
    $28(3724 | 0, 3700 | 0, 107 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 108 | 0) >> 2] = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
    break label$3;
   }
   $33(3 | 0, $6_1 + 56 | 0 | 0);
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $486($6_1 + 40 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
   label$8 : {
    if (!(HEAP32[($6_1 + 32 | 0) >> 2] | 0)) {
     break label$8
    }
    $28(3724 | 0, 3700 | 0, 108 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 108 | 0) >> 2] = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, $6_1 + 40 | 0 | 0);
   label$9 : {
    if (!((HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$9
    }
    (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $494(HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
    label$10 : {
     if (!(HEAP32[($6_1 + 28 | 0) >> 2] | 0)) {
      break label$10
     }
     $28(3724 | 0, 3700 | 0, 112 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($6_1 + 108 | 0) >> 2] = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
     break label$3;
    }
   }
   label$11 : {
    if (!((HEAP32[($6_1 + 96 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$11
    }
    $492(HEAP32[($6_1 + 96 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($6_1 + 80 | 0) >> 2] = 0;
   label$12 : {
    label$13 : while (1) {
     if (!((HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$12
     }
     $118_1 = 24;
     label$14 : {
      label$15 : {
       if (!((((HEAPU8[((HEAP32[($6_1 + 84 | 0) >> 2] | 0) + (HEAP32[($6_1 + 80 | 0) >> 2] | 0) | 0) >> 0] | 0) << $118_1 | 0) >> $118_1 | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$15
       }
       break label$14;
      }
      label$16 : {
       if (!((HEAP32[(0 + 11876 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$16
       }
       label$17 : {
        if (!($265(0 | 0) | 0)) {
         break label$17
        }
        HEAP32[($6_1 + 108 | 0) >> 2] = 13;
        break label$3;
       }
      }
      HEAP8[((HEAP32[($6_1 + 84 | 0) >> 2] | 0) + (HEAP32[($6_1 + 80 | 0) >> 2] | 0) | 0) >> 0] = 1;
      HEAP32[($6_1 + 76 | 0) >> 2] = 1;
      label$18 : {
       if (!((HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$18
       }
       HEAPF64[((HEAP32[(HEAP32[($6_1 + 100 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 80 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +((HEAP32[($6_1 + 72 | 0) >> 2] | 0) - 1 | 0 | 0);
      }
      (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $43($6_1 + 56 | 0 | 0, +(+(HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
      label$19 : {
       if (!(HEAP32[($6_1 + 24 | 0) >> 2] | 0)) {
        break label$19
       }
       $28(3724 | 0, 3700 | 0, 131 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($6_1 + 108 | 0) >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
       break label$3;
      }
      label$20 : {
       label$21 : while (1) {
        if (!((($39($6_1 + 56 | 0 | 0) | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0)) {
         break label$20
        }
        $326_1 = +$41($6_1 + 56 | 0 | 0);
        label$22 : {
         label$23 : {
          if (!(Math_abs($326_1) < 2147483648.0)) {
           break label$23
          }
          $187_1 = ~~$326_1;
          break label$22;
         }
         $187_1 = -2147483648;
        }
        HEAP32[($6_1 + 20 | 0) >> 2] = $187_1;
        (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $256(HEAP32[($6_1 + 104 | 0) >> 2] | 0 | 0, $6_1 + 40 | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, 3 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
        label$24 : {
         if (!(HEAP32[($6_1 + 16 | 0) >> 2] | 0)) {
          break label$24
         }
         $28(3724 | 0, 3700 | 0, 136 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0;
         HEAP32[($6_1 + 108 | 0) >> 2] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
         break label$3;
        }
        HEAP32[($6_1 + 52 | 0) >> 2] = 0;
        label$25 : {
         label$26 : while (1) {
          if (!((HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) < ($490($6_1 + 40 | 0 | 0) | 0 | 0) & 1 | 0)) {
           break label$25
          }
          $214_1 = 1;
          $329_1 = +HEAPF64[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          label$27 : {
           label$28 : {
            if (!(Math_abs($329_1) < 2147483648.0)) {
             break label$28
            }
            $223_1 = ~~$329_1;
            break label$27;
           }
           $223_1 = -2147483648;
          }
          HEAP32[($6_1 + 12 | 0) >> 2] = $223_1;
          $230_1 = 24;
          label$29 : {
           label$30 : {
            if (!((((HEAPU8[((HEAP32[($6_1 + 84 | 0) >> 2] | 0) + (HEAP32[($6_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0) << $230_1 | 0) >> $230_1 | 0 | 0) == ($214_1 | 0) & 1 | 0)) {
             break label$30
            }
            break label$29;
           }
           (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $43($6_1 + 56 | 0 | 0, +(+(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
           label$31 : {
            if (!(HEAP32[($6_1 + 8 | 0) >> 2] | 0)) {
             break label$31
            }
            $28(3724 | 0, 3700 | 0, 142 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) | 0;
            HEAP32[($6_1 + 108 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
            break label$3;
           }
           HEAP8[((HEAP32[($6_1 + 84 | 0) >> 2] | 0) + (HEAP32[($6_1 + 12 | 0) >> 2] | 0) | 0) >> 0] = 1;
           HEAP32[($6_1 + 76 | 0) >> 2] = (HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 1 | 0;
           label$32 : {
            if (!((HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break label$32
            }
            HEAPF64[((HEAP32[(HEAP32[($6_1 + 100 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +((HEAP32[($6_1 + 72 | 0) >> 2] | 0) - 1 | 0 | 0);
           }
          }
          HEAP32[($6_1 + 52 | 0) >> 2] = (HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 1 | 0;
          continue label$26;
         };
        }
        continue label$21;
       };
      }
      HEAP32[($6_1 + 72 | 0) >> 2] = (HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 1 | 0;
      label$33 : {
       if (!((HEAP32[($6_1 + 96 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$33
       }
       (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $493(HEAP32[($6_1 + 96 | 0) >> 2] | 0 | 0, +(+(HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
       label$34 : {
        if (!(HEAP32[($6_1 + 4 | 0) >> 2] | 0)) {
         break label$34
        }
        $28(3724 | 0, 3700 | 0, 152 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($6_1 + 108 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
        break label$3;
       }
      }
     }
     HEAP32[($6_1 + 80 | 0) >> 2] = (HEAP32[($6_1 + 80 | 0) >> 2] | 0) + 1 | 0;
     continue label$13;
    };
   }
   label$35 : {
    if (!((HEAP32[($6_1 + 92 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$35
    }
    HEAP32[(HEAP32[($6_1 + 92 | 0) >> 2] | 0) >> 2] = (HEAP32[($6_1 + 72 | 0) >> 2] | 0) - 1 | 0;
   }
   $308_1 = 0;
   $1064(HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0);
   HEAP32[($6_1 + 84 | 0) >> 2] = $308_1;
   $38($6_1 + 56 | 0 | 0);
   $488($6_1 + 40 | 0 | 0);
   $34(3 | 0);
   HEAP32[($6_1 + 108 | 0) >> 2] = $308_1;
  }
  $317_1 = HEAP32[($6_1 + 108 | 0) >> 2] | 0;
  label$36 : {
   $321_1 = $6_1 + 112 | 0;
   if ($321_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $321_1;
  }
  return $317_1 | 0;
 }
 
 function $46($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $591_1 = 0, $125_1 = 0, $597_1 = 0.0, $194_1 = 0, $214_1 = 0, $607_1 = 0.0, $236_1 = 0, $268_1 = 0, $623_1 = 0.0, $357_1 = 0, $630_1 = 0.0, $636_1 = 0.0, $443_1 = 0, $644_1 = 0.0, $589_1 = 0, $588_1 = 0, $596_1 = 0.0, $606_1 = 0.0, $227_1 = 0, $622_1 = 0.0, $436_1 = 0, $585_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 192 | 0;
  label$1 : {
   $588_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $588_1;
  }
  HEAP32[($6_1 + 184 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 180 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 176 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 172 | 0) >> 2] = $3_1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $254(HEAP32[($6_1 + 184 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 168 | 0) >> 2] = wasm2js_i32$1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $6_1 + 152 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  $591_1 = 0;
  i64toi32_i32$1 = $6_1 + 120 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $591_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $591_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($6_1 + 116 | 0) >> 2] = 1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $6_1 + 96 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $486($6_1 + 152 | 0 | 0, HEAP32[($6_1 + 168 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 76 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!(HEAP32[($6_1 + 76 | 0) >> 2] | 0)) {
     break label$4
    }
    $28(3724 | 0, 3700 | 0, 189 | 0, HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 188 | 0) >> 2] = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, $6_1 + 152 | 0 | 0);
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $486($6_1 + 96 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 72 | 0) >> 2] = wasm2js_i32$1;
   label$5 : {
    if (!(HEAP32[($6_1 + 72 | 0) >> 2] | 0)) {
     break label$5
    }
    $28(3724 | 0, 3700 | 0, 190 | 0, HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 188 | 0) >> 2] = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, $6_1 + 96 | 0 | 0);
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $37($6_1 + 120 | 0 | 0, 100 | 0) | 0), HEAP32[(wasm2js_i32$0 + 68 | 0) >> 2] = wasm2js_i32$1;
   label$6 : {
    if (!(HEAP32[($6_1 + 68 | 0) >> 2] | 0)) {
     break label$6
    }
    $28(3724 | 0, 3700 | 0, 191 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 188 | 0) >> 2] = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
    break label$3;
   }
   $33(3 | 0, $6_1 + 120 | 0 | 0);
   label$7 : {
    if (!((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$7
    }
    (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $494(HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 168 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 64 | 0) >> 2] = wasm2js_i32$1;
    label$8 : {
     if (!(HEAP32[($6_1 + 64 | 0) >> 2] | 0)) {
      break label$8
     }
     $28(3724 | 0, 3700 | 0, 194 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
     break label$3;
    }
   }
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $489($6_1 + 96 | 0 | 0, HEAP32[($6_1 + 168 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
   label$9 : {
    if (!(HEAP32[($6_1 + 60 | 0) >> 2] | 0)) {
     break label$9
    }
    $28(3724 | 0, 3700 | 0, 196 | 0, HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 188 | 0) >> 2] = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
    break label$3;
   }
   $497($6_1 + 96 | 0 | 0);
   label$10 : {
    if (!((HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$10
    }
    $492(HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0);
   }
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $47(HEAP32[($6_1 + 184 | 0) >> 2] | 0 | 0, $6_1 + 80 | 0 | 0, 1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 56 | 0) >> 2] = wasm2js_i32$1;
   label$11 : {
    if (!(HEAP32[($6_1 + 56 | 0) >> 2] | 0)) {
     break label$11
    }
    $28(3724 | 0, 3700 | 0, 203 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 188 | 0) >> 2] = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
    break label$3;
   }
   $125_1 = 0;
   $33(4 | 0, $6_1 + 80 | 0 | 0);
   HEAP32[($6_1 + 140 | 0) >> 2] = $125_1;
   HEAP32[($6_1 + 148 | 0) >> 2] = $125_1;
   label$12 : {
    label$13 : while (1) {
     if (!((HEAP32[($6_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 168 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$12
     }
     label$14 : {
      if (!((HEAP32[(0 + 11876 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$14
      }
      label$15 : {
       if (!($265(0 | 0) | 0)) {
        break label$15
       }
       HEAP32[($6_1 + 188 | 0) >> 2] = 13;
       break label$3;
      }
     }
     HEAP32[($6_1 + 92 | 0) >> 2] = (HEAP32[($6_1 + 84 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 148 | 0) >> 2] | 0, 12) | 0;
     label$16 : {
      label$17 : {
       if (!(+HEAPF64[((HEAP32[($6_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > +($515(HEAP32[($6_1 + 92 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
        break label$17
       }
       break label$16;
      }
      (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $43($6_1 + 120 | 0 | 0, +(+(HEAP32[($6_1 + 148 | 0) >> 2] | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 52 | 0) >> 2] = wasm2js_i32$1;
      label$18 : {
       if (!(HEAP32[($6_1 + 52 | 0) >> 2] | 0)) {
        break label$18
       }
       $28(3724 | 0, 3700 | 0, 215 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($6_1 + 188 | 0) >> 2] = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
       break label$3;
      }
      label$19 : {
       label$20 : while (1) {
        if (!((($39($6_1 + 120 | 0 | 0) | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0)) {
         break label$19
        }
        $596_1 = +(0 | 0);
        $597_1 = +$40($6_1 + 120 | 0 | 0);
        label$21 : {
         label$22 : {
          if (!(Math_abs($597_1) < 2147483648.0)) {
           break label$22
          }
          $194_1 = ~~$597_1;
          break label$21;
         }
         $194_1 = -2147483648;
        }
        HEAP32[($6_1 + 48 | 0) >> 2] = $194_1;
        HEAP32[($6_1 + 92 | 0) >> 2] = (HEAP32[($6_1 + 84 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 48 | 0) >> 2] | 0, 12) | 0;
        label$23 : {
         label$24 : {
          if (!(+HEAPF64[((HEAP32[($6_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == $596_1 & 1 | 0)) {
           break label$24
          }
          $214_1 = (HEAP32[($6_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0;
          HEAPF64[$214_1 >> 3] = +HEAPF64[$214_1 >> 3] + 1.0;
          break label$23;
         }
         label$25 : {
          label$26 : {
           if (!(+HEAPF64[((HEAP32[($6_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] <= +($515(HEAP32[($6_1 + 92 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
            break label$26
           }
           $606_1 = +(0 | 0);
           $227_1 = HEAP32[(HEAP32[($6_1 + 92 | 0) >> 2] | 0) >> 2] | 0;
           $607_1 = +HEAPF64[((HEAP32[($6_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           label$27 : {
            label$28 : {
             if (!(Math_abs($607_1) < 2147483648.0)) {
              break label$28
             }
             $236_1 = ~~$607_1;
             break label$27;
            }
            $236_1 = -2147483648;
           }
           HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[($227_1 + (($236_1 - 1 | 0) << 2 | 0) | 0) >> 2] | 0;
           label$29 : {
            if (!(+HEAPF64[((HEAP32[($6_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == $606_1 & 1 | 0)) {
             break label$29
            }
            (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $43($6_1 + 120 | 0 | 0, +(+(HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 40 | 0) >> 2] = wasm2js_i32$1;
            label$30 : {
             if (!(HEAP32[($6_1 + 40 | 0) >> 2] | 0)) {
              break label$30
             }
             $28(3724 | 0, 3700 | 0, 227 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) | 0;
             HEAP32[($6_1 + 188 | 0) >> 2] = HEAP32[($6_1 + 40 | 0) >> 2] | 0;
             break label$3;
            }
           }
           $268_1 = (HEAP32[($6_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0;
           HEAPF64[$268_1 >> 3] = +HEAPF64[$268_1 >> 3] + 1.0;
           break label$25;
          }
          (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $493($6_1 + 96 | 0 | 0, +(+(HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
          label$31 : {
           if (!(HEAP32[($6_1 + 36 | 0) >> 2] | 0)) {
            break label$31
           }
           $28(3724 | 0, 3700 | 0, 232 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0;
           HEAP32[($6_1 + 188 | 0) >> 2] = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
           break label$3;
          }
          +$42($6_1 + 120 | 0 | 0);
          HEAP32[($6_1 + 140 | 0) >> 2] = (HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 1 | 0;
          label$32 : {
           if ((HEAP32[($6_1 + 140 | 0) >> 2] | 0 | 0) % (1e4 | 0) | 0) {
            break label$32
           }
           label$33 : {
            if (!($534(3725 | 0, +(+(HEAP32[($6_1 + 140 | 0) >> 2] | 0 | 0) * 50.0 / +(HEAP32[($6_1 + 168 | 0) >> 2] | 0 | 0)), 0 | 0) | 0)) {
             break label$33
            }
            $31();
            HEAP32[($6_1 + 188 | 0) >> 2] = 13;
            break label$3;
           }
           label$34 : {
            if (!((HEAP32[(0 + 11876 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break label$34
            }
            label$35 : {
             if (!($265(0 | 0) | 0)) {
              break label$35
             }
             HEAP32[($6_1 + 188 | 0) >> 2] = 13;
             break label$3;
            }
           }
          }
         }
        }
        continue label$20;
       };
      }
     }
     HEAP32[($6_1 + 148 | 0) >> 2] = (HEAP32[($6_1 + 148 | 0) >> 2] | 0) + 1 | 0;
     continue label$13;
    };
   }
   label$36 : {
    if (!($534(3725 | 0, +(50.0), 0 | 0) | 0)) {
     break label$36
    }
    $31();
    HEAP32[($6_1 + 188 | 0) >> 2] = 13;
    break label$3;
   }
   $48($6_1 + 80 | 0 | 0);
   $34(1 | 0);
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $47(HEAP32[($6_1 + 184 | 0) >> 2] | 0 | 0, $6_1 + 80 | 0 | 0, 2 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
   label$37 : {
    if (!(HEAP32[($6_1 + 32 | 0) >> 2] | 0)) {
     break label$37
    }
    $28(3724 | 0, 3700 | 0, 251 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 188 | 0) >> 2] = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
    break label$3;
   }
   $33(4 | 0, $6_1 + 80 | 0 | 0);
   $497($6_1 + 152 | 0 | 0);
   HEAP32[($6_1 + 140 | 0) >> 2] = 0;
   label$38 : {
    label$39 : while (1) {
     if (!((($491($6_1 + 96 | 0 | 0) | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0)) {
      break label$38
     }
     $622_1 = +(0 | 0);
     $623_1 = +$499($6_1 + 96 | 0 | 0);
     label$40 : {
      label$41 : {
       if (!(Math_abs($623_1) < 2147483648.0)) {
        break label$41
       }
       $357_1 = ~~$623_1;
       break label$40;
      }
      $357_1 = -2147483648;
     }
     HEAP32[($6_1 + 28 | 0) >> 2] = $357_1;
     label$42 : {
      if (!(+HEAPF64[((HEAP32[($6_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] != $622_1 & 1 | 0)) {
       break label$42
      }
      continue label$39;
     }
     HEAPF64[((HEAP32[($6_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0;
     HEAP32[($6_1 + 112 | 0) >> 2] = 1;
     label$43 : {
      if (!((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$43
      }
      HEAPF64[((HEAP32[(HEAP32[($6_1 + 180 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +((HEAP32[($6_1 + 116 | 0) >> 2] | 0) - 1 | 0 | 0);
     }
     (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $43($6_1 + 120 | 0 | 0, +(+(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
     label$44 : {
      if (!(HEAP32[($6_1 + 24 | 0) >> 2] | 0)) {
       break label$44
      }
      $28(3724 | 0, 3700 | 0, 271 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($6_1 + 188 | 0) >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
      break label$3;
     }
     HEAP32[($6_1 + 140 | 0) >> 2] = (HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 1 | 0;
     label$45 : {
      if ((HEAP32[($6_1 + 140 | 0) >> 2] | 0 | 0) % (1e4 | 0) | 0) {
       break label$45
      }
      $630_1 = 50.0;
      label$46 : {
       if (!($534(3725 | 0, +($630_1 + +(HEAP32[($6_1 + 140 | 0) >> 2] | 0 | 0) * $630_1 / +(HEAP32[($6_1 + 168 | 0) >> 2] | 0 | 0)), 0 | 0) | 0)) {
        break label$46
       }
       $31();
       HEAP32[($6_1 + 188 | 0) >> 2] = 13;
       break label$3;
      }
      label$47 : {
       if (!((HEAP32[(0 + 11876 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$47
       }
       label$48 : {
        if (!($265(0 | 0) | 0)) {
         break label$48
        }
        HEAP32[($6_1 + 188 | 0) >> 2] = 13;
        break label$3;
       }
      }
     }
     label$49 : {
      label$50 : while (1) {
       if (!((($39($6_1 + 120 | 0 | 0) | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0)) {
        break label$49
       }
       $436_1 = 0;
       $636_1 = +$42($6_1 + 120 | 0 | 0);
       label$51 : {
        label$52 : {
         if (!(Math_abs($636_1) < 2147483648.0)) {
          break label$52
         }
         $443_1 = ~~$636_1;
         break label$51;
        }
        $443_1 = -2147483648;
       }
       HEAP32[($6_1 + 20 | 0) >> 2] = $443_1;
       HEAP32[($6_1 + 92 | 0) >> 2] = (HEAP32[($6_1 + 84 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 20 | 0) >> 2] | 0, 12) | 0;
       (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $515(HEAP32[($6_1 + 92 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 144 | 0) >> 2] = wasm2js_i32$1;
       HEAP32[($6_1 + 148 | 0) >> 2] = $436_1;
       label$53 : {
        label$54 : while (1) {
         if (!((HEAP32[($6_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 144 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$53
         }
         HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($6_1 + 92 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 148 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
         label$55 : {
          label$56 : {
           if (!(+HEAPF64[((HEAP32[($6_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] != +(0 | 0) & 1 | 0)) {
            break label$56
           }
           break label$55;
          }
          (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $43($6_1 + 120 | 0 | 0, +(+(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
          label$57 : {
           if (!(HEAP32[($6_1 + 12 | 0) >> 2] | 0)) {
            break label$57
           }
           $28(3724 | 0, 3700 | 0, 290 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
           HEAP32[($6_1 + 188 | 0) >> 2] = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
           break label$3;
          }
          HEAPF64[((HEAP32[($6_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0;
          HEAP32[($6_1 + 112 | 0) >> 2] = (HEAP32[($6_1 + 112 | 0) >> 2] | 0) + 1 | 0;
          label$58 : {
           if (!((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break label$58
           }
           HEAPF64[((HEAP32[(HEAP32[($6_1 + 180 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +((HEAP32[($6_1 + 116 | 0) >> 2] | 0) - 1 | 0 | 0);
          }
          HEAP32[($6_1 + 140 | 0) >> 2] = (HEAP32[($6_1 + 140 | 0) >> 2] | 0) + 1 | 0;
          label$59 : {
           if ((HEAP32[($6_1 + 140 | 0) >> 2] | 0 | 0) % (1e4 | 0) | 0) {
            break label$59
           }
           $644_1 = 50.0;
           label$60 : {
            if (!($534(3725 | 0, +($644_1 + +(HEAP32[($6_1 + 140 | 0) >> 2] | 0 | 0) * $644_1 / +(HEAP32[($6_1 + 168 | 0) >> 2] | 0 | 0)), 0 | 0) | 0)) {
             break label$60
            }
            $31();
            HEAP32[($6_1 + 188 | 0) >> 2] = 13;
            break label$3;
           }
           label$61 : {
            if (!((HEAP32[(0 + 11876 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break label$61
            }
            label$62 : {
             if (!($265(0 | 0) | 0)) {
              break label$62
             }
             HEAP32[($6_1 + 188 | 0) >> 2] = 13;
             break label$3;
            }
           }
          }
         }
         HEAP32[($6_1 + 148 | 0) >> 2] = (HEAP32[($6_1 + 148 | 0) >> 2] | 0) + 1 | 0;
         continue label$54;
        };
       }
       continue label$50;
      };
     }
     HEAP32[($6_1 + 116 | 0) >> 2] = (HEAP32[($6_1 + 116 | 0) >> 2] | 0) + 1 | 0;
     label$63 : {
      if (!((HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$63
      }
      (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $493(HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0, +(+(HEAP32[($6_1 + 112 | 0) >> 2] | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
      label$64 : {
       if (!(HEAP32[($6_1 + 8 | 0) >> 2] | 0)) {
        break label$64
       }
       $28(3724 | 0, 3700 | 0, 309 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($6_1 + 188 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
       break label$3;
      }
     }
     continue label$39;
    };
   }
   label$65 : {
    if (!($534(3725 | 0, +(100.0), 0 | 0) | 0)) {
     break label$65
    }
    $31();
    HEAP32[($6_1 + 188 | 0) >> 2] = 13;
    break label$3;
   }
   label$66 : {
    if (!((HEAP32[($6_1 + 172 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$66
    }
    HEAP32[(HEAP32[($6_1 + 172 | 0) >> 2] | 0) >> 2] = (HEAP32[($6_1 + 116 | 0) >> 2] | 0) - 1 | 0;
   }
   $48($6_1 + 80 | 0 | 0);
   $488($6_1 + 96 | 0 | 0);
   $38($6_1 + 120 | 0 | 0);
   $488($6_1 + 152 | 0 | 0);
   $34(4 | 0);
   HEAP32[($6_1 + 188 | 0) >> 2] = 0;
  }
  $585_1 = HEAP32[($6_1 + 188 | 0) >> 2] | 0;
  label$67 : {
   $589_1 = $6_1 + 192 | 0;
   if ($589_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $589_1;
  }
  return $585_1 | 0;
 }
 
 function $47($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $27_1 = 0, $35_1 = 0, $56_1 = 0, $160_1 = 0.0, $130_1 = 0, $159_1 = 0, $158_1 = 0, $43_1 = 0, $47_1 = 0, $155_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 48 | 0;
  label$1 : {
   $158_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $158_1;
  }
  HEAP32[($5_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $2_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) != (2 | 0) & 1 | 0)) {
     break label$4
    }
    if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$4
    }
    if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) != (3 | 0) & 1 | 0)) {
     break label$4
    }
    $27_1 = 9;
    $28(3757 | 0, 3784 | 0, 101 | 0, $27_1 | 0) | 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = $27_1;
    break label$3;
   }
   $35_1 = $5_1 + 16 | 0;
   $486($35_1 | 0, 0 | 0) | 0;
   $33(1 | 0, $35_1 | 0);
   label$5 : {
    if ($253(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) | 0) {
     break label$5
    }
    HEAP32[($5_1 + 32 | 0) >> 2] = 3;
   }
   $43_1 = $254(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 2] = $43_1;
   $47_1 = $1068(HEAP32[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 2] | 0 | 0, 12 | 0) | 0;
   HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 4 | 0) >> 2] = $47_1;
   label$6 : {
    if (!((HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$6
    }
    $56_1 = 2;
    $28(3757 | 0, 3784 | 0, 114 | 0, $56_1 | 0) | 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = $56_1;
    break label$3;
   }
   $33(4 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0);
   HEAP32[($5_1 + 28 | 0) >> 2] = 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$7
     }
     label$9 : {
      if (!((HEAP32[(0 + 11876 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$9
      }
      label$10 : {
       if (!($265(0 | 0) | 0)) {
        break label$10
       }
       HEAP32[($5_1 + 44 | 0) >> 2] = 13;
       break label$3;
      }
     }
     (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $256(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, $5_1 + 16 | 0 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
     label$11 : {
      if (!(HEAP32[($5_1 + 4 | 0) >> 2] | 0)) {
       break label$11
      }
      $28(3805 | 0, 3784 | 0, 121 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      break label$3;
     }
     (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $490($5_1 + 16 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
     (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $524((HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 28 | 0) >> 2] | 0, 12) | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     label$12 : {
      if (!(HEAP32[$5_1 >> 2] | 0)) {
       break label$12
      }
      $28(3805 | 0, 3784 | 0, 123 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
      HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
      break label$3;
     }
     HEAP32[($5_1 + 12 | 0) >> 2] = 0;
     label$13 : {
      label$14 : while (1) {
       if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$13
       }
       $160_1 = +HEAPF64[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       label$15 : {
        label$16 : {
         if (!(Math_abs($160_1) < 2147483648.0)) {
          break label$16
         }
         $130_1 = ~~$160_1;
         break label$15;
        }
        $130_1 = -2147483648;
       }
       HEAP32[((HEAP32[((HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 28 | 0) >> 2] | 0, 12) | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $130_1;
       HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
       continue label$14;
      };
     }
     HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
   $488($5_1 + 16 | 0 | 0);
   $34(2 | 0);
   HEAP32[($5_1 + 44 | 0) >> 2] = 0;
  }
  $155_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  label$17 : {
   $159_1 = $5_1 + 48 | 0;
   if ($159_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $159_1;
  }
  return $155_1 | 0;
 }
 
 function $48($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $41_1 = 0, $40_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $40_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $40_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    label$5 : {
     if (!(((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 12) | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$5
     }
     $525((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 12) | 0 | 0);
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  $1064(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  label$6 : {
   $41_1 = $3_1 + 16 | 0;
   if ($41_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $41_1;
  }
  return;
 }
 
 function $49($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $27_1 = 0, $35_1 = 0, $56_1 = 0, $160_1 = 0.0, $130_1 = 0, $159_1 = 0, $158_1 = 0, $43_1 = 0, $47_1 = 0, $155_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 48 | 0;
  label$1 : {
   $158_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $158_1;
  }
  HEAP32[($5_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $2_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) != (2 | 0) & 1 | 0)) {
     break label$4
    }
    if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$4
    }
    if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) != (3 | 0) & 1 | 0)) {
     break label$4
    }
    $27_1 = 9;
    $28(3806 | 0, 3784 | 0, 573 | 0, $27_1 | 0) | 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = $27_1;
    break label$3;
   }
   $35_1 = $5_1 + 16 | 0;
   $486($35_1 | 0, 0 | 0) | 0;
   $33(1 | 0, $35_1 | 0);
   label$5 : {
    if ($253(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) | 0) {
     break label$5
    }
    HEAP32[($5_1 + 32 | 0) >> 2] = 3;
   }
   $43_1 = $254(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 2] = $43_1;
   $47_1 = $1068(HEAP32[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 2] | 0 | 0, 12 | 0) | 0;
   HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 4 | 0) >> 2] = $47_1;
   label$6 : {
    if (!((HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$6
    }
    $56_1 = 2;
    $28(3806 | 0, 3784 | 0, 586 | 0, $56_1 | 0) | 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = $56_1;
    break label$3;
   }
   $33(5 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0);
   HEAP32[($5_1 + 28 | 0) >> 2] = 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$7
     }
     label$9 : {
      if (!((HEAP32[(0 + 11876 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$9
      }
      label$10 : {
       if (!($265(0 | 0) | 0)) {
        break label$10
       }
       HEAP32[($5_1 + 44 | 0) >> 2] = 13;
       break label$3;
      }
     }
     (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $263(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, $5_1 + 16 | 0 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
     label$11 : {
      if (!(HEAP32[($5_1 + 4 | 0) >> 2] | 0)) {
       break label$11
      }
      $28(3805 | 0, 3784 | 0, 593 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      break label$3;
     }
     (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $490($5_1 + 16 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
     (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $524((HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 28 | 0) >> 2] | 0, 12) | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     label$12 : {
      if (!(HEAP32[$5_1 >> 2] | 0)) {
       break label$12
      }
      $28(3805 | 0, 3784 | 0, 595 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
      HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
      break label$3;
     }
     HEAP32[($5_1 + 12 | 0) >> 2] = 0;
     label$13 : {
      label$14 : while (1) {
       if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$13
       }
       $160_1 = +HEAPF64[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       label$15 : {
        label$16 : {
         if (!(Math_abs($160_1) < 2147483648.0)) {
          break label$16
         }
         $130_1 = ~~$160_1;
         break label$15;
        }
        $130_1 = -2147483648;
       }
       HEAP32[((HEAP32[((HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 28 | 0) >> 2] | 0, 12) | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $130_1;
       HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
       continue label$14;
      };
     }
     HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
   $488($5_1 + 16 | 0 | 0);
   $34(2 | 0);
   HEAP32[($5_1 + 44 | 0) >> 2] = 0;
  }
  $155_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  label$17 : {
   $159_1 = $5_1 + 48 | 0;
   if ($159_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $159_1;
  }
  return $155_1 | 0;
 }
 
 function $50($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $29_1 = 0, $28_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $28_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $28_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $525((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 12) | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  $1064(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  label$5 : {
   $29_1 = $3_1 + 16 | 0;
   if ($29_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $29_1;
  }
  return;
 }
 
 function $51($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $20_1 = 0, $58_1 = 0, $57_1 = 0, $11_1 = 0, $54_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $57_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $57_1;
  }
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  $11_1 = $1068(HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0, 12 | 0) | 0;
  HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = $11_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$4
    }
    $20_1 = 2;
    $28(3806 | 0, 3784 | 0, 627 | 0, $20_1 | 0) | 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = $20_1;
    break label$3;
   }
   $33(5 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
   HEAP32[($4_1 + 16 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $524((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 16 | 0) >> 2] | 0, 12) | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
     label$7 : {
      if (!(HEAP32[($4_1 + 12 | 0) >> 2] | 0)) {
       break label$7
      }
      $28(3805 | 0, 3784 | 0, 632 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      break label$3;
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
   $34(1 | 0);
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $54_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$8 : {
   $58_1 = $4_1 + 32 | 0;
   if ($58_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $58_1;
  }
  return $54_1 | 0;
 }
 
 function $52($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $90_1 = 0.0, $22_1 = 0, $30_1 = 0, $101_1 = 0.0, $60_1 = 0, $86_1 = 0, $85_1 = 0, $54_1 = 0, $55_1 = 0, $82_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 48 | 0;
  label$1 : {
   $85_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $85_1;
  }
  HEAP32[($6_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $3_1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = ($490(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0) > (0 | 0) & 1 | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!(HEAP32[($6_1 + 24 | 0) >> 2] | 0)) {
     break label$4
    }
    $90_1 = +$500(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) + 1.0;
    break label$3;
   }
   $90_1 = +(0 | 0);
  }
  HEAPF64[($6_1 + 16 | 0) >> 3] = $90_1;
  label$5 : {
   label$6 : {
    if (!(($490(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0) % (2 | 0) | 0)) {
     break label$6
    }
    $22_1 = 6;
    $28(3840 | 0, 3867 | 0, 83 | 0, $22_1 | 0) | 0;
    HEAP32[($6_1 + 44 | 0) >> 2] = $22_1;
    break label$5;
   }
   label$7 : {
    if (!(HEAP32[($6_1 + 24 | 0) >> 2] | 0)) {
     break label$7
    }
    if ($509(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, +(+(0 | 0)), +(+HEAPF64[($6_1 + 16 | 0) >> 3] - 1.0)) | 0) {
     break label$7
    }
    $30_1 = 7;
    $28(3901 | 0, 3867 | 0, 86 | 0, $30_1 | 0) | 0;
    HEAP32[($6_1 + 44 | 0) >> 2] = $30_1;
    break label$5;
   }
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $246(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
   label$8 : {
    if (!(HEAP32[($6_1 + 12 | 0) >> 2] | 0)) {
     break label$8
    }
    $28(3930 | 0, 3867 | 0, 89 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    break label$5;
   }
   $33(6 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0);
   label$9 : {
    if (!(HEAP32[($6_1 + 24 | 0) >> 2] | 0)) {
     break label$9
    }
    (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $254(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
    label$10 : {
     if (!(+(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) < +HEAPF64[($6_1 + 16 | 0) >> 3] & 1 | 0)) {
      break label$10
     }
     $54_1 = 0;
     $55_1 = HEAP32[($6_1 + 40 | 0) >> 2] | 0;
     $101_1 = +HEAPF64[($6_1 + 16 | 0) >> 3] - +(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0);
     label$11 : {
      label$12 : {
       if (!(Math_abs($101_1) < 2147483648.0)) {
        break label$12
       }
       $60_1 = ~~$101_1;
       break label$11;
      }
      $60_1 = -2147483648;
     }
     (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $248($55_1 | 0, $60_1 | 0, $54_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
     label$13 : {
      if (!(HEAP32[($6_1 + 4 | 0) >> 2] | 0)) {
       break label$13
      }
      $28(3930 | 0, 3867 | 0, 94 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
      break label$5;
     }
    }
    (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $252(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    label$14 : {
     if (!(HEAP32[$6_1 >> 2] | 0)) {
      break label$14
     }
     $28(3930 | 0, 3867 | 0, 96 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
     break label$5;
    }
   }
   $34(1 | 0);
   HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  }
  $82_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
  label$15 : {
   $86_1 = $6_1 + 48 | 0;
   if ($86_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $86_1;
  }
  return $82_1 | 0;
 }
 
 function $53($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $3_1 = 0, $14_1 = 0.0, $13_1 = 0, $12_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  $14_1 = +(0 | 0);
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $54($5_1 | 0) | 0;
  $55($5_1 + 12 | 0 | 0) | 0;
  $55($5_1 + 24 | 0 | 0) | 0;
  HEAPF64[($5_1 + 64 | 0) >> 3] = $14_1;
  HEAPF64[($5_1 + 72 | 0) >> 3] = $14_1;
  HEAPF64[($5_1 + 40 | 0) >> 3] = $14_1;
  label$3 : {
   $13_1 = $3_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $5_1 | 0;
 }
 
 function $54($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $56($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $55($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $57($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $56($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0, $7_1 = 0, $14_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $7_1 = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $88($8_1 | 0) | 0;
  HEAP32[$8_1 >> 2] = $7_1;
  HEAP32[($8_1 + 4 | 0) >> 2] = $7_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $7_1;
  $89($8_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $8_1 | 0;
 }
 
 function $57($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0, $7_1 = 0, $14_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $7_1 = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $88($8_1 | 0) | 0;
  HEAP32[$8_1 >> 2] = $7_1;
  HEAP32[($8_1 + 4 | 0) >> 2] = $7_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $7_1;
  $94($8_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $8_1 | 0;
 }
 
 function $58($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  var $5_1 = 0, $10_1 = 0, $19_1 = 0.0, $18_1 = 0, $17_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $17_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $17_1;
  }
  $19_1 = +(0 | 0);
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAPF64[$5_1 >> 3] = $2_1;
  $10_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $54($10_1 | 0) | 0;
  $55($10_1 + 12 | 0 | 0) | 0;
  $55($10_1 + 24 | 0 | 0) | 0;
  HEAPF64[($10_1 + 48 | 0) >> 3] = +HEAPF64[$5_1 >> 3];
  HEAPF64[($10_1 + 64 | 0) >> 3] = $19_1;
  HEAPF64[($10_1 + 72 | 0) >> 3] = $19_1;
  HEAPF64[($10_1 + 40 | 0) >> 3] = $19_1;
  $59($10_1 | 0, $5_1 + 8 | 0 | 0);
  label$3 : {
   $18_1 = $5_1 + 16 | 0;
   if ($18_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  return $10_1 | 0;
 }
 
 function $59($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $27_1 = 0, $26_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $26_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $26_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($60($5_1 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    $61($4_1 | 0, $5_1 | 0, 1 | 0) | 0;
    $64($62($5_1 | 0) | 0 | 0, $63(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
    $65($4_1 | 0);
    HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 4 | 0;
    break label$3;
   }
   $66($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  label$5 : {
   $27_1 = $4_1 + 16 | 0;
   if ($27_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $27_1;
  }
  return;
 }
 
 function $60($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $136((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $61($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $62($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $109((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $63($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $64($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $138(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, $137(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0);
  label$3 : {
   $13_1 = $5_1 + 32 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $65($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $66($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $25_1 = 0, $24_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $24_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $24_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $62($6_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  $140($4_1 | 0, $139($6_1 | 0, ($68($6_1 | 0) | 0) + 1 | 0 | 0) | 0 | 0, $68($6_1 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $64(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, $63(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, $137(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0;
  $141($6_1 | 0, $4_1 | 0);
  $142($4_1 | 0) | 0;
  label$3 : {
   $25_1 = $4_1 + 32 | 0;
   if ($25_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  return;
 }
 
 function $67($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0, $41_1 = 0, $86_1 = 0, $129_1 = 0, $128_1 = 0, $31_1 = 0, $64_1 = 0, $135_1 = 0.0, $107_1 = 0, $136_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $4_1 = global$0 - 80 | 0;
  label$1 : {
   $128_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $128_1;
  }
  $8_1 = $4_1 + 56 | 0;
  HEAP32[($4_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 72 | 0) >> 2] = $1_1;
  HEAPF64[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 64 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 64 | 0) >> 3];
  HEAPF64[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 72 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 72 | 0) >> 3];
  HEAPF64[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 48 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 48 | 0) >> 3];
  HEAPF64[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 56 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 56 | 0) >> 3];
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $68(HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 68 | 0) >> 2] = wasm2js_i32$1;
  $69($8_1 | 0, HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) | 0;
  $70(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, $8_1 | 0) | 0;
  $71($8_1 | 0) | 0;
  HEAP32[($4_1 + 52 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $31_1 = HEAP32[($72(HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    (wasm2js_i32$0 = $72(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $31_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    HEAP32[($4_1 + 52 | 0) >> 2] = (HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  $41_1 = $4_1 + 32 | 0;
  HEAPF64[((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 40 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 40 | 0) >> 3];
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $73((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 24 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 48 | 0) >> 2] = wasm2js_i32$1;
  $74($41_1 | 0, HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) | 0;
  $75((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 24 | 0 | 0, $41_1 | 0) | 0;
  $76($41_1 | 0) | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    $64_1 = HEAP32[($77((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    (wasm2js_i32$0 = $77((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $64_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $135_1 = +HEAPF64[(($77((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 3];
    (wasm2js_i32$0 = $77((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0, wasm2js_f64$0 = $135_1), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
    HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  $86_1 = $4_1 + 8 | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $73((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 12 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  $74($86_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $75((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 12 | 0 | 0, $86_1 | 0) | 0;
  $76($86_1 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    $107_1 = HEAP32[($77((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    (wasm2js_i32$0 = $77((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $107_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $136_1 = +HEAPF64[(($77((HEAP32[($4_1 + 72 | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 3];
    (wasm2js_i32$0 = $77((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0, wasm2js_f64$0 = $136_1), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  label$9 : {
   $129_1 = $4_1 + 80 | 0;
   if ($129_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $129_1;
  }
  return;
 }
 
 function $68($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $69($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $19_1 = 0, $18_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
  $56($6_1 | 0) | 0;
  label$3 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$3
   }
   $78($6_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
   $79($6_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  $15_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$4 : {
   $19_1 = $4_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  return $15_1 | 0;
 }
 
 function $70($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $80($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $5_1 | 0;
 }
 
 function $71($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $81($4_1 | 0);
  $82($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $72($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0;
 }
 
 function $73($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 4 | 0 | 0;
 }
 
 function $74($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $19_1 = 0, $18_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
  $57($6_1 | 0) | 0;
  label$3 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$3
   }
   $83($6_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
   $84($6_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  $15_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$4 : {
   $19_1 = $4_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  return $15_1 | 0;
 }
 
 function $75($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $85($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $5_1 | 0;
 }
 
 function $76($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $86($4_1 | 0);
  $87($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $77($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 4 | 0) | 0 | 0;
 }
 
 function $78($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $16_1 = 0, $26_1 = 0, $25_1 = 0, $21_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $25_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($145($5_1 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$3
   }
   $1024($5_1 | 0);
   abort();
  }
  $16_1 = $149($62($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $16_1;
  HEAP32[$5_1 >> 2] = $16_1;
  $21_1 = (HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  (wasm2js_i32$0 = $60($5_1 | 0) | 0, wasm2js_i32$1 = $21_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $153($5_1 | 0, 0 | 0);
  label$4 : {
   $26_1 = $4_1 + 16 | 0;
   if ($26_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $26_1;
  }
  return;
 }
 
 function $79($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $28_1 = 0, $27_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $27_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $27_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $62($5_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  label$3 : while (1) {
   $61($4_1 | 0, $5_1 | 0, 1 | 0) | 0;
   $183(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, $63(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
   HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 4 | 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + -1 | 0;
   $65($4_1 | 0);
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    continue label$3
   }
   break label$3;
  };
  label$4 : {
   $28_1 = $4_1 + 16 | 0;
   if ($28_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $28_1;
  }
  return;
 }
 
 function $80($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $23_1 = 0, $22_1 = 0, $14_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $22_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  $5_1 = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $186($6_1 | 0);
  $187($6_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  HEAP32[$6_1 >> 2] = HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] | 0;
  $14_1 = HEAP32[($60(HEAP32[$4_1 >> 2] | 0 | 0) | 0) >> 2] | 0;
  (wasm2js_i32$0 = $60($6_1 | 0) | 0, wasm2js_i32$1 = $14_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $60(HEAP32[$4_1 >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $5_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] = $5_1;
  HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] = $5_1;
  label$3 : {
   $23_1 = $4_1 + 16 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return;
 }
 
 function $81($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $24_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $23_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $100($4_1 | 0, $98($4_1 | 0) | 0 | 0, ($98($4_1 | 0) | 0) + (($99($4_1 | 0) | 0) << 2 | 0) | 0 | 0, ($98($4_1 | 0) | 0) + (($68($4_1 | 0) | 0) << 2 | 0) | 0 | 0, ($98($4_1 | 0) | 0) + (($99($4_1 | 0) | 0) << 2 | 0) | 0 | 0);
  label$3 : {
   $24_1 = $3_1 + 16 | 0;
   if ($24_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $24_1;
  }
  return;
 }
 
 function $82($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $19_1 = 0, $18_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $5_1;
  label$3 : {
   if (!((HEAP32[$5_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $101($5_1 | 0);
   $103($62($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $102($5_1 | 0) | 0 | 0);
  }
  $15_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$4 : {
   $19_1 = $3_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  return $15_1 | 0;
 }
 
 function $83($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $16_1 = 0, $26_1 = 0, $25_1 = 0, $21_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $25_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($192($5_1 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$3
   }
   $1024($5_1 | 0);
   abort();
  }
  $16_1 = $193($122($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $16_1;
  HEAP32[$5_1 >> 2] = $16_1;
  $21_1 = (HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 4 | 0) | 0;
  (wasm2js_i32$0 = $194($5_1 | 0) | 0, wasm2js_i32$1 = $21_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $195($5_1 | 0, 0 | 0);
  label$4 : {
   $26_1 = $4_1 + 16 | 0;
   if ($26_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $26_1;
  }
  return;
 }
 
 function $84($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $28_1 = 0, $27_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $27_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $27_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $122($5_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  label$3 : while (1) {
   $196($4_1 | 0, $5_1 | 0, 1 | 0) | 0;
   $197(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, $125(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
   HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 16 | 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + -1 | 0;
   $198($4_1 | 0);
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    continue label$3
   }
   break label$3;
  };
  label$4 : {
   $28_1 = $4_1 + 16 | 0;
   if ($28_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $28_1;
  }
  return;
 }
 
 function $85($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $23_1 = 0, $22_1 = 0, $14_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $22_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  $5_1 = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $211($6_1 | 0);
  $212($6_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  HEAP32[$6_1 >> 2] = HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] | 0;
  $14_1 = HEAP32[($194(HEAP32[$4_1 >> 2] | 0 | 0) | 0) >> 2] | 0;
  (wasm2js_i32$0 = $194($6_1 | 0) | 0, wasm2js_i32$1 = $14_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $194(HEAP32[$4_1 >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $5_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] = $5_1;
  HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] = $5_1;
  label$3 : {
   $23_1 = $4_1 + 16 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return;
 }
 
 function $86($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $24_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $23_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $120($4_1 | 0, $118($4_1 | 0) | 0 | 0, ($118($4_1 | 0) | 0) + (($119($4_1 | 0) | 0) << 4 | 0) | 0 | 0, ($118($4_1 | 0) | 0) + (($73($4_1 | 0) | 0) << 4 | 0) | 0 | 0, ($118($4_1 | 0) | 0) + (($119($4_1 | 0) | 0) << 4 | 0) | 0 | 0);
  label$3 : {
   $24_1 = $3_1 + 16 | 0;
   if ($24_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $24_1;
  }
  return;
 }
 
 function $87($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $19_1 = 0, $18_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $5_1;
  label$3 : {
   if (!((HEAP32[$5_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $121($5_1 | 0);
   $124($122($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $123($5_1 | 0) | 0 | 0);
  }
  $15_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$4 : {
   $19_1 = $3_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  return $15_1 | 0;
 }
 
 function $88($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $89($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $11_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $91($5_1 | 0, $90(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $92($5_1 | 0) | 0;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $5_1 | 0;
 }
 
 function $90($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $91($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $11_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $90(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$6_1 >> 2] = 0;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $6_1 | 0;
 }
 
 function $92($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $93($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $93($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $94($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $11_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $95($5_1 | 0, $90(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $96($5_1 | 0) | 0;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $5_1 | 0;
 }
 
 function $95($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $11_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $90(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$6_1 >> 2] = 0;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $6_1 | 0;
 }
 
 function $96($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $97($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $97($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $98($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $63(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $99($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $102(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $100($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  return;
 }
 
 function $101($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $107($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return;
 }
 
 function $102($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $14_1 = 0, $13_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($104($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 2 | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $10_1 | 0;
 }
 
 function $103($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $108(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  label$3 : {
   $12_1 = $5_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return;
 }
 
 function $104($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $105((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $105($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $106(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $106($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $107($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $17_1 = 0, $23_1 = 0, $22_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $22_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $14_1 = $62($5_1 | 0) | 0;
    $17_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $17_1;
    $110($14_1 | 0, $63($17_1 | 0) | 0 | 0);
    continue label$4;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$5 : {
   $23_1 = $4_1 + 16 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return;
 }
 
 function $108($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $14_1 = 0, $13_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $113(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0 | 0, 4 | 0);
  label$3 : {
   $14_1 = $5_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return;
 }
 
 function $109($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $117(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $110($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $111(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 32 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $111($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $112(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $112($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $113($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $114(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  label$3 : {
   $12_1 = $5_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return;
 }
 
 function $114($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $11_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $115(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  label$3 : {
   $11_1 = $5_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return;
 }
 
 function $115($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $116(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  label$3 : {
   $9_1 = $4_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return;
 }
 
 function $116($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $1017(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return;
 }
 
 function $117($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $118($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $125(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $119($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $123(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $120($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  return;
 }
 
 function $121($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $129($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return;
 }
 
 function $122($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $131((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $123($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $14_1 = 0, $13_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($126($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 4 | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $10_1 | 0;
 }
 
 function $124($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $130(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  label$3 : {
   $12_1 = $5_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return;
 }
 
 function $125($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $126($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $127((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $127($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $128(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $128($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $129($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $17_1 = 0, $23_1 = 0, $22_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $22_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $14_1 = $122($5_1 | 0) | 0;
    $17_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -16 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $17_1;
    $132($14_1 | 0, $125($17_1 | 0) | 0 | 0);
    continue label$4;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$5 : {
   $23_1 = $4_1 + 16 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return;
 }
 
 function $130($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $14_1 = 0, $13_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $113(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 4 | 0 | 0, 8 | 0);
  label$3 : {
   $14_1 = $5_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return;
 }
 
 function $131($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $135(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $132($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $133(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 32 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $133($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $134(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $134($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $135($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $136($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $143(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $137($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $138($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  $144(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $137(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0);
  label$3 : {
   $13_1 = $5_1 + 32 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $139($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $40_1 = 0, $39_1 = 0, $36_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $39_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $39_1;
  }
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $145($5_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$3
   }
   $1024($5_1 | 0);
   abort();
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $99($5_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  label$4 : {
   label$5 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break label$4;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0;
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[($146($4_1 + 8 | 0 | 0, $4_1 + 20 | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  }
  $36_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$6 : {
   $40_1 = $4_1 + 32 | 0;
   if ($40_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $40_1;
  }
  return $36_1 | 0;
 }
 
 function $140($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $11_1 = 0, $19_1 = 0, $26_1 = 0, $37_1 = 0, $36_1 = 0, $31_1 = 0, $33_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 32 | 0;
  label$1 : {
   $36_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $36_1;
  }
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $11_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $11_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  $147($11_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (!(HEAP32[($6_1 + 20 | 0) >> 2] | 0)) {
     break label$4
    }
    $19_1 = $149($148($11_1 | 0) | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    break label$3;
   }
   $19_1 = 0;
  }
  HEAP32[$11_1 >> 2] = $19_1;
  $26_1 = (HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($11_1 + 8 | 0) >> 2] = $26_1;
  HEAP32[($11_1 + 4 | 0) >> 2] = $26_1;
  $31_1 = (HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0;
  (wasm2js_i32$0 = $150($11_1 | 0) | 0, wasm2js_i32$1 = $31_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $33_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  label$5 : {
   $37_1 = $6_1 + 32 | 0;
   if ($37_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $37_1;
  }
  return $33_1 | 0;
 }
 
 function $141($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $30_1 = 0, $29_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $29_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $29_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $81($5_1 | 0);
  $151($62($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $152($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $152($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0 | 0);
  $152($60($5_1 | 0) | 0 | 0, $150(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $153($5_1 | 0, $68($5_1 | 0) | 0 | 0);
  $154($5_1 | 0);
  label$3 : {
   $30_1 = $4_1 + 16 | 0;
   if ($30_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $30_1;
  }
  return;
 }
 
 function $142($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $19_1 = 0, $18_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $5_1;
  $155($5_1 | 0);
  label$3 : {
   if (!((HEAP32[$5_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $103($148($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $156($5_1 | 0) | 0 | 0);
  }
  $15_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$4 : {
   $19_1 = $3_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  return $15_1 | 0;
 }
 
 function $143($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $144($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = HEAP32[($5_1 + 8 | 0) >> 2] | 0, wasm2js_i32$1 = HEAP32[($137(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$3 : {
   $13_1 = $5_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $145($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0, $18_1 = 0, $15_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $158($157(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $159() | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  $15_1 = HEAP32[($160($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  label$3 : {
   $19_1 = $3_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  return $15_1 | 0;
 }
 
 function $146($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $161(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $147($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $16_1 = 0, $15_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $15_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $91($6_1 | 0, $90(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $170($6_1 + 4 | 0 | 0, $169(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $16_1 = $5_1 + 16 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  return $6_1 | 0;
 }
 
 function $148($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $172((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $149($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $12_1 = 0, $11_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = $171(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  label$3 : {
   $12_1 = $4_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $8_1 | 0;
 }
 
 function $150($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $173((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $151($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $14_1 = 0, $35_1 = 0, $34_1 = 0;
  $6_1 = global$0 - 32 | 0;
  label$1 : {
   $34_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $34_1;
  }
  $7_1 = 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) - (HEAP32[($6_1 + 24 | 0) >> 2] | 0) | 0) >> 2 | 0;
  $14_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
  HEAP32[$14_1 >> 2] = (HEAP32[$14_1 >> 2] | 0) + (($7_1 - (HEAP32[($6_1 + 12 | 0) >> 2] | 0) | 0) << 2 | 0) | 0;
  label$3 : {
   if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) > ($7_1 | 0) & 1 | 0)) {
    break label$3
   }
   $1070(HEAP32[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
  }
  label$4 : {
   $35_1 = $6_1 + 32 | 0;
   if ($35_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $35_1;
  }
  return;
 }
 
 function $152($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $21_1 = 0, $20_1 = 0, $13_1 = 0, $16_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[($178(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  $13_1 = HEAP32[($178(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = $13_1;
  $16_1 = HEAP32[($178($4_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = $16_1;
  label$3 : {
   $21_1 = $4_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $21_1;
  }
  return;
 }
 
 function $153($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $25_1 = 0, $24_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $24_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $24_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $100($5_1 | 0, $98($5_1 | 0) | 0 | 0, ($98($5_1 | 0) | 0) + (($99($5_1 | 0) | 0) << 2 | 0) | 0 | 0, ($98($5_1 | 0) | 0) + (($99($5_1 | 0) | 0) << 2 | 0) | 0 | 0, ($98($5_1 | 0) | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  label$3 : {
   $25_1 = $4_1 + 16 | 0;
   if ($25_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  return;
 }
 
 function $154($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $155($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $179($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return;
 }
 
 function $156($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $14_1 = 0, $13_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($180($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 2 | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $10_1 | 0;
 }
 
 function $157($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $164((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $158($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $163(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $159() {
  return $165() | 0 | 0;
 }
 
 function $160($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $162(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $161($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0, $20_1 = 0, $19_1 = 0, $16_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $19_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  label$3 : {
   label$4 : {
    if (!(($166($4_1 + 8 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$4
    }
    $14_1 = HEAP32[$4_1 >> 2] | 0;
    break label$3;
   }
   $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  }
  $16_1 = $14_1;
  label$5 : {
   $20_1 = $4_1 + 16 | 0;
   if ($20_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  return $16_1 | 0;
 }
 
 function $162($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0, $20_1 = 0, $19_1 = 0, $16_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $19_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  label$3 : {
   label$4 : {
    if (!(($166($4_1 + 8 | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$4
    }
    $14_1 = HEAP32[$4_1 >> 2] | 0;
    break label$3;
   }
   $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  }
  $16_1 = $14_1;
  label$5 : {
   $20_1 = $4_1 + 16 | 0;
   if ($20_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  return $16_1 | 0;
 }
 
 function $163($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $5_1 = $167(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $164($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $168(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $165() {
  return 2147483647 | 0;
 }
 
 function $166($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return (HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) >>> 0 & 1 | 0 | 0;
 }
 
 function $167($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 1073741823 | 0;
 }
 
 function $168($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $169($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $170($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $11_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $169(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $5_1 | 0;
 }
 
 function $171($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $23_1 = 0, $22_1 = 0, $19_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $22_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$3 : {
   if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 > ($167(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$3
   }
   $174(3931 | 0);
   abort();
  }
  $19_1 = $175((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 2 | 0 | 0, 4 | 0) | 0;
  label$4 : {
   $23_1 = $5_1 + 16 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return $19_1 | 0;
 }
 
 function $172($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $177((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $173($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $143(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $174($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $9_1 = fimport$3(8 | 0) | 0;
  $176($9_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  fimport$4($9_1 | 0, 9608 | 0, 7 | 0);
  abort();
 }
 
 function $175($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = $1015(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $176($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0, $14_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1022($9_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$9_1 >> 2] = 9568 + 8 | 0;
  label$3 : {
   $14_1 = $4_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $9_1 | 0;
 }
 
 function $177($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $178($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $179($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $181(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $180($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $182((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $181($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $16_1 = 0, $21_1 = 0, $20_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $13_1 = $148($5_1 | 0) | 0;
    $16_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $16_1;
    $110($13_1 | 0, $63($16_1 | 0) | 0 | 0);
    continue label$4;
   };
  }
  label$5 : {
   $21_1 = $4_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $21_1;
  }
  return;
 }
 
 function $182($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $106(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $183($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $184(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 32 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $184($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $185(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $185($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = 0;
  return;
 }
 
 function $186($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $3_1 = 0, $12_1 = 0, $20_1 = 0, $19_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $19_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if (!((HEAP32[$5_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $12_1 = 0;
   $188($5_1 | 0);
   $103($62($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $99($5_1 | 0) | 0 | 0);
   (wasm2js_i32$0 = $60($5_1 | 0) | 0, wasm2js_i32$1 = $12_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   HEAP32[($5_1 + 4 | 0) >> 2] = $12_1;
   HEAP32[$5_1 >> 2] = $12_1;
  }
  label$4 : {
   $20_1 = $3_1 + 16 | 0;
   if ($20_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  return;
 }
 
 function $187($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $189(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $188($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $68($4_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  $101($4_1 | 0);
  $190($4_1 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  $154($4_1 | 0);
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $189($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0, $10_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $191($62(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0) | 0;
  $62($5_1 | 0) | 0;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return;
 }
 
 function $190($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $25_1 = 0, $24_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $24_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $24_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $100($5_1 | 0, $98($5_1 | 0) | 0 | 0, ($98($5_1 | 0) | 0) + (($99($5_1 | 0) | 0) << 2 | 0) | 0 | 0, ($98($5_1 | 0) | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, ($98($5_1 | 0) | 0) + (($68($5_1 | 0) | 0) << 2 | 0) | 0 | 0);
  label$3 : {
   $25_1 = $4_1 + 16 | 0;
   if ($25_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  return;
 }
 
 function $191($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $192($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0, $18_1 = 0, $15_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $200($199(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $159() | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  $15_1 = HEAP32[($160($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  label$3 : {
   $19_1 = $3_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  return $15_1 | 0;
 }
 
 function $193($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $12_1 = 0, $11_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = $201(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  label$3 : {
   $12_1 = $4_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $8_1 | 0;
 }
 
 function $194($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $202((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $195($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $25_1 = 0, $24_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $24_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $24_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $120($5_1 | 0, $118($5_1 | 0) | 0 | 0, ($118($5_1 | 0) | 0) + (($119($5_1 | 0) | 0) << 4 | 0) | 0 | 0, ($118($5_1 | 0) | 0) + (($119($5_1 | 0) | 0) << 4 | 0) | 0 | 0, ($118($5_1 | 0) | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 4 | 0) | 0 | 0);
  label$3 : {
   $25_1 = $4_1 + 16 | 0;
   if ($25_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  return;
 }
 
 function $196($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $197($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $208(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 32 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $198($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $199($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $204((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $200($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $203(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $201($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $23_1 = 0, $22_1 = 0, $19_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $22_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$3 : {
   if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 > ($205(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$3
   }
   $174(3931 | 0);
   abort();
  }
  $19_1 = $175((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 4 | 0 | 0, 8 | 0) | 0;
  label$4 : {
   $23_1 = $5_1 + 16 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return $19_1 | 0;
 }
 
 function $202($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $207(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $203($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $5_1 = $205(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $204($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $206(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $205($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 268435455 | 0;
 }
 
 function $206($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $207($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $208($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $209(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $209($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $210(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $4_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return;
 }
 
 function $210($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  $4_1 = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $4_1;
  HEAPF64[($5_1 + 8 | 0) >> 3] = +($4_1 | 0);
  return $5_1 | 0;
 }
 
 function $211($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $3_1 = 0, $12_1 = 0, $20_1 = 0, $19_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $19_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if (!((HEAP32[$5_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $12_1 = 0;
   $213($5_1 | 0);
   $124($122($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $119($5_1 | 0) | 0 | 0);
   (wasm2js_i32$0 = $194($5_1 | 0) | 0, wasm2js_i32$1 = $12_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   HEAP32[($5_1 + 4 | 0) >> 2] = $12_1;
   HEAP32[$5_1 >> 2] = $12_1;
  }
  label$4 : {
   $20_1 = $3_1 + 16 | 0;
   if ($20_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  return;
 }
 
 function $212($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $214(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $213($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $73($4_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  $121($4_1 | 0);
  $215($4_1 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  $216($4_1 | 0);
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $214($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0, $10_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $217($122(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0) | 0;
  $122($5_1 | 0) | 0;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return;
 }
 
 function $215($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $25_1 = 0, $24_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $24_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $24_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $120($5_1 | 0, $118($5_1 | 0) | 0 | 0, ($118($5_1 | 0) | 0) + (($119($5_1 | 0) | 0) << 4 | 0) | 0 | 0, ($118($5_1 | 0) | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 4 | 0) | 0 | 0, ($118($5_1 | 0) | 0) + (($73($5_1 | 0) | 0) << 4 | 0) | 0 | 0);
  label$3 : {
   $25_1 = $4_1 + 16 | 0;
   if ($25_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  return;
 }
 
 function $216($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $217($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $218($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0, $47_1 = 0, $51_1 = 0, $71_1 = 0, $70_1 = 0, $38_1 = 0, $67_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $70_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $70_1;
  }
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$4
    }
    $13_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    break label$3;
   }
   $13_1 = 1;
  }
  HEAP32[$4_1 >> 2] = $13_1;
  label$5 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$5
   }
   fimport$1(3999 | 0, 4009 | 0, 93 | 0, 4033 | 0);
   abort();
  }
  label$6 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$6
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  }
  $38_1 = $1068(HEAP32[$4_1 >> 2] | 0 | 0, 4 | 0) | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = $38_1;
  label$7 : {
   label$8 : {
    if (!((HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$8
    }
    $47_1 = 2;
    $28(4056 | 0, 4009 | 0, 99 | 0, $47_1 | 0) | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $47_1;
    break label$7;
   }
   $51_1 = 0;
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0;
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] = (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0;
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] = $51_1;
   HEAP32[($4_1 + 12 | 0) >> 2] = $51_1;
  }
  $67_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$9 : {
   $71_1 = $4_1 + 16 | 0;
   if ($71_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $71_1;
  }
  return $67_1 | 0;
 }
 
 function $219($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $23_1 = 0, $31_1 = 0, $30_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $30_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $30_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(4079 | 0, 4009 | 0, 137 | 0, 4086 | 0);
   abort();
  }
  label$4 : {
   if (!((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$4
   }
   $23_1 = 0;
   $1064(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0);
   HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] = $23_1;
   HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] = $23_1;
  }
  label$5 : {
   $31_1 = $3_1 + 16 | 0;
   if ($31_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $31_1;
  }
  return;
 }
 
 function $220($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $52_1 = 0, $77_1 = 0, $76_1 = 0, $73_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $76_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $76_1;
  }
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $221(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(3999 | 0, 4009 | 0, 222 | 0, 4112 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(4138 | 0, 4009 | 0, 223 | 0, 4112 | 0);
   abort();
  }
  label$5 : {
   label$6 : {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) <= ($221(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 0;
    break label$5;
   }
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1067(HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 2 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
   label$7 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$7
    }
    $52_1 = 2;
    $28(4160 | 0, 4009 | 0, 231 | 0, $52_1 | 0) | 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = $52_1;
    break label$5;
   }
   HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = (HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0;
   HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] = (HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $73_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$8 : {
   $77_1 = $4_1 + 32 | 0;
   if ($77_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $77_1;
  }
  return $73_1 | 0;
 }
 
 function $221($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $25_1 = 0, $24_1 = 0, $21_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $24_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $24_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(3999 | 0, 4009 | 0, 263 | 0, 4186 | 0);
   abort();
  }
  $21_1 = ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) - (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 2 | 0;
  label$4 : {
   $25_1 = $3_1 + 16 | 0;
   if ($25_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  return $21_1 | 0;
 }
 
 function $222($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $56_1 = 0, $64_1 = 0, $63_1 = 0, $60_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $63_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $63_1;
  }
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$3 : {
   if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(3999 | 0, 4009 | 0, 315 | 0, 4209 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(4138 | 0, 4009 | 0, 316 | 0, 4209 | 0);
   abort();
  }
  label$5 : {
   label$6 : {
    if (!((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$6
    }
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = ($221(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) << 1 | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
    label$7 : {
     if (HEAP32[($4_1 + 16 | 0) >> 2] | 0) {
      break label$7
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = 1;
    }
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $220(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
    label$8 : {
     if (!(HEAP32[($4_1 + 12 | 0) >> 2] | 0)) {
      break label$8
     }
     $28(4237 | 0, 4009 | 0, 324 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     break label$5;
    }
   }
   HEAP32[(HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
   $56_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
   HEAP32[($56_1 + 8 | 0) >> 2] = (HEAP32[($56_1 + 8 | 0) >> 2] | 0) + 4 | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $60_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$9 : {
   $64_1 = $4_1 + 32 | 0;
   if ($64_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $64_1;
  }
  return $60_1 | 0;
 }
 
 function $223($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $57_1 = 0, $56_1 = 0, $53_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $56_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $56_1;
  }
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $221(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $224(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!(HEAP32[($5_1 + 8 | 0) >> 2] | 0)) {
     break label$4
    }
    $28(4237 | 0, 4009 | 0, 357 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
    break label$3;
   }
   label$5 : {
    if (!((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    $1072(((HEAP32[(HEAP32[($5_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 4 | 0 | 0, (HEAP32[(HEAP32[($5_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) - (HEAP32[($5_1 + 20 | 0) >> 2] | 0) | 0) << 2 | 0 | 0) | 0;
   }
   HEAP32[((HEAP32[(HEAP32[($5_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   HEAP32[($5_1 + 28 | 0) >> 2] = 0;
  }
  $53_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$6 : {
   $57_1 = $5_1 + 32 | 0;
   if ($57_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $57_1;
  }
  return $53_1 | 0;
 }
 
 function $224($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $26_1 = 0, $25_1 = 0, $22_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $25_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $220(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!(HEAP32[$4_1 >> 2] | 0)) {
     break label$4
    }
    $28(4237 | 0, 4009 | 0, 436 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
    break label$3;
   }
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] = (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  $22_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$5 : {
   $26_1 = $4_1 + 16 | 0;
   if ($26_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $26_1;
  }
  return $22_1 | 0;
 }
 
 function $225($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $60_1 = 0, $67_1 = 0, $66_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $66_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $66_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$3 : {
   if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(3999 | 0, 4009 | 0, 524 | 0, 4238 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(4138 | 0, 4009 | 0, 525 | 0, 4238 | 0);
   abort();
  }
  label$5 : {
   if (!(((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0) < ($221(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
    break label$5
   }
   $1072((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, ((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) + 4 | 0 | 0, ((($221(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0) - 1 | 0) << 2 | 0 | 0) | 0;
  }
  $60_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($60_1 + 8 | 0) >> 2] = (HEAP32[($60_1 + 8 | 0) >> 2] | 0) + -4 | 0;
  label$6 : {
   $67_1 = $4_1 + 16 | 0;
   if ($67_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $67_1;
  }
  return;
 }
 
 function $226($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $1000(HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, $221(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, 4 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  label$3 : {
   $14_1 = $4_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return;
 }
 
 function $227($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $104_1 = 0.0, $9_1 = 0, $108_1 = 0.0, $50_1 = 0, $74_1 = 0, $103_1 = 0, $102_1 = 0, $4_1 = 0, $107_1 = 0.0, $99_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 48 | 0;
  label$1 : {
   $102_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $102_1;
  }
  $4_1 = 0;
  HEAP32[($3_1 + 40 | 0) >> 2] = $0_1;
  $104_1 = +$500(HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0);
  label$3 : {
   label$4 : {
    if (!(Math_abs($104_1) < 2147483648.0)) {
     break label$4
    }
    $9_1 = ~~$104_1;
    break label$3;
   }
   $9_1 = -2147483648;
  }
  HEAP32[($3_1 + 36 | 0) >> 2] = $9_1 + 1 | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $4_1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $490(HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $486($3_1 + 24 | 0 | 0, HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  label$5 : {
   label$6 : {
    if (!(HEAP32[($3_1 + 8 | 0) >> 2] | 0)) {
     break label$6
    }
    $28(4263 | 0, 4264 | 0, 60 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($3_1 + 44 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    break label$5;
   }
   $33(1 | 0, $3_1 + 24 | 0 | 0);
   HEAP32[($3_1 + 16 | 0) >> 2] = 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$7
     }
     $107_1 = +(0 | 0);
     $108_1 = +HEAPF64[((HEAP32[(HEAP32[($3_1 + 40 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($3_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$9 : {
      label$10 : {
       if (!(Math_abs($108_1) < 2147483648.0)) {
        break label$10
       }
       $50_1 = ~~$108_1;
       break label$9;
      }
      $50_1 = -2147483648;
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = $50_1;
     label$11 : {
      label$12 : {
       if (!(+HEAPF64[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] != $107_1 & 1 | 0)) {
        break label$12
       }
       HEAPF64[((HEAP32[(HEAP32[($3_1 + 40 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($3_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - 1.0;
       break label$11;
      }
      $74_1 = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($3_1 + 20 | 0) >> 2] = $74_1;
      HEAPF64[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +($74_1 | 0);
      HEAPF64[((HEAP32[(HEAP32[($3_1 + 40 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($3_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - 1.0;
     }
     HEAP32[($3_1 + 16 | 0) >> 2] = (HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
   $488($3_1 + 24 | 0 | 0);
   $34(1 | 0);
   HEAP32[($3_1 + 44 | 0) >> 2] = 0;
  }
  $99_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
  label$13 : {
   $103_1 = $3_1 + 48 | 0;
   if ($103_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $103_1;
  }
  return $99_1 | 0;
 }
 
 function $228($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $67_1 = 0, $147_1 = 0, $480_1 = 0.0, $158_1 = 0, $488_1 = 0.0, $264_1 = 0, $491_1 = 0.0, $276_1 = 0, $494_1 = 0.0, $288_1 = 0, $497_1 = 0.0, $299_1 = 0, $500_1 = 0.0, $310_1 = 0, $478_1 = 0, $477_1 = 0, $144_1 = 0, $474_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $10_1 = global$0 - 160 | 0;
  label$1 : {
   $477_1 = $10_1;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $477_1;
  }
  HEAP32[($10_1 + 152 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 148 | 0) >> 2] = $1_1;
  HEAP32[($10_1 + 144 | 0) >> 2] = $2_1;
  HEAP32[($10_1 + 140 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 136 | 0) >> 2] = $4_1;
  HEAP32[($10_1 + 132 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 128 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 124 | 0) >> 2] = $7_1;
  (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $254(HEAP32[($10_1 + 152 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 108 | 0) >> 2] = wasm2js_i32$1;
  HEAPF64[($10_1 + 96 | 0) >> 3] = -1.0;
  HEAP32[($10_1 + 92 | 0) >> 2] = 0;
  (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $486($10_1 + 112 | 0 | 0, HEAP32[($10_1 + 108 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 84 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!(HEAP32[($10_1 + 84 | 0) >> 2] | 0)) {
     break label$4
    }
    $28(4263 | 0, 4264 | 0, 93 | 0, HEAP32[($10_1 + 84 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($10_1 + 156 | 0) >> 2] = HEAP32[($10_1 + 84 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, $10_1 + 112 | 0 | 0);
   label$5 : {
    if (!((HEAP32[($10_1 + 128 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$5
    }
    (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $494(HEAP32[($10_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 108 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 80 | 0) >> 2] = wasm2js_i32$1;
    label$6 : {
     if (!(HEAP32[($10_1 + 80 | 0) >> 2] | 0)) {
      break label$6
     }
     $28(4263 | 0, 4264 | 0, 96 | 0, HEAP32[($10_1 + 80 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($10_1 + 156 | 0) >> 2] = HEAP32[($10_1 + 80 | 0) >> 2] | 0;
     break label$3;
    }
   }
   label$7 : {
    label$8 : {
     if ((HEAP32[($10_1 + 132 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$8
     }
     if ((HEAP32[($10_1 + 140 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$8
     }
     if (!((HEAP32[($10_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$7
     }
    }
    $67_1 = 0;
    (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $44(HEAP32[($10_1 + 152 | 0) >> 2] | 0 | 0, $67_1 | 0, $67_1 | 0, $10_1 + 88 | 0 | 0, 1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 76 | 0) >> 2] = wasm2js_i32$1;
    label$9 : {
     if (!(HEAP32[($10_1 + 76 | 0) >> 2] | 0)) {
      break label$9
     }
     $28(4263 | 0, 4264 | 0, 101 | 0, HEAP32[($10_1 + 76 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($10_1 + 156 | 0) >> 2] = HEAP32[($10_1 + 76 | 0) >> 2] | 0;
     break label$3;
    }
    label$10 : {
     if (!((HEAP32[($10_1 + 132 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$10
     }
     (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $494(HEAP32[($10_1 + 132 | 0) >> 2] | 0 | 0, ((HEAP32[($10_1 + 108 | 0) >> 2] | 0) - (HEAP32[($10_1 + 88 | 0) >> 2] | 0) | 0) + 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 72 | 0) >> 2] = wasm2js_i32$1;
     label$11 : {
      if (!(HEAP32[($10_1 + 72 | 0) >> 2] | 0)) {
       break label$11
      }
      $28(4263 | 0, 4264 | 0, 105 | 0, HEAP32[($10_1 + 72 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($10_1 + 156 | 0) >> 2] = HEAP32[($10_1 + 72 | 0) >> 2] | 0;
      break label$3;
     }
    }
    label$12 : {
     if (!((HEAP32[($10_1 + 140 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$12
     }
     (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $20(HEAP32[($10_1 + 140 | 0) >> 2] | 0 | 0, (HEAP32[($10_1 + 108 | 0) >> 2] | 0) - (HEAP32[($10_1 + 88 | 0) >> 2] | 0) | 0 | 0, 2 | 0) | 0), HEAP32[(wasm2js_i32$0 + 68 | 0) >> 2] = wasm2js_i32$1;
     label$13 : {
      if (!(HEAP32[($10_1 + 68 | 0) >> 2] | 0)) {
       break label$13
      }
      $28(4263 | 0, 4264 | 0, 109 | 0, HEAP32[($10_1 + 68 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($10_1 + 156 | 0) >> 2] = HEAP32[($10_1 + 68 | 0) >> 2] | 0;
      break label$3;
     }
    }
    label$14 : {
     if (!((HEAP32[($10_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$14
     }
     (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $494(HEAP32[($10_1 + 136 | 0) >> 2] | 0 | 0, (HEAP32[($10_1 + 108 | 0) >> 2] | 0) - (HEAP32[($10_1 + 88 | 0) >> 2] | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 64 | 0) >> 2] = wasm2js_i32$1;
     label$15 : {
      if (!(HEAP32[($10_1 + 64 | 0) >> 2] | 0)) {
       break label$15
      }
      $28(4263 | 0, 4264 | 0, 113 | 0, HEAP32[($10_1 + 64 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($10_1 + 156 | 0) >> 2] = HEAP32[($10_1 + 64 | 0) >> 2] | 0;
      break label$3;
     }
    }
   }
   label$16 : {
    label$17 : {
     if (!((HEAP32[($10_1 + 124 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$17
     }
     $144_1 = 0;
     $147_1 = $10_1 + 112 | 0;
     $513($147_1 | 0, HEAP32[($10_1 + 124 | 0) >> 2] | 0 | 0) | 0;
     (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $501($147_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
     $480_1 = +HEAPF64[((HEAP32[($10_1 + 112 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$18 : {
      label$19 : {
       if (!(Math_abs($480_1) < 2147483648.0)) {
        break label$19
       }
       $158_1 = ~~$480_1;
       break label$18;
      }
      $158_1 = -2147483648;
     }
     HEAP32[($10_1 + 56 | 0) >> 2] = $158_1;
     HEAP32[($10_1 + 52 | 0) >> 2] = $144_1;
     HEAP32[($10_1 + 104 | 0) >> 2] = 0;
     label$20 : {
      label$21 : while (1) {
       if (!((HEAP32[($10_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 108 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$20
       }
       label$22 : {
        if (!(+HEAPF64[((HEAP32[($10_1 + 112 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(0 | 0) & 1 | 0)) {
         break label$22
        }
        HEAP32[($10_1 + 52 | 0) >> 2] = (HEAP32[($10_1 + 52 | 0) >> 2] | 0) + 1 | 0;
        HEAPF64[((HEAP32[($10_1 + 112 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +((HEAP32[($10_1 + 56 | 0) >> 2] | 0) + (HEAP32[($10_1 + 52 | 0) >> 2] | 0) | 0 | 0);
       }
       HEAP32[($10_1 + 104 | 0) >> 2] = (HEAP32[($10_1 + 104 | 0) >> 2] | 0) + 1 | 0;
       continue label$21;
      };
     }
     break label$16;
    }
    HEAP32[($10_1 + 104 | 0) >> 2] = 0;
    label$23 : {
     label$24 : while (1) {
      if (!((HEAP32[($10_1 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 108 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$23
      }
      HEAPF64[((HEAP32[($10_1 + 112 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($10_1 + 104 | 0) >> 2] | 0 | 0);
      HEAP32[($10_1 + 104 | 0) >> 2] = (HEAP32[($10_1 + 104 | 0) >> 2] | 0) + 1 | 0;
      continue label$24;
     };
    }
   }
   label$25 : {
    if (!((HEAP32[($10_1 + 128 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$25
    }
    $513(HEAP32[($10_1 + 128 | 0) >> 2] | 0 | 0, $10_1 + 112 | 0 | 0) | 0;
   }
   (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $229(HEAP32[($10_1 + 152 | 0) >> 2] | 0 | 0, $10_1 + 112 | 0 | 0, $10_1 + 96 | 0 | 0, HEAP32[($10_1 + 144 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 48 | 0) >> 2] = wasm2js_i32$1;
   label$26 : {
    if (!(HEAP32[($10_1 + 48 | 0) >> 2] | 0)) {
     break label$26
    }
    $28(4263 | 0, 4264 | 0, 145 | 0, HEAP32[($10_1 + 48 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($10_1 + 156 | 0) >> 2] = HEAP32[($10_1 + 48 | 0) >> 2] | 0;
    break label$3;
   }
   label$27 : {
    if (!((HEAP32[($10_1 + 132 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$27
    }
    HEAPF64[(HEAP32[(HEAP32[($10_1 + 132 | 0) >> 2] | 0) >> 2] | 0) >> 3] = +HEAPF64[($10_1 + 96 | 0) >> 3];
   }
   (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = ($490(HEAP32[($10_1 + 148 | 0) >> 2] | 0 | 0) | 0) - 1 | 0), HEAP32[(wasm2js_i32$0 + 104 | 0) >> 2] = wasm2js_i32$1;
   label$28 : {
    label$29 : while (1) {
     if (!((HEAP32[($10_1 + 104 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
      break label$28
     }
     $488_1 = +HEAPF64[((HEAP32[(HEAP32[($10_1 + 148 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($10_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$30 : {
      label$31 : {
       if (!(Math_abs($488_1) < 2147483648.0)) {
        break label$31
       }
       $264_1 = ~~$488_1;
       break label$30;
      }
      $264_1 = -2147483648;
     }
     HEAP32[($10_1 + 44 | 0) >> 2] = $264_1;
     $491_1 = +HEAPF64[((HEAP32[((HEAP32[($10_1 + 152 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$32 : {
      label$33 : {
       if (!(Math_abs($491_1) < 2147483648.0)) {
        break label$33
       }
       $276_1 = ~~$491_1;
       break label$32;
      }
      $276_1 = -2147483648;
     }
     HEAP32[($10_1 + 40 | 0) >> 2] = $276_1;
     $494_1 = +HEAPF64[((HEAP32[((HEAP32[($10_1 + 152 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$34 : {
      label$35 : {
       if (!(Math_abs($494_1) < 2147483648.0)) {
        break label$35
       }
       $288_1 = ~~$494_1;
       break label$34;
      }
      $288_1 = -2147483648;
     }
     HEAP32[($10_1 + 36 | 0) >> 2] = $288_1;
     $497_1 = +HEAPF64[((HEAP32[($10_1 + 112 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$36 : {
      label$37 : {
       if (!(Math_abs($497_1) < 2147483648.0)) {
        break label$37
       }
       $299_1 = ~~$497_1;
       break label$36;
      }
      $299_1 = -2147483648;
     }
     HEAP32[($10_1 + 32 | 0) >> 2] = $299_1;
     $500_1 = +HEAPF64[((HEAP32[($10_1 + 112 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$38 : {
      label$39 : {
       if (!(Math_abs($500_1) < 2147483648.0)) {
        break label$39
       }
       $310_1 = ~~$500_1;
       break label$38;
      }
      $310_1 = -2147483648;
     }
     HEAP32[($10_1 + 28 | 0) >> 2] = $310_1;
     label$40 : {
      if (!((HEAP32[($10_1 + 32 | 0) >> 2] | 0 | 0) != (HEAP32[($10_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$40
      }
      label$41 : {
       if (!((HEAP32[($10_1 + 140 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$41
       }
       HEAPF64[((HEAP32[(HEAP32[($10_1 + 140 | 0) >> 2] | 0) >> 2] | 0) + ((Math_imul(HEAP32[((HEAP32[($10_1 + 140 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0, 0) + (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($10_1 + 32 | 0) >> 2] | 0 | 0);
       HEAPF64[((HEAP32[(HEAP32[($10_1 + 140 | 0) >> 2] | 0) >> 2] | 0) + ((((HEAP32[((HEAP32[($10_1 + 140 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) << 0 | 0) + (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($10_1 + 28 | 0) >> 2] | 0 | 0);
      }
      label$42 : {
       if (!((HEAP32[($10_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$42
       }
       HEAPF64[((HEAP32[(HEAP32[($10_1 + 136 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($10_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +((HEAP32[($10_1 + 104 | 0) >> 2] | 0) + 1 | 0 | 0);
      }
      HEAP32[($10_1 + 12 | 0) >> 2] = 0;
      label$43 : {
       label$44 : while (1) {
        if (!((HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 108 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$43
        }
        label$45 : {
         label$46 : {
          if (+HEAPF64[((HEAP32[($10_1 + 112 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($10_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0) {
           break label$46
          }
          if (!(+HEAPF64[((HEAP32[($10_1 + 112 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($10_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$45
          }
         }
         HEAPF64[((HEAP32[($10_1 + 112 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +((HEAP32[($10_1 + 108 | 0) >> 2] | 0) + (HEAP32[($10_1 + 92 | 0) >> 2] | 0) | 0 | 0);
        }
        HEAP32[($10_1 + 12 | 0) >> 2] = (HEAP32[($10_1 + 12 | 0) >> 2] | 0) + 1 | 0;
        continue label$44;
       };
      }
      (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $229(HEAP32[($10_1 + 152 | 0) >> 2] | 0 | 0, $10_1 + 112 | 0 | 0, $10_1 + 16 | 0 | 0, HEAP32[($10_1 + 144 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
      label$47 : {
       if (!(HEAP32[($10_1 + 8 | 0) >> 2] | 0)) {
        break label$47
       }
       $28(4263 | 0, 4264 | 0, 176 | 0, HEAP32[($10_1 + 8 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($10_1 + 156 | 0) >> 2] = HEAP32[($10_1 + 8 | 0) >> 2] | 0;
       break label$3;
      }
      label$48 : {
       if (!((HEAP32[($10_1 + 132 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$48
       }
       HEAPF64[((HEAP32[(HEAP32[($10_1 + 132 | 0) >> 2] | 0) >> 2] | 0) + (((HEAP32[($10_1 + 92 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($10_1 + 16 | 0) >> 3];
       label$49 : {
        if (!(+HEAPF64[($10_1 + 16 | 0) >> 3] > +HEAPF64[($10_1 + 96 | 0) >> 3] & 1 | 0)) {
         break label$49
        }
        HEAPF64[($10_1 + 96 | 0) >> 3] = +HEAPF64[($10_1 + 16 | 0) >> 3];
        label$50 : {
         if (!((HEAP32[($10_1 + 128 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$50
         }
         $513(HEAP32[($10_1 + 128 | 0) >> 2] | 0 | 0, $10_1 + 112 | 0 | 0) | 0;
        }
       }
      }
      HEAP32[($10_1 + 92 | 0) >> 2] = (HEAP32[($10_1 + 92 | 0) >> 2] | 0) + 1 | 0;
     }
     HEAP32[($10_1 + 104 | 0) >> 2] = (HEAP32[($10_1 + 104 | 0) >> 2] | 0) + -1 | 0;
     continue label$29;
    };
   }
   label$51 : {
    if (!((HEAP32[($10_1 + 128 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$51
    }
    (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $227(HEAP32[($10_1 + 128 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
    label$52 : {
     if (!(HEAP32[($10_1 + 4 | 0) >> 2] | 0)) {
      break label$52
     }
     $28(4263 | 0, 4264 | 0, 201 | 0, HEAP32[($10_1 + 4 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($10_1 + 156 | 0) >> 2] = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
     break label$3;
    }
   }
   $488($10_1 + 112 | 0 | 0);
   $34(1 | 0);
   HEAP32[($10_1 + 156 | 0) >> 2] = 0;
  }
  $474_1 = HEAP32[($10_1 + 156 | 0) >> 2] | 0;
  label$53 : {
   $478_1 = $10_1 + 160 | 0;
   if ($478_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $478_1;
  }
  return $474_1 | 0;
 }
 
 function $229($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $284_1 = 0.0, $11_1 = 0, $20_1 = 0, $33_1 = 0, $42_1 = 0, $93_1 = 0, $116_1 = 0, $293_1 = 0.0, $137_1 = 0, $296_1 = 0.0, $149_1 = 0, $163_1 = 0, $168_1 = 0, $173_1 = 0, $311_1 = 0.0, $203_1 = 0, $314_1 = 0.0, $215_1 = 0, $229_1 = 0, $320_1 = 0.0, $234_1 = 0, $239_1 = 0, $325_1 = 0.0, $327_1 = 0.0, $266_1 = 0, $267_1 = 0, $283_1 = 0, $282_1 = 0, $279_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $6_1 = global$0 - 112 | 0;
  label$1 : {
   $282_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $282_1;
  }
  HEAP32[($6_1 + 104 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 100 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 96 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 92 | 0) >> 2] = $3_1;
  $284_1 = +$500(HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0);
  label$3 : {
   label$4 : {
    if (!(Math_abs($284_1) < 2147483648.0)) {
     break label$4
    }
    $11_1 = ~~$284_1;
    break label$3;
   }
   $11_1 = -2147483648;
  }
  HEAP32[($6_1 + 60 | 0) >> 2] = $11_1 + 1 | 0;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $249(HEAP32[($6_1 + 104 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 56 | 0) >> 2] = wasm2js_i32$1;
  label$5 : {
   label$6 : {
    if (!($253(HEAP32[($6_1 + 104 | 0) >> 2] | 0 | 0) | 0)) {
     break label$6
    }
    $20_1 = 4;
    $28(5006 | 0, 4264 | 0, 1377 | 0, $20_1 | 0) | 0;
    HEAP32[($6_1 + 108 | 0) >> 2] = $20_1;
    break label$5;
   }
   label$7 : {
    if (!(($490(HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0) | 0 | 0) < ($254(HEAP32[($6_1 + 104 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
     break label$7
    }
    $33_1 = 4;
    $28(5054 | 0, 4264 | 0, 1385 | 0, $33_1 | 0) | 0;
    HEAP32[($6_1 + 108 | 0) >> 2] = $33_1;
    break label$5;
   }
   label$8 : {
    if (!(+$502(HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0) < +(0 | 0) & 1 | 0)) {
     break label$8
    }
    $42_1 = 4;
    $28(5111 | 0, 4264 | 0, 1388 | 0, $42_1 | 0) | 0;
    HEAP32[($6_1 + 108 | 0) >> 2] = $42_1;
    break label$5;
   }
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $486($6_1 + 80 | 0 | 0, HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
   label$9 : {
    if (!(HEAP32[($6_1 + 20 | 0) >> 2] | 0)) {
     break label$9
    }
    $28(4263 | 0, 4264 | 0, 1391 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 108 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
    break label$5;
   }
   $33(1 | 0, $6_1 + 80 | 0 | 0);
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $486($6_1 + 64 | 0 | 0, HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
   label$10 : {
    if (!(HEAP32[($6_1 + 16 | 0) >> 2] | 0)) {
     break label$10
    }
    $28(4263 | 0, 4264 | 0, 1392 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 108 | 0) >> 2] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
    break label$5;
   }
   $33(1 | 0, $6_1 + 64 | 0 | 0);
   label$11 : {
    label$12 : {
     if (!((HEAP32[($6_1 + 92 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$12
     }
     label$13 : {
      if (!(($490(HEAP32[($6_1 + 92 | 0) >> 2] | 0 | 0) | 0 | 0) < (HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$13
      }
      $93_1 = 4;
      $28(5137 | 0, 4264 | 0, 1397 | 0, $93_1 | 0) | 0;
      HEAP32[($6_1 + 108 | 0) >> 2] = $93_1;
      break label$5;
     }
     (wasm2js_i32$0 = $6_1, wasm2js_f64$0 = +$505(HEAP32[($6_1 + 92 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 32 | 0) >> 3] = wasm2js_f64$0;
     HEAP32[($6_1 + 52 | 0) >> 2] = 0;
     label$14 : {
      label$15 : while (1) {
       if (!((HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$14
       }
       HEAPF64[($6_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[(HEAP32[($6_1 + 92 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       label$16 : {
        if (!(+HEAPF64[($6_1 + 8 | 0) >> 3] < +(0 | 0) & 1 | 0)) {
         break label$16
        }
        $116_1 = 4;
        $28(5190 | 0, 4264 | 0, 1402 | 0, $116_1 | 0) | 0;
        HEAP32[($6_1 + 108 | 0) >> 2] = $116_1;
        break label$5;
       }
       $258(HEAP32[($6_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0, $6_1 + 48 | 0 | 0, $6_1 + 44 | 0 | 0) | 0;
       $293_1 = +HEAPF64[((HEAP32[(HEAP32[($6_1 + 100 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       label$17 : {
        label$18 : {
         if (!(Math_abs($293_1) < 2147483648.0)) {
          break label$18
         }
         $137_1 = ~~$293_1;
         break label$17;
        }
        $137_1 = -2147483648;
       }
       HEAP32[($6_1 + 28 | 0) >> 2] = $137_1;
       $296_1 = +HEAPF64[((HEAP32[(HEAP32[($6_1 + 100 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       label$19 : {
        label$20 : {
         if (!(Math_abs($296_1) < 2147483648.0)) {
          break label$20
         }
         $149_1 = ~~$296_1;
         break label$19;
        }
        $149_1 = -2147483648;
       }
       HEAP32[($6_1 + 24 | 0) >> 2] = $149_1;
       label$21 : {
        if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$21
        }
        $163_1 = (HEAP32[($6_1 + 80 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0;
        HEAPF64[$163_1 >> 3] = +HEAPF64[$163_1 >> 3] + 2.0 * +HEAPF64[($6_1 + 8 | 0) >> 3];
       }
       $168_1 = (HEAP32[($6_1 + 64 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0;
       HEAPF64[$168_1 >> 3] = +HEAPF64[$168_1 >> 3] + +HEAPF64[($6_1 + 8 | 0) >> 3];
       $173_1 = (HEAP32[($6_1 + 64 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0;
       HEAPF64[$173_1 >> 3] = +HEAPF64[$173_1 >> 3] + +HEAPF64[($6_1 + 8 | 0) >> 3];
       HEAP32[($6_1 + 52 | 0) >> 2] = (HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 1 | 0;
       continue label$15;
      };
     }
     break label$11;
    }
    HEAPF64[($6_1 + 32 | 0) >> 3] = +(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0);
    HEAP32[($6_1 + 52 | 0) >> 2] = 0;
    label$22 : {
     label$23 : while (1) {
      if (!((HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$22
      }
      $258(HEAP32[($6_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0, $6_1 + 48 | 0 | 0, $6_1 + 44 | 0 | 0) | 0;
      $311_1 = +HEAPF64[((HEAP32[(HEAP32[($6_1 + 100 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$24 : {
       label$25 : {
        if (!(Math_abs($311_1) < 2147483648.0)) {
         break label$25
        }
        $203_1 = ~~$311_1;
        break label$24;
       }
       $203_1 = -2147483648;
      }
      HEAP32[($6_1 + 28 | 0) >> 2] = $203_1;
      $314_1 = +HEAPF64[((HEAP32[(HEAP32[($6_1 + 100 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$26 : {
       label$27 : {
        if (!(Math_abs($314_1) < 2147483648.0)) {
         break label$27
        }
        $215_1 = ~~$314_1;
        break label$26;
       }
       $215_1 = -2147483648;
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $215_1;
      label$28 : {
       if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$28
       }
       $229_1 = (HEAP32[($6_1 + 80 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0;
       HEAPF64[$229_1 >> 3] = +HEAPF64[$229_1 >> 3] + 2.0;
      }
      $320_1 = 1.0;
      $234_1 = (HEAP32[($6_1 + 64 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0;
      HEAPF64[$234_1 >> 3] = +HEAPF64[$234_1 >> 3] + $320_1;
      $239_1 = (HEAP32[($6_1 + 64 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0;
      HEAPF64[$239_1 >> 3] = +HEAPF64[$239_1 >> 3] + $320_1;
      HEAP32[($6_1 + 52 | 0) >> 2] = (HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 1 | 0;
      continue label$23;
     };
    }
   }
   $325_1 = +(0 | 0);
   HEAPF64[(HEAP32[($6_1 + 96 | 0) >> 2] | 0) >> 3] = $325_1;
   label$29 : {
    if (!(+HEAPF64[($6_1 + 32 | 0) >> 3] > $325_1 & 1 | 0)) {
     break label$29
    }
    HEAP32[($6_1 + 52 | 0) >> 2] = 0;
    label$30 : {
     label$31 : while (1) {
      if (!((HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$30
      }
      $327_1 = 2.0;
      HEAPF64[$6_1 >> 3] = +HEAPF64[((HEAP32[($6_1 + 64 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / $327_1 / +HEAPF64[($6_1 + 32 | 0) >> 3];
      $266_1 = HEAP32[($6_1 + 96 | 0) >> 2] | 0;
      HEAPF64[$266_1 >> 3] = +HEAPF64[$266_1 >> 3] + +HEAPF64[((HEAP32[($6_1 + 80 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / $327_1 / +HEAPF64[($6_1 + 32 | 0) >> 3];
      $267_1 = HEAP32[($6_1 + 96 | 0) >> 2] | 0;
      HEAPF64[$267_1 >> 3] = +HEAPF64[$267_1 >> 3] - +HEAPF64[$6_1 >> 3] * +HEAPF64[$6_1 >> 3];
      HEAP32[($6_1 + 52 | 0) >> 2] = (HEAP32[($6_1 + 52 | 0) >> 2] | 0) + 1 | 0;
      continue label$31;
     };
    }
   }
   $488($6_1 + 80 | 0 | 0);
   $488($6_1 + 64 | 0 | 0);
   $34(2 | 0);
   HEAP32[($6_1 + 108 | 0) >> 2] = 0;
  }
  $279_1 = HEAP32[($6_1 + 108 | 0) >> 2] | 0;
  label$32 : {
   $283_1 = $6_1 + 112 | 0;
   if ($283_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $283_1;
  }
  return $279_1 | 0;
 }
 
 function $230($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $11_1 = 0, $36_1 = 0, $307_1 = 0.0, $132_1 = 0, $312_1 = 0.0, $161_1 = 0, $317_1 = 0.0, $191_1 = 0, $306_1 = 0, $305_1 = 0, $119_1 = 0, $122_1 = 0, $302_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $10_1 = global$0 - 112 | 0;
  label$1 : {
   $305_1 = $10_1;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $305_1;
  }
  $11_1 = 0;
  HEAP32[($10_1 + 104 | 0) >> 2] = $0_1;
  HEAP32[($10_1 + 100 | 0) >> 2] = $1_1;
  HEAP32[($10_1 + 96 | 0) >> 2] = $2_1;
  HEAP32[($10_1 + 92 | 0) >> 2] = $3_1;
  HEAP32[($10_1 + 88 | 0) >> 2] = $4_1;
  HEAP32[($10_1 + 84 | 0) >> 2] = $5_1;
  HEAP32[($10_1 + 80 | 0) >> 2] = $6_1;
  HEAP32[($10_1 + 76 | 0) >> 2] = $7_1;
  (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $254(HEAP32[($10_1 + 104 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 72 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($10_1 + 48 | 0) >> 2] = $11_1;
  label$3 : {
   label$4 : {
    label$5 : {
     if ((HEAP32[($10_1 + 80 | 0) >> 2] | 0 | 0) != ($11_1 | 0) & 1 | 0) {
      break label$5
     }
     if (!((HEAP32[($10_1 + 84 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
    }
    (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $228(HEAP32[($10_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 92 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 76 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 108 | 0) >> 2] = wasm2js_i32$1;
    break label$3;
   }
   $36_1 = 0;
   (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $44(HEAP32[($10_1 + 104 | 0) >> 2] | 0 | 0, $36_1 | 0, $36_1 | 0, $10_1 + 44 | 0 | 0, 1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 40 | 0) >> 2] = wasm2js_i32$1;
   label$6 : {
    if (!(HEAP32[($10_1 + 40 | 0) >> 2] | 0)) {
     break label$6
    }
    $28(4263 | 0, 4264 | 0, 282 | 0, HEAP32[($10_1 + 40 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($10_1 + 108 | 0) >> 2] = HEAP32[($10_1 + 40 | 0) >> 2] | 0;
    break label$3;
   }
   (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $486($10_1 + 56 | 0 | 0, ((HEAP32[($10_1 + 72 | 0) >> 2] | 0) << 1 | 0) - 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
   label$7 : {
    if (!(HEAP32[($10_1 + 36 | 0) >> 2] | 0)) {
     break label$7
    }
    $28(4263 | 0, 4264 | 0, 284 | 0, HEAP32[($10_1 + 36 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($10_1 + 108 | 0) >> 2] = HEAP32[($10_1 + 36 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, $10_1 + 56 | 0 | 0);
   label$8 : {
    if (!((HEAP32[($10_1 + 92 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$8
    }
    (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $20(HEAP32[($10_1 + 92 | 0) >> 2] | 0 | 0, (HEAP32[($10_1 + 72 | 0) >> 2] | 0) - (HEAP32[($10_1 + 44 | 0) >> 2] | 0) | 0 | 0, 2 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
    label$9 : {
     if (!(HEAP32[($10_1 + 32 | 0) >> 2] | 0)) {
      break label$9
     }
     $28(4263 | 0, 4264 | 0, 286 | 0, HEAP32[($10_1 + 32 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($10_1 + 108 | 0) >> 2] = HEAP32[($10_1 + 32 | 0) >> 2] | 0;
     break label$3;
    }
   }
   label$10 : {
    if (!((HEAP32[($10_1 + 88 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$10
    }
    (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = $494(HEAP32[($10_1 + 88 | 0) >> 2] | 0 | 0, (HEAP32[($10_1 + 72 | 0) >> 2] | 0) - (HEAP32[($10_1 + 44 | 0) >> 2] | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
    label$11 : {
     if (!(HEAP32[($10_1 + 28 | 0) >> 2] | 0)) {
      break label$11
     }
     $28(4263 | 0, 4264 | 0, 289 | 0, HEAP32[($10_1 + 28 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($10_1 + 108 | 0) >> 2] = HEAP32[($10_1 + 28 | 0) >> 2] | 0;
     break label$3;
    }
   }
   (wasm2js_i32$0 = $10_1, wasm2js_i32$1 = ($490(HEAP32[($10_1 + 100 | 0) >> 2] | 0 | 0) | 0) - 1 | 0), HEAP32[(wasm2js_i32$0 + 52 | 0) >> 2] = wasm2js_i32$1;
   label$12 : {
    label$13 : while (1) {
     if (!((HEAP32[($10_1 + 52 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
      break label$12
     }
     $119_1 = $10_1 + 20 | 0;
     $122_1 = $10_1 + 16 | 0;
     $307_1 = +HEAPF64[((HEAP32[(HEAP32[($10_1 + 100 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($10_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$14 : {
      label$15 : {
       if (!(Math_abs($307_1) < 2147483648.0)) {
        break label$15
       }
       $132_1 = ~~$307_1;
       break label$14;
      }
      $132_1 = -2147483648;
     }
     HEAP32[($10_1 + 24 | 0) >> 2] = $132_1;
     $258(HEAP32[($10_1 + 104 | 0) >> 2] | 0 | 0, HEAP32[($10_1 + 24 | 0) >> 2] | 0 | 0, $119_1 | 0, $122_1 | 0) | 0;
     HEAP32[($10_1 + 4 | 0) >> 2] = (HEAP32[($10_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     label$16 : {
      label$17 : while (1) {
       if (!(+HEAPF64[((HEAP32[($10_1 + 56 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 4 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] != +(0 | 0) & 1 | 0)) {
        break label$16
       }
       $312_1 = +HEAPF64[((HEAP32[($10_1 + 56 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 4 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
       label$18 : {
        label$19 : {
         if (!(Math_abs($312_1) < 2147483648.0)) {
          break label$19
         }
         $161_1 = ~~$312_1;
         break label$18;
        }
        $161_1 = -2147483648;
       }
       HEAP32[($10_1 + 4 | 0) >> 2] = $161_1;
       continue label$17;
      };
     }
     HEAP32[($10_1 + 12 | 0) >> 2] = (HEAP32[($10_1 + 4 | 0) >> 2] | 0) - 1 | 0;
     HEAP32[($10_1 + 4 | 0) >> 2] = (HEAP32[($10_1 + 16 | 0) >> 2] | 0) + 1 | 0;
     label$20 : {
      label$21 : while (1) {
       if (!(+HEAPF64[((HEAP32[($10_1 + 56 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 4 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] != +(0 | 0) & 1 | 0)) {
        break label$20
       }
       $317_1 = +HEAPF64[((HEAP32[($10_1 + 56 | 0) >> 2] | 0) + (((HEAP32[($10_1 + 4 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
       label$22 : {
        label$23 : {
         if (!(Math_abs($317_1) < 2147483648.0)) {
          break label$23
         }
         $191_1 = ~~$317_1;
         break label$22;
        }
        $191_1 = -2147483648;
       }
       HEAP32[($10_1 + 4 | 0) >> 2] = $191_1;
       continue label$21;
      };
     }
     HEAP32[($10_1 + 8 | 0) >> 2] = (HEAP32[($10_1 + 4 | 0) >> 2] | 0) - 1 | 0;
     label$24 : {
      if (!((HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0) != (HEAP32[($10_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$24
      }
      label$25 : {
       if (!((HEAP32[($10_1 + 92 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$25
       }
       HEAPF64[((HEAP32[(HEAP32[($10_1 + 92 | 0) >> 2] | 0) >> 2] | 0) + ((Math_imul(HEAP32[((HEAP32[($10_1 + 92 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0, 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0);
       HEAPF64[((HEAP32[(HEAP32[($10_1 + 92 | 0) >> 2] | 0) >> 2] | 0) + ((((HEAP32[((HEAP32[($10_1 + 92 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) << 0 | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($10_1 + 8 | 0) >> 2] | 0 | 0);
      }
      label$26 : {
       if (!((HEAP32[($10_1 + 88 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$26
       }
       HEAPF64[((HEAP32[(HEAP32[($10_1 + 88 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($10_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +((HEAP32[($10_1 + 52 | 0) >> 2] | 0) + 1 | 0 | 0);
      }
      HEAPF64[((HEAP32[($10_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) + 1 | 0 | 0);
      HEAPF64[((HEAP32[($10_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) + 1 | 0 | 0);
      HEAPF64[((HEAP32[($10_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) + 1 | 0 | 0);
      HEAPF64[((HEAP32[($10_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(((HEAP32[($10_1 + 72 | 0) >> 2] | 0) + (HEAP32[($10_1 + 48 | 0) >> 2] | 0) | 0) + 1 | 0 | 0);
      HEAP32[($10_1 + 48 | 0) >> 2] = (HEAP32[($10_1 + 48 | 0) >> 2] | 0) + 1 | 0;
     }
     HEAP32[($10_1 + 52 | 0) >> 2] = (HEAP32[($10_1 + 52 | 0) >> 2] | 0) + -1 | 0;
     continue label$13;
    };
   }
   $488($10_1 + 56 | 0 | 0);
   $34(1 | 0);
   HEAP32[($10_1 + 108 | 0) >> 2] = 0;
  }
  $302_1 = HEAP32[($10_1 + 108 | 0) >> 2] | 0;
  label$27 : {
   $306_1 = $10_1 + 112 | 0;
   if ($306_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $306_1;
  }
  return $302_1 | 0;
 }
 
 function $231($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $69_1 = 0, $68_1 = 0, $65_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 48 | 0;
  label$1 : {
   $68_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $68_1;
  }
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 32 | 0) >> 2] = 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $490(HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : while (1) {
    if (!(((HEAPU8[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + (HEAP32[($4_1 + 32 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
  HEAPF64[($4_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[(HEAP32[($4_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
  HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[(HEAP32[($4_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    label$7 : {
     if (((HEAPU8[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + (HEAP32[($4_1 + 32 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0) {
      break label$7
     }
     if (!(+HEAPF64[($4_1 + 8 | 0) >> 3] > +HEAPF64[($4_1 + 16 | 0) >> 3] & 1 | 0)) {
      break label$7
     }
     HEAPF64[($4_1 + 16 | 0) >> 3] = +HEAPF64[($4_1 + 8 | 0) >> 3];
     HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
    }
    HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  $65_1 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
  label$8 : {
   $69_1 = $4_1 + 48 | 0;
   if ($69_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $69_1;
  }
  return $65_1 | 0;
 }
 
 function $232($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $11_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $708_1 = 0, $1075_1 = 0, $128_1 = 0, $1334$hi = 0, $1344$hi = 0, $12_1 = 0, $1332 = 0, $44_1 = 0, $66_1 = 0, $108_1 = 0, $141_1 = 0, $158_1 = 0, $175_1 = 0, $210_1 = 0, $358_1 = 0, $362_1 = 0, $1379 = 0.0, $469_1 = 0, $510_1 = 0, $1336$hi = 0, $1338$hi = 0, $543_1 = 0, $1341$hi = 0, $553_1 = 0, $1392 = 0.0, $607_1 = 0, $1396 = 0.0, $650_1 = 0, $1399 = 0.0, $668_1 = 0, $671_1 = 0, $1402 = 0.0, $681_1 = 0, $1346$hi = 0, $706_1 = 0, $709_1 = 0, $1410 = 0.0, $711_1 = 0, $713_1 = 0, $716_1 = 0, $719_1 = 0, $721_1 = 0, $730_1 = 0, $804_1 = 0, $1431 = 0.0, $838_1 = 0, $1434 = 0.0, $856_1 = 0, $859_1 = 0, $1437 = 0.0, $869_1 = 0, $1355$hi = 0, $982_1 = 0, $1464 = 0.0, $1005_1 = 0, $1467 = 0.0, $1038_1 = 0, $1470 = 0.0, $1056_1 = 0, $1059_1 = 0, $1473 = 0.0, $1069_1 = 0, $1073_1 = 0, $1076_1 = 0, $1477 = 0.0, $1078_1 = 0, $1080_1 = 0, $1083_1 = 0, $1086_1 = 0, $1088_1 = 0, $1097 = 0, $1493 = 0.0, $1157 = 0, $1158 = 0, $1161 = 0, $1330 = 0, $1329 = 0, $462_1 = 0, $1338 = 0, $2643$hi = 0, $1386 = 0.0, $1341 = 0, $2672$hi = 0, $1391 = 0.0, $1413 = 0.0, $1421 = 0.0, $3551 = 0, $3663 = 0, $1355 = 0, $3770$hi = 0, $998_1 = 0, $1480 = 0.0, $1488 = 0.0, $1326 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $11_1 = global$0 - 416 | 0;
  label$1 : {
   $1329 = $11_1;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $1329;
  }
  $12_1 = 0;
  HEAP32[($11_1 + 408 | 0) >> 2] = $0_1;
  HEAP32[($11_1 + 404 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 400 | 0) >> 2] = $2_1;
  HEAP32[($11_1 + 396 | 0) >> 2] = $3_1;
  HEAP32[($11_1 + 392 | 0) >> 2] = $4_1;
  HEAP32[($11_1 + 388 | 0) >> 2] = $5_1;
  HEAP32[($11_1 + 384 | 0) >> 2] = $6_1;
  HEAP32[($11_1 + 380 | 0) >> 2] = $7_1;
  HEAP32[($11_1 + 376 | 0) >> 2] = $8_1;
  (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $254(HEAP32[($11_1 + 408 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 372 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $249(HEAP32[($11_1 + 408 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 368 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($11_1 + 268 | 0) >> 2] = $12_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $11_1 + 256 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  $1332 = 0;
  i64toi32_i32$1 = $11_1 + 216 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1332;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1332;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($11_1 + 404 | 0) >> 2] | 0 | 0) == ($12_1 | 0) & 1 | 0)) {
     break label$4
    }
    (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1068(1 | 0, 12 | 0) | 0), HEAP32[(wasm2js_i32$0 + 404 | 0) >> 2] = wasm2js_i32$1;
    label$5 : {
     if (!((HEAP32[($11_1 + 404 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$5
     }
     $44_1 = 2;
     $28(4287 | 0, 4264 | 0, 451 | 0, $44_1 | 0) | 0;
     HEAP32[($11_1 + 412 | 0) >> 2] = $44_1;
     break label$3;
    }
    $33(2 | 0, HEAP32[($11_1 + 404 | 0) >> 2] | 0 | 0);
    (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $486(HEAP32[($11_1 + 404 | 0) >> 2] | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 172 | 0) >> 2] = wasm2js_i32$1;
    label$6 : {
     if (!(HEAP32[($11_1 + 172 | 0) >> 2] | 0)) {
      break label$6
     }
     $28(4263 | 0, 4264 | 0, 454 | 0, HEAP32[($11_1 + 172 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($11_1 + 412 | 0) >> 2] = HEAP32[($11_1 + 172 | 0) >> 2] | 0;
     break label$3;
    }
    $33(1 | 0, HEAP32[($11_1 + 404 | 0) >> 2] | 0 | 0);
    HEAP32[($11_1 + 268 | 0) >> 2] = 1;
   }
   $66_1 = 0;
   label$7 : {
    if (!(HEAP32[($11_1 + 380 | 0) >> 2] | 0)) {
     break label$7
    }
    $66_1 = ($253(HEAP32[($11_1 + 408 | 0) >> 2] | 0 | 0) | 0 | 0) != (0 | 0);
   }
   HEAP32[($11_1 + 380 | 0) >> 2] = $66_1 & 1 | 0;
   label$8 : {
    label$9 : {
     if (!(HEAP32[($11_1 + 380 | 0) >> 2] | 0)) {
      break label$9
     }
     (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $49(HEAP32[($11_1 + 408 | 0) >> 2] | 0 | 0, $11_1 + 336 | 0 | 0, 1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 168 | 0) >> 2] = wasm2js_i32$1;
     label$10 : {
      if (!(HEAP32[($11_1 + 168 | 0) >> 2] | 0)) {
       break label$10
      }
      $28(4263 | 0, 4264 | 0, 460 | 0, HEAP32[($11_1 + 168 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($11_1 + 412 | 0) >> 2] = HEAP32[($11_1 + 168 | 0) >> 2] | 0;
      break label$3;
     }
     $33(5 | 0, $11_1 + 336 | 0 | 0);
     (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $49(HEAP32[($11_1 + 408 | 0) >> 2] | 0 | 0, $11_1 + 328 | 0 | 0, 2 | 0) | 0), HEAP32[(wasm2js_i32$0 + 164 | 0) >> 2] = wasm2js_i32$1;
     label$11 : {
      if (!(HEAP32[($11_1 + 164 | 0) >> 2] | 0)) {
       break label$11
      }
      $28(4263 | 0, 4264 | 0, 462 | 0, HEAP32[($11_1 + 164 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($11_1 + 412 | 0) >> 2] = HEAP32[($11_1 + 164 | 0) >> 2] | 0;
      break label$3;
     }
     $108_1 = $11_1 + 328 | 0;
     $33(5 | 0, $108_1 | 0);
     HEAP32[($11_1 + 316 | 0) >> 2] = $11_1 + 336 | 0;
     HEAP32[($11_1 + 312 | 0) >> 2] = $108_1;
     break label$8;
    }
    (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $49(HEAP32[($11_1 + 408 | 0) >> 2] | 0 | 0, $11_1 + 336 | 0 | 0, 3 | 0) | 0), HEAP32[(wasm2js_i32$0 + 160 | 0) >> 2] = wasm2js_i32$1;
    label$12 : {
     if (!(HEAP32[($11_1 + 160 | 0) >> 2] | 0)) {
      break label$12
     }
     $28(4263 | 0, 4264 | 0, 467 | 0, HEAP32[($11_1 + 160 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($11_1 + 412 | 0) >> 2] = HEAP32[($11_1 + 160 | 0) >> 2] | 0;
     break label$3;
    }
    $128_1 = $11_1 + 336 | 0;
    $33(5 | 0, $128_1 | 0);
    HEAP32[($11_1 + 312 | 0) >> 2] = $128_1;
    HEAP32[($11_1 + 316 | 0) >> 2] = $128_1;
   }
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1068(HEAP32[($11_1 + 372 | 0) >> 2] | 0 | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 364 | 0) >> 2] = wasm2js_i32$1;
   label$13 : {
    if (!((HEAP32[($11_1 + 364 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$13
    }
    $141_1 = 2;
    $28(4287 | 0, 4264 | 0, 474 | 0, $141_1 | 0) | 0;
    HEAP32[($11_1 + 412 | 0) >> 2] = $141_1;
    break label$3;
   }
   $33(2 | 0, HEAP32[($11_1 + 364 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1068(HEAP32[($11_1 + 372 | 0) >> 2] | 0 | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 356 | 0) >> 2] = wasm2js_i32$1;
   label$14 : {
    if (!((HEAP32[($11_1 + 356 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$14
    }
    $158_1 = 2;
    $28(4287 | 0, 4264 | 0, 479 | 0, $158_1 | 0) | 0;
    HEAP32[($11_1 + 412 | 0) >> 2] = $158_1;
    break label$3;
   }
   $33(2 | 0, HEAP32[($11_1 + 356 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1068(HEAP32[($11_1 + 372 | 0) >> 2] | 0 | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 360 | 0) >> 2] = wasm2js_i32$1;
   label$15 : {
    if (!((HEAP32[($11_1 + 360 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$15
    }
    $175_1 = 2;
    $28(4287 | 0, 4264 | 0, 484 | 0, $175_1 | 0) | 0;
    HEAP32[($11_1 + 412 | 0) >> 2] = $175_1;
    break label$3;
   }
   $33(2 | 0, HEAP32[($11_1 + 360 | 0) >> 2] | 0 | 0);
   label$16 : {
    label$17 : {
     if (!((HEAP32[($11_1 + 376 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$17
     }
     (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $37($11_1 + 216 | 0 | 0, 100 | 0) | 0), HEAP32[(wasm2js_i32$0 + 156 | 0) >> 2] = wasm2js_i32$1;
     label$18 : {
      if (!(HEAP32[($11_1 + 156 | 0) >> 2] | 0)) {
       break label$18
      }
      $28(4263 | 0, 4264 | 0, 489 | 0, HEAP32[($11_1 + 156 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($11_1 + 412 | 0) >> 2] = HEAP32[($11_1 + 156 | 0) >> 2] | 0;
      break label$3;
     }
     $33(3 | 0, $11_1 + 216 | 0 | 0);
     break label$16;
    }
    label$19 : {
     if (!(+$502(HEAP32[($11_1 + 376 | 0) >> 2] | 0 | 0) <= +(0 | 0) & 1 | 0)) {
      break label$19
     }
     $210_1 = 4;
     $28(4331 | 0, 4264 | 0, 492 | 0, $210_1 | 0) | 0;
     HEAP32[($11_1 + 412 | 0) >> 2] = $210_1;
     break label$3;
    }
    label$20 : {
     if (!((HEAP32[($11_1 + 384 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$20
     }
     $36(4365 | 0, 4264 | 0, 497 | 0, -1 | 0) | 0;
    }
    label$21 : {
     label$22 : {
      if ((HEAP32[($11_1 + 388 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$22
      }
      if (!((HEAP32[($11_1 + 384 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$21
      }
     }
     $36(4438 | 0, 4264 | 0, 504 | 0, -1 | 0) | 0;
    }
    (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $945($11_1 + 176 | 0 | 0, HEAP32[($11_1 + 372 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 152 | 0) >> 2] = wasm2js_i32$1;
    label$23 : {
     if (!(HEAP32[($11_1 + 152 | 0) >> 2] | 0)) {
      break label$23
     }
     $28(4263 | 0, 4264 | 0, 507 | 0, HEAP32[($11_1 + 152 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($11_1 + 412 | 0) >> 2] = HEAP32[($11_1 + 152 | 0) >> 2] | 0;
     break label$3;
    }
    $33(8 | 0, $11_1 + 176 | 0 | 0);
    (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $51($11_1 + 320 | 0 | 0, HEAP32[($11_1 + 372 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 148 | 0) >> 2] = wasm2js_i32$1;
    label$24 : {
     if (!(HEAP32[($11_1 + 148 | 0) >> 2] | 0)) {
      break label$24
     }
     $28(4263 | 0, 4264 | 0, 510 | 0, HEAP32[($11_1 + 148 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($11_1 + 412 | 0) >> 2] = HEAP32[($11_1 + 148 | 0) >> 2] | 0;
     break label$3;
    }
    $33(5 | 0, $11_1 + 320 | 0 | 0);
   }
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $547($11_1 + 256 | 0 | 0, HEAP32[($11_1 + 372 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 144 | 0) >> 2] = wasm2js_i32$1;
   label$25 : {
    if (!(HEAP32[($11_1 + 144 | 0) >> 2] | 0)) {
     break label$25
    }
    $28(4263 | 0, 4264 | 0, 514 | 0, HEAP32[($11_1 + 144 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($11_1 + 412 | 0) >> 2] = HEAP32[($11_1 + 144 | 0) >> 2] | 0;
    break label$3;
   }
   $33(9 | 0, $11_1 + 256 | 0 | 0);
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $494(HEAP32[($11_1 + 404 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 368 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 140 | 0) >> 2] = wasm2js_i32$1;
   label$26 : {
    if (!(HEAP32[($11_1 + 140 | 0) >> 2] | 0)) {
     break label$26
    }
    $28(4263 | 0, 4264 | 0, 517 | 0, HEAP32[($11_1 + 140 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($11_1 + 412 | 0) >> 2] = HEAP32[($11_1 + 140 | 0) >> 2] | 0;
    break label$3;
   }
   label$27 : {
    if (!((HEAP32[($11_1 + 400 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$27
    }
    (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $494(HEAP32[($11_1 + 400 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 368 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 136 | 0) >> 2] = wasm2js_i32$1;
    label$28 : {
     if (!(HEAP32[($11_1 + 136 | 0) >> 2] | 0)) {
      break label$28
     }
     $28(4263 | 0, 4264 | 0, 519 | 0, HEAP32[($11_1 + 136 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($11_1 + 412 | 0) >> 2] = HEAP32[($11_1 + 136 | 0) >> 2] | 0;
     break label$3;
    }
    label$29 : {
     if (!((HEAP32[($11_1 + 368 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$29
     }
     HEAPF64[((HEAP32[(HEAP32[($11_1 + 400 | 0) >> 2] | 0) >> 2] | 0) + (((HEAP32[($11_1 + 368 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    }
   }
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $486($11_1 + 288 | 0 | 0, HEAP32[($11_1 + 368 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 132 | 0) >> 2] = wasm2js_i32$1;
   label$30 : {
    if (!(HEAP32[($11_1 + 132 | 0) >> 2] | 0)) {
     break label$30
    }
    $28(4263 | 0, 4264 | 0, 525 | 0, HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($11_1 + 412 | 0) >> 2] = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, $11_1 + 288 | 0 | 0);
   (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1068(HEAP32[($11_1 + 368 | 0) >> 2] | 0 | 0, 1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 236 | 0) >> 2] = wasm2js_i32$1;
   label$31 : {
    if ((HEAP32[($11_1 + 236 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$31
    }
    $358_1 = 2;
    $28(4287 | 0, 4264 | 0, 529 | 0, $358_1 | 0) | 0;
    HEAP32[($11_1 + 412 | 0) >> 2] = $358_1;
    break label$3;
   }
   $362_1 = 0;
   $33(2 | 0, HEAP32[($11_1 + 236 | 0) >> 2] | 0 | 0);
   HEAPF64[($11_1 + 248 | 0) >> 3] = +(HEAP32[($11_1 + 368 | 0) >> 2] | 0 | 0) / 2.0 * +((HEAP32[($11_1 + 368 | 0) >> 2] | 0) + 1 | 0 | 0);
   HEAPF64[($11_1 + 240 | 0) >> 3] = +($362_1 | 0);
   HEAP32[($11_1 + 344 | 0) >> 2] = $362_1;
   label$32 : {
    label$33 : while (1) {
     if (!((HEAP32[($11_1 + 344 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 368 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$32
     }
     label$34 : {
      if (!($534(4630 | 0, +(100.0 * +HEAPF64[($11_1 + 240 | 0) >> 3] / +HEAPF64[($11_1 + 248 | 0) >> 3]), 0 | 0) | 0)) {
       break label$34
      }
      $31();
      HEAP32[($11_1 + 412 | 0) >> 2] = 13;
      break label$3;
     }
     $497($11_1 + 288 | 0 | 0);
     label$35 : {
      label$36 : {
       if (!((HEAP32[($11_1 + 376 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
        break label$36
       }
       HEAP32[($11_1 + 352 | 0) >> 2] = 0;
       label$37 : {
        label$38 : while (1) {
         if (!((HEAP32[($11_1 + 352 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 372 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$37
         }
         label$39 : {
          if (!((HEAP32[(0 + 11876 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$39
          }
          label$40 : {
           if (!($265(0 | 0) | 0)) {
            break label$40
           }
           HEAP32[($11_1 + 412 | 0) >> 2] = 13;
           break label$3;
          }
         }
         $1071(HEAP32[($11_1 + 364 | 0) >> 2] | 0 | 0, 0 | 0, (HEAP32[($11_1 + 372 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
         $1071(HEAP32[($11_1 + 356 | 0) >> 2] | 0 | 0, 0 | 0, (HEAP32[($11_1 + 372 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
         $1071(HEAP32[($11_1 + 360 | 0) >> 2] | 0 | 0, 0 | 0, (HEAP32[($11_1 + 372 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
         $551($11_1 + 256 | 0 | 0);
         (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $43($11_1 + 216 | 0 | 0, +(+(HEAP32[($11_1 + 352 | 0) >> 2] | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 128 | 0) >> 2] = wasm2js_i32$1;
         label$41 : {
          if (!(HEAP32[($11_1 + 128 | 0) >> 2] | 0)) {
           break label$41
          }
          $28(4263 | 0, 4264 | 0, 562 | 0, HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($11_1 + 412 | 0) >> 2] = HEAP32[($11_1 + 128 | 0) >> 2] | 0;
          break label$3;
         }
         i64toi32_i32$0 = 0;
         i64toi32_i32$1 = (HEAP32[($11_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 352 | 0) >> 2] | 0) << 3 | 0) | 0;
         HEAP32[i64toi32_i32$1 >> 2] = 1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         HEAPF64[((HEAP32[($11_1 + 364 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 352 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
         label$42 : {
          label$43 : while (1) {
           if (!((($39($11_1 + 216 | 0 | 0) | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0)) {
            break label$42
           }
           $462_1 = 0;
           $1379 = +$41($11_1 + 216 | 0 | 0);
           label$44 : {
            label$45 : {
             if (!(Math_abs($1379) < 2147483648.0)) {
              break label$45
             }
             $469_1 = ~~$1379;
             break label$44;
            }
            $469_1 = -2147483648;
           }
           HEAP32[($11_1 + 124 | 0) >> 2] = $469_1;
           HEAP32[($11_1 + 308 | 0) >> 2] = (HEAP32[((HEAP32[($11_1 + 316 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 124 | 0) >> 2] | 0, 12) | 0;
           (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $515(HEAP32[($11_1 + 308 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 304 | 0) >> 2] = wasm2js_i32$1;
           HEAP32[($11_1 + 348 | 0) >> 2] = $462_1;
           label$46 : {
            label$47 : while (1) {
             if (!((HEAP32[($11_1 + 348 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 304 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$46
             }
             HEAP32[($11_1 + 120 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($11_1 + 308 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($11_1 + 348 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
             $258(HEAP32[($11_1 + 408 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 120 | 0) >> 2] | 0 | 0, $11_1 + 116 | 0 | 0, $11_1 + 112 | 0 | 0) | 0;
             label$48 : {
              label$49 : {
               if (!((HEAP32[($11_1 + 124 | 0) >> 2] | 0 | 0) != (HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0) & 1 | 0)) {
                break label$49
               }
               $510_1 = HEAP32[($11_1 + 116 | 0) >> 2] | 0;
               break label$48;
              }
              $510_1 = HEAP32[($11_1 + 112 | 0) >> 2] | 0;
             }
             i64toi32_i32$0 = 0;
             $1334$hi = i64toi32_i32$0;
             HEAP32[($11_1 + 108 | 0) >> 2] = $510_1;
             i64toi32_i32$2 = (HEAP32[($11_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0;
             i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
             i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
             $1336$hi = i64toi32_i32$1;
             i64toi32_i32$1 = $1334$hi;
             i64toi32_i32$1 = $1336$hi;
             i64toi32_i32$1 = $1334$hi;
             i64toi32_i32$1 = $1336$hi;
             i64toi32_i32$2 = i64toi32_i32$0;
             i64toi32_i32$0 = $1334$hi;
             i64toi32_i32$3 = 0;
             label$50 : {
              label$51 : {
               if (!(((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) & 1 | 0)) {
                break label$51
               }
               label$52 : {
                if (!(+HEAPF64[((HEAP32[($11_1 + 364 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +HEAPF64[((HEAP32[($11_1 + 364 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + 1.0 & 1 | 0)) {
                 break label$52
                }
                i64toi32_i32$3 = (HEAP32[($11_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0;
                i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                $1338 = i64toi32_i32$2;
                $1338$hi = i64toi32_i32$1;
                $543_1 = (HEAP32[($11_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0;
                i64toi32_i32$3 = $543_1;
                i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                $2643$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $1338$hi;
                i64toi32_i32$2 = $2643$hi;
                i64toi32_i32$3 = i64toi32_i32$1;
                i64toi32_i32$1 = $1338$hi;
                i64toi32_i32$0 = $1338;
                i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
                i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
                if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
                 i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
                }
                i64toi32_i32$3 = $543_1;
                HEAP32[i64toi32_i32$3 >> 2] = i64toi32_i32$4;
                HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$5;
               }
               break label$50;
              }
              $1386 = 1.0;
              i64toi32_i32$2 = (HEAP32[($11_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0;
              i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $1341 = i64toi32_i32$5;
              $1341$hi = i64toi32_i32$3;
              $553_1 = (HEAP32[($11_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0;
              i64toi32_i32$2 = $553_1;
              i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $2672$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $1341$hi;
              i64toi32_i32$5 = $2672$hi;
              i64toi32_i32$2 = i64toi32_i32$3;
              i64toi32_i32$3 = $1341$hi;
              i64toi32_i32$0 = $1341;
              i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
              i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
              if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
               i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
              }
              i64toi32_i32$2 = $553_1;
              HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$1;
              HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
              HEAPF64[((HEAP32[($11_1 + 364 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 364 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + $1386;
              (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $43($11_1 + 216 | 0 | 0, +(+(HEAP32[($11_1 + 108 | 0) >> 2] | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 104 | 0) >> 2] = wasm2js_i32$1;
              label$53 : {
               if (!(HEAP32[($11_1 + 104 | 0) >> 2] | 0)) {
                break label$53
               }
               $28(4263 | 0, 4264 | 0, 586 | 0, HEAP32[($11_1 + 104 | 0) >> 2] | 0 | 0) | 0;
               HEAP32[($11_1 + 412 | 0) >> 2] = HEAP32[($11_1 + 104 | 0) >> 2] | 0;
               break label$3;
              }
              (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $552($11_1 + 256 | 0 | 0, +(+(HEAP32[($11_1 + 108 | 0) >> 2] | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 100 | 0) >> 2] = wasm2js_i32$1;
              label$54 : {
               if (!(HEAP32[($11_1 + 100 | 0) >> 2] | 0)) {
                break label$54
               }
               $28(4263 | 0, 4264 | 0, 587 | 0, HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0) | 0;
               HEAP32[($11_1 + 412 | 0) >> 2] = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
               break label$3;
              }
             }
             HEAP32[($11_1 + 348 | 0) >> 2] = (HEAP32[($11_1 + 348 | 0) >> 2] | 0) + 1 | 0;
             continue label$47;
            };
           }
           continue label$43;
          };
         }
         label$55 : {
          label$56 : while (1) {
           if (!((($550($11_1 + 256 | 0 | 0) | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0)) {
            break label$55
           }
           $1391 = 1.0;
           $1392 = +$553($11_1 + 256 | 0 | 0);
           label$57 : {
            label$58 : {
             if (!(Math_abs($1392) < 2147483648.0)) {
              break label$58
             }
             $607_1 = ~~$1392;
             break label$57;
            }
            $607_1 = -2147483648;
           }
           HEAP32[($11_1 + 96 | 0) >> 2] = $607_1;
           label$59 : {
            if (!(+HEAPF64[((HEAP32[($11_1 + 364 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < $1391 & 1 | 0)) {
             break label$59
            }
            continue label$56;
           }
           HEAP32[($11_1 + 308 | 0) >> 2] = (HEAP32[((HEAP32[($11_1 + 312 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 96 | 0) >> 2] | 0, 12) | 0;
           (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $515(HEAP32[($11_1 + 308 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 304 | 0) >> 2] = wasm2js_i32$1;
           HEAP32[($11_1 + 348 | 0) >> 2] = 0;
           label$60 : {
            label$61 : while (1) {
             if (!((HEAP32[($11_1 + 348 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 304 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$60
             }
             HEAP32[($11_1 + 92 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($11_1 + 308 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($11_1 + 348 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
             $1396 = +HEAPF64[((HEAP32[((HEAP32[($11_1 + 408 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
             label$62 : {
              label$63 : {
               if (!(Math_abs($1396) < 2147483648.0)) {
                break label$63
               }
               $650_1 = ~~$1396;
               break label$62;
              }
              $650_1 = -2147483648;
             }
             label$64 : {
              label$65 : {
               if (!(($650_1 | 0) == (HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0) & 1 | 0)) {
                break label$65
               }
               $1399 = +HEAPF64[((HEAP32[((HEAP32[($11_1 + 408 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
               label$66 : {
                label$67 : {
                 if (!(Math_abs($1399) < 2147483648.0)) {
                  break label$67
                 }
                 $668_1 = ~~$1399;
                 break label$66;
                }
                $668_1 = -2147483648;
               }
               $671_1 = $668_1;
               break label$64;
              }
              $1402 = +HEAPF64[((HEAP32[((HEAP32[($11_1 + 408 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
              label$68 : {
               label$69 : {
                if (!(Math_abs($1402) < 2147483648.0)) {
                 break label$69
                }
                $681_1 = ~~$1402;
                break label$68;
               }
               $681_1 = -2147483648;
              }
              $671_1 = $681_1;
             }
             HEAP32[($11_1 + 88 | 0) >> 2] = $671_1;
             label$70 : {
              if (!(+HEAPF64[((HEAP32[($11_1 + 364 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +HEAPF64[((HEAP32[($11_1 + 364 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - 1.0 & 1 | 0)) {
               break label$70
              }
              i64toi32_i32$4 = 0;
              $1344$hi = i64toi32_i32$4;
              i64toi32_i32$5 = (HEAP32[($11_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0;
              i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
              $1346$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $1344$hi;
              i64toi32_i32$2 = $1346$hi;
              i64toi32_i32$2 = $1344$hi;
              i64toi32_i32$2 = $1346$hi;
              i64toi32_i32$5 = i64toi32_i32$4;
              i64toi32_i32$4 = $1344$hi;
              i64toi32_i32$0 = 0;
              if (!(((i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | 0) & 1 | 0)) {
               break label$70
              }
              $706_1 = HEAP32[($11_1 + 360 | 0) >> 2] | 0;
              $708_1 = 3;
              $709_1 = (HEAP32[($11_1 + 96 | 0) >> 2] | 0) << $708_1 | 0;
              $1410 = 1.0;
              $711_1 = HEAP32[($11_1 + 356 | 0) >> 2] | 0;
              $713_1 = (HEAP32[($11_1 + 88 | 0) >> 2] | 0) << $708_1 | 0;
              i64toi32_i32$0 = $711_1 + $713_1 | 0;
              i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
              i64toi32_i32$0 = 0;
              $1413 = (+HEAPF64[($706_1 + $709_1 | 0) >> 3] + $1410) * (+(i64toi32_i32$5 >>> 0) + 4294967296.0 * +(i64toi32_i32$2 >>> 0));
              i64toi32_i32$0 = $711_1 + $709_1 | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
              i64toi32_i32$0 = 0;
              $716_1 = $706_1 + $713_1 | 0;
              HEAPF64[$716_1 >> 3] = +HEAPF64[$716_1 >> 3] + $1413 / (+(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$5 >>> 0));
              $719_1 = (HEAP32[($11_1 + 96 | 0) >> 2] | 0) << $708_1 | 0;
              $721_1 = HEAP32[($11_1 + 356 | 0) >> 2] | 0;
              i64toi32_i32$0 = $721_1 + ((HEAP32[($11_1 + 88 | 0) >> 2] | 0) << $708_1 | 0) | 0;
              i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
              i64toi32_i32$0 = 0;
              $1421 = (+HEAPF64[((HEAP32[($11_1 + 360 | 0) >> 2] | 0) + $719_1 | 0) >> 3] + $1410) * (+(i64toi32_i32$5 >>> 0) + 4294967296.0 * +(i64toi32_i32$2 >>> 0));
              i64toi32_i32$0 = $721_1 + $719_1 | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
              i64toi32_i32$0 = 0;
              $730_1 = (HEAP32[($11_1 + 288 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0;
              HEAPF64[$730_1 >> 3] = +HEAPF64[$730_1 >> 3] + $1421 / (+(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$5 >>> 0));
             }
             HEAP32[($11_1 + 348 | 0) >> 2] = (HEAP32[($11_1 + 348 | 0) >> 2] | 0) + 1 | 0;
             continue label$61;
            };
           }
           continue label$56;
          };
         }
         HEAP32[($11_1 + 352 | 0) >> 2] = (HEAP32[($11_1 + 352 | 0) >> 2] | 0) + 1 | 0;
         continue label$38;
        };
       }
       break label$35;
      }
      HEAP32[($11_1 + 352 | 0) >> 2] = 0;
      label$71 : {
       label$72 : while (1) {
        if (!((HEAP32[($11_1 + 352 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 372 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$71
        }
        label$73 : {
         if (!((HEAP32[(0 + 11876 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$73
         }
         label$74 : {
          if (!($265(0 | 0) | 0)) {
           break label$74
          }
          HEAP32[($11_1 + 412 | 0) >> 2] = 13;
          break label$3;
         }
        }
        i64toi32_i32$5 = 0;
        $1071(HEAP32[($11_1 + 364 | 0) >> 2] | 0 | 0, 0 | 0, (HEAP32[($11_1 + 372 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
        $1071(HEAP32[($11_1 + 356 | 0) >> 2] | 0 | 0, 0 | 0, (HEAP32[($11_1 + 372 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
        $1071(HEAP32[($11_1 + 360 | 0) >> 2] | 0 | 0, 0 | 0, (HEAP32[($11_1 + 372 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
        $948($11_1 + 176 | 0 | 0, HEAP32[($11_1 + 352 | 0) >> 2] | 0 | 0, +(+(0 | 0))) | 0;
        HEAPF64[((HEAP32[($11_1 + 364 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 352 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0;
        i64toi32_i32$2 = (HEAP32[($11_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 352 | 0) >> 2] | 0) << 3 | 0) | 0;
        HEAP32[i64toi32_i32$2 >> 2] = 1;
        HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
        label$75 : {
         label$76 : while (1) {
          if (!((($947($11_1 + 176 | 0 | 0) | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0)) {
           break label$75
          }
          $804_1 = $11_1 + 176 | 0;
          (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $949($804_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 84 | 0) >> 2] = wasm2js_i32$1;
          (wasm2js_i32$0 = $11_1, wasm2js_f64$0 = -+$950($804_1 | 0)), HEAPF64[(wasm2js_i32$0 + 72 | 0) >> 3] = wasm2js_f64$0;
          $552($11_1 + 256 | 0 | 0, +(+(HEAP32[($11_1 + 84 | 0) >> 2] | 0 | 0))) | 0;
          HEAP32[($11_1 + 308 | 0) >> 2] = (HEAP32[((HEAP32[($11_1 + 316 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 84 | 0) >> 2] | 0, 12) | 0;
          (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $515(HEAP32[($11_1 + 308 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 304 | 0) >> 2] = wasm2js_i32$1;
          HEAP32[($11_1 + 348 | 0) >> 2] = 0;
          label$77 : {
           label$78 : while (1) {
            if (!((HEAP32[($11_1 + 348 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 304 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$77
            }
            HEAP32[($11_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($11_1 + 308 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($11_1 + 348 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
            $1431 = +HEAPF64[((HEAP32[((HEAP32[($11_1 + 408 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            label$79 : {
             label$80 : {
              if (!(Math_abs($1431) < 2147483648.0)) {
               break label$80
              }
              $838_1 = ~~$1431;
              break label$79;
             }
             $838_1 = -2147483648;
            }
            label$81 : {
             label$82 : {
              if (!(($838_1 | 0) == (HEAP32[($11_1 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
               break label$82
              }
              $1434 = +HEAPF64[((HEAP32[((HEAP32[($11_1 + 408 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
              label$83 : {
               label$84 : {
                if (!(Math_abs($1434) < 2147483648.0)) {
                 break label$84
                }
                $856_1 = ~~$1434;
                break label$83;
               }
               $856_1 = -2147483648;
              }
              $859_1 = $856_1;
              break label$81;
             }
             $1437 = +HEAPF64[((HEAP32[((HEAP32[($11_1 + 408 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
             label$85 : {
              label$86 : {
               if (!(Math_abs($1437) < 2147483648.0)) {
                break label$86
               }
               $869_1 = ~~$1437;
               break label$85;
              }
              $869_1 = -2147483648;
             }
             $859_1 = $869_1;
            }
            HEAP32[($11_1 + 64 | 0) >> 2] = $859_1;
            HEAPF64[($11_1 + 56 | 0) >> 3] = +HEAPF64[($11_1 + 72 | 0) >> 3] + +HEAPF64[((HEAP32[(HEAP32[($11_1 + 376 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($11_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            HEAPF64[($11_1 + 48 | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 364 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            label$87 : {
             label$88 : {
              if (!(+HEAPF64[($11_1 + 48 | 0) >> 3] == +(0 | 0) & 1 | 0)) {
               break label$88
              }
              HEAP32[($11_1 + 44 | 0) >> 2] = (HEAP32[($11_1 + 324 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 64 | 0) >> 2] | 0, 12) | 0;
              $529(HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
              HEAP32[(HEAP32[(HEAP32[($11_1 + 44 | 0) >> 2] | 0) >> 2] | 0) >> 2] = HEAP32[($11_1 + 68 | 0) >> 2] | 0;
              i64toi32_i32$0 = (HEAP32[($11_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0;
              i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
              $3551 = i64toi32_i32$5;
              i64toi32_i32$5 = (HEAP32[($11_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0;
              HEAP32[i64toi32_i32$5 >> 2] = $3551;
              HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$2;
              HEAPF64[((HEAP32[($11_1 + 364 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($11_1 + 56 | 0) >> 3] + 1.0;
              (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $948($11_1 + 176 | 0 | 0, HEAP32[($11_1 + 64 | 0) >> 2] | 0 | 0, +-+HEAPF64[($11_1 + 56 | 0) >> 3]) | 0), HEAP32[(wasm2js_i32$0 + 40 | 0) >> 2] = wasm2js_i32$1;
              label$89 : {
               if (!(HEAP32[($11_1 + 40 | 0) >> 2] | 0)) {
                break label$89
               }
               $28(4263 | 0, 4264 | 0, 658 | 0, HEAP32[($11_1 + 40 | 0) >> 2] | 0 | 0) | 0;
               HEAP32[($11_1 + 412 | 0) >> 2] = HEAP32[($11_1 + 40 | 0) >> 2] | 0;
               break label$3;
              }
              break label$87;
             }
             label$90 : {
              label$91 : {
               if (!(+HEAPF64[($11_1 + 56 | 0) >> 3] < +HEAPF64[($11_1 + 48 | 0) >> 3] - 1.0 & 1 | 0)) {
                break label$91
               }
               HEAP32[($11_1 + 44 | 0) >> 2] = (HEAP32[($11_1 + 324 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 64 | 0) >> 2] | 0, 12) | 0;
               $529(HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
               HEAP32[(HEAP32[(HEAP32[($11_1 + 44 | 0) >> 2] | 0) >> 2] | 0) >> 2] = HEAP32[($11_1 + 68 | 0) >> 2] | 0;
               i64toi32_i32$0 = (HEAP32[($11_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0;
               i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
               i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
               $3663 = i64toi32_i32$2;
               i64toi32_i32$2 = (HEAP32[($11_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0;
               HEAP32[i64toi32_i32$2 >> 2] = $3663;
               HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
               HEAPF64[((HEAP32[($11_1 + 364 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($11_1 + 56 | 0) >> 3] + 1.0;
               (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $951($11_1 + 176 | 0 | 0, HEAP32[($11_1 + 64 | 0) >> 2] | 0 | 0, +-+HEAPF64[($11_1 + 56 | 0) >> 3]) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
               label$92 : {
                if (!(HEAP32[($11_1 + 36 | 0) >> 2] | 0)) {
                 break label$92
                }
                $28(4263 | 0, 4264 | 0, 666 | 0, HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) | 0;
                HEAP32[($11_1 + 412 | 0) >> 2] = HEAP32[($11_1 + 36 | 0) >> 2] | 0;
                break label$3;
               }
               break label$90;
              }
              label$93 : {
               if (!(+HEAPF64[($11_1 + 56 | 0) >> 3] == +HEAPF64[($11_1 + 48 | 0) >> 3] - 1.0 & 1 | 0)) {
                break label$93
               }
               HEAP32[($11_1 + 44 | 0) >> 2] = (HEAP32[($11_1 + 324 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 64 | 0) >> 2] | 0, 12) | 0;
               $528(HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 68 | 0) >> 2] | 0 | 0) | 0;
               i64toi32_i32$0 = (HEAP32[($11_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0;
               i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
               i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
               $1355 = i64toi32_i32$5;
               $1355$hi = i64toi32_i32$2;
               $982_1 = (HEAP32[($11_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0;
               i64toi32_i32$0 = $982_1;
               i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
               i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
               $3770$hi = i64toi32_i32$5;
               i64toi32_i32$5 = $1355$hi;
               i64toi32_i32$5 = $3770$hi;
               i64toi32_i32$0 = i64toi32_i32$2;
               i64toi32_i32$2 = $1355$hi;
               i64toi32_i32$4 = $1355;
               i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
               i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
               if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
                i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
               }
               i64toi32_i32$0 = $982_1;
               HEAP32[i64toi32_i32$0 >> 2] = i64toi32_i32$3;
               HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
              }
             }
            }
            HEAP32[($11_1 + 348 | 0) >> 2] = (HEAP32[($11_1 + 348 | 0) >> 2] | 0) + 1 | 0;
            continue label$78;
           };
          }
          continue label$76;
         };
        }
        label$94 : {
         label$95 : while (1) {
          if (!((($550($11_1 + 256 | 0 | 0) | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0)) {
           break label$94
          }
          $998_1 = 0;
          $1464 = +$553($11_1 + 256 | 0 | 0);
          label$96 : {
           label$97 : {
            if (!(Math_abs($1464) < 2147483648.0)) {
             break label$97
            }
            $1005_1 = ~~$1464;
            break label$96;
           }
           $1005_1 = -2147483648;
          }
          HEAP32[($11_1 + 32 | 0) >> 2] = $1005_1;
          HEAP32[($11_1 + 28 | 0) >> 2] = (HEAP32[($11_1 + 324 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 32 | 0) >> 2] | 0, 12) | 0;
          (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $515(HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
          HEAP32[($11_1 + 348 | 0) >> 2] = $998_1;
          label$98 : {
           label$99 : while (1) {
            if (!((HEAP32[($11_1 + 348 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$98
            }
            HEAP32[($11_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($11_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($11_1 + 348 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
            $1467 = +HEAPF64[((HEAP32[((HEAP32[($11_1 + 408 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            label$100 : {
             label$101 : {
              if (!(Math_abs($1467) < 2147483648.0)) {
               break label$101
              }
              $1038_1 = ~~$1467;
              break label$100;
             }
             $1038_1 = -2147483648;
            }
            label$102 : {
             label$103 : {
              if (!(($1038_1 | 0) == (HEAP32[($11_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
               break label$103
              }
              $1470 = +HEAPF64[((HEAP32[((HEAP32[($11_1 + 408 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
              label$104 : {
               label$105 : {
                if (!(Math_abs($1470) < 2147483648.0)) {
                 break label$105
                }
                $1056_1 = ~~$1470;
                break label$104;
               }
               $1056_1 = -2147483648;
              }
              $1059_1 = $1056_1;
              break label$102;
             }
             $1473 = +HEAPF64[((HEAP32[((HEAP32[($11_1 + 408 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
             label$106 : {
              label$107 : {
               if (!(Math_abs($1473) < 2147483648.0)) {
                break label$107
               }
               $1069_1 = ~~$1473;
               break label$106;
              }
              $1069_1 = -2147483648;
             }
             $1059_1 = $1069_1;
            }
            HEAP32[($11_1 + 16 | 0) >> 2] = $1059_1;
            $1073_1 = HEAP32[($11_1 + 360 | 0) >> 2] | 0;
            $1075_1 = 3;
            $1076_1 = (HEAP32[($11_1 + 32 | 0) >> 2] | 0) << $1075_1 | 0;
            $1477 = 1.0;
            $1078_1 = HEAP32[($11_1 + 356 | 0) >> 2] | 0;
            $1080_1 = (HEAP32[($11_1 + 16 | 0) >> 2] | 0) << $1075_1 | 0;
            i64toi32_i32$5 = $1078_1 + $1080_1 | 0;
            i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
            i64toi32_i32$5 = 0;
            $1480 = (+HEAPF64[($1073_1 + $1076_1 | 0) >> 3] + $1477) * (+(i64toi32_i32$1 >>> 0) + 4294967296.0 * +(i64toi32_i32$0 >>> 0));
            i64toi32_i32$5 = $1078_1 + $1076_1 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
            i64toi32_i32$5 = 0;
            $1083_1 = $1073_1 + $1080_1 | 0;
            HEAPF64[$1083_1 >> 3] = +HEAPF64[$1083_1 >> 3] + $1480 / (+(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0));
            $1086_1 = (HEAP32[($11_1 + 32 | 0) >> 2] | 0) << $1075_1 | 0;
            $1088_1 = HEAP32[($11_1 + 356 | 0) >> 2] | 0;
            i64toi32_i32$5 = $1088_1 + ((HEAP32[($11_1 + 16 | 0) >> 2] | 0) << $1075_1 | 0) | 0;
            i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
            i64toi32_i32$5 = 0;
            $1488 = (+HEAPF64[((HEAP32[($11_1 + 360 | 0) >> 2] | 0) + $1086_1 | 0) >> 3] + $1477) * (+(i64toi32_i32$1 >>> 0) + 4294967296.0 * +(i64toi32_i32$0 >>> 0));
            i64toi32_i32$5 = $1088_1 + $1086_1 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
            i64toi32_i32$5 = 0;
            $1097 = (HEAP32[($11_1 + 288 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0;
            HEAPF64[$1097 >> 3] = +HEAPF64[$1097 >> 3] + $1488 / (+(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0));
            HEAP32[($11_1 + 348 | 0) >> 2] = (HEAP32[($11_1 + 348 | 0) >> 2] | 0) + 1 | 0;
            continue label$99;
           };
          }
          i64toi32_i32$1 = 0;
          $1493 = +(0 | 0);
          HEAPF64[((HEAP32[($11_1 + 360 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $1493;
          HEAPF64[((HEAP32[($11_1 + 364 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $1493;
          i64toi32_i32$0 = (HEAP32[($11_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0;
          HEAP32[i64toi32_i32$0 >> 2] = 0;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          $527(HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0);
          continue label$95;
         };
        }
        HEAP32[($11_1 + 352 | 0) >> 2] = (HEAP32[($11_1 + 352 | 0) >> 2] | 0) + 1 | 0;
        continue label$72;
       };
      }
     }
     (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $231($11_1 + 288 | 0 | 0, HEAP32[($11_1 + 236 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 284 | 0) >> 2] = wasm2js_i32$1;
     HEAPF64[((HEAP32[(HEAP32[($11_1 + 404 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($11_1 + 344 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($11_1 + 284 | 0) >> 2] | 0 | 0);
     label$108 : {
      if (!((HEAP32[($11_1 + 400 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$108
      }
      HEAPF64[((HEAP32[(HEAP32[($11_1 + 400 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($11_1 + 344 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($11_1 + 288 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 284 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$109 : {
       if (HEAP32[($11_1 + 380 | 0) >> 2] | 0) {
        break label$109
       }
       $1157 = (HEAP32[(HEAP32[($11_1 + 400 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($11_1 + 344 | 0) >> 2] | 0) << 3 | 0) | 0;
       HEAPF64[$1157 >> 3] = +HEAPF64[$1157 >> 3] / 2.0;
      }
     }
     $1158 = 0;
     $1161 = $11_1 + 280 | 0;
     HEAP8[((HEAP32[($11_1 + 236 | 0) >> 2] | 0) + (HEAP32[($11_1 + 284 | 0) >> 2] | 0) | 0) >> 0] = 1;
     $258(HEAP32[($11_1 + 408 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 284 | 0) >> 2] | 0 | 0, $11_1 + 276 | 0 | 0, $11_1 + 272 | 0 | 0) | 0;
     HEAP32[($11_1 + 308 | 0) >> 2] = (HEAP32[((HEAP32[($11_1 + 312 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 272 | 0) >> 2] | 0, 12) | 0;
     (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $515(HEAP32[($11_1 + 308 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 304 | 0) >> 2] = wasm2js_i32$1;
     $532(HEAP32[($11_1 + 308 | 0) >> 2] | 0 | 0, $1158 | 0, HEAP32[($11_1 + 284 | 0) >> 2] | 0 | 0, $1161 | 0) | 0;
     HEAP32[((HEAP32[(HEAP32[($11_1 + 308 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($11_1 + 280 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($11_1 + 308 | 0) >> 2] | 0) >> 2] | 0) + (((HEAP32[($11_1 + 304 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     $531(HEAP32[($11_1 + 308 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($11_1 + 308 | 0) >> 2] = (HEAP32[((HEAP32[($11_1 + 316 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 276 | 0) >> 2] | 0, 12) | 0;
     (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $515(HEAP32[($11_1 + 308 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 304 | 0) >> 2] = wasm2js_i32$1;
     $532(HEAP32[($11_1 + 308 | 0) >> 2] | 0 | 0, $1158 | 0, HEAP32[($11_1 + 284 | 0) >> 2] | 0 | 0, $1161 | 0) | 0;
     HEAP32[((HEAP32[(HEAP32[($11_1 + 308 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($11_1 + 280 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($11_1 + 308 | 0) >> 2] | 0) >> 2] | 0) + (((HEAP32[($11_1 + 304 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     $531(HEAP32[($11_1 + 308 | 0) >> 2] | 0 | 0) | 0;
     HEAPF64[($11_1 + 240 | 0) >> 3] = +HEAPF64[($11_1 + 240 | 0) >> 3] + +((HEAP32[($11_1 + 368 | 0) >> 2] | 0) - (HEAP32[($11_1 + 344 | 0) >> 2] | 0) | 0 | 0);
     HEAP32[($11_1 + 344 | 0) >> 2] = (HEAP32[($11_1 + 344 | 0) >> 2] | 0) + 1 | 0;
     continue label$33;
    };
   }
   label$110 : {
    if (!($534(4630 | 0, +(100.0), 0 | 0) | 0)) {
     break label$110
    }
    $31();
    HEAP32[($11_1 + 412 | 0) >> 2] = 13;
    break label$3;
   }
   $264(HEAP32[($11_1 + 236 | 0) >> 2] | 0 | 0) | 0;
   $488($11_1 + 288 | 0 | 0);
   $548($11_1 + 256 | 0 | 0);
   $34(3 | 0);
   label$111 : {
    label$112 : {
     if (!((HEAP32[($11_1 + 376 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$112
     }
     $38($11_1 + 216 | 0 | 0);
     $34(1 | 0);
     break label$111;
    }
    $946($11_1 + 176 | 0 | 0);
    $50($11_1 + 320 | 0 | 0);
    $34(2 | 0);
   }
   $264(HEAP32[($11_1 + 360 | 0) >> 2] | 0 | 0) | 0;
   $264(HEAP32[($11_1 + 356 | 0) >> 2] | 0 | 0) | 0;
   $264(HEAP32[($11_1 + 364 | 0) >> 2] | 0 | 0) | 0;
   $34(3 | 0);
   label$113 : {
    label$114 : {
     if (!(HEAP32[($11_1 + 380 | 0) >> 2] | 0)) {
      break label$114
     }
     $50($11_1 + 336 | 0 | 0);
     $50($11_1 + 328 | 0 | 0);
     $34(2 | 0);
     break label$113;
    }
    $50($11_1 + 336 | 0 | 0);
    $34(1 | 0);
   }
   label$115 : {
    label$116 : {
     if ((HEAP32[($11_1 + 396 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$116
     }
     if ((HEAP32[($11_1 + 392 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$116
     }
     if ((HEAP32[($11_1 + 388 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$116
     }
     if (!((HEAP32[($11_1 + 384 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$115
     }
    }
    (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $230(HEAP32[($11_1 + 408 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 404 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 376 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 396 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 392 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 388 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 384 | 0) >> 2] | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
    label$117 : {
     if (!(HEAP32[($11_1 + 12 | 0) >> 2] | 0)) {
      break label$117
     }
     $28(4263 | 0, 4264 | 0, 754 | 0, HEAP32[($11_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($11_1 + 412 | 0) >> 2] = HEAP32[($11_1 + 12 | 0) >> 2] | 0;
     break label$3;
    }
   }
   label$118 : {
    if (!(HEAP32[($11_1 + 268 | 0) >> 2] | 0)) {
     break label$118
    }
    $488(HEAP32[($11_1 + 404 | 0) >> 2] | 0 | 0);
    $1064(HEAP32[($11_1 + 404 | 0) >> 2] | 0 | 0);
    $34(2 | 0);
   }
   HEAP32[($11_1 + 412 | 0) >> 2] = 0;
  }
  $1326 = HEAP32[($11_1 + 412 | 0) >> 2] | 0;
  label$119 : {
   $1330 = $11_1 + 416 | 0;
   if ($1330 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $1330;
  }
  return $1326 | 0;
 }
 
 function $233($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $12_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $859_1 = 0, $1226 = 0, $129_1 = 0, $1486$hi = 0, $1496$hi = 0, $13_1 = 0, $1483 = 0, $45_1 = 0, $67_1 = 0, $109_1 = 0, $142_1 = 0, $159_1 = 0, $176_1 = 0, $211_1 = 0, $350_1 = 0, $375_1 = 0, $1519 = 0.0, $1521 = 0.0, $415_1 = 0, $1524 = 0.0, $427_1 = 0, $1527 = 0.0, $439_1 = 0, $1530 = 0.0, $451_1 = 0, $1533 = 0.0, $463_1 = 0, $1549 = 0.0, $620_1 = 0, $661_1 = 0, $1488$hi = 0, $1490$hi = 0, $694_1 = 0, $1493$hi = 0, $704_1 = 0, $1562 = 0.0, $758_1 = 0, $1566 = 0.0, $801_1 = 0, $1569 = 0.0, $819_1 = 0, $822_1 = 0, $1572 = 0.0, $832_1 = 0, $1498$hi = 0, $857_1 = 0, $860_1 = 0, $1580 = 0.0, $862_1 = 0, $864_1 = 0, $867_1 = 0, $870_1 = 0, $872_1 = 0, $881_1 = 0, $955_1 = 0, $1601 = 0.0, $989_1 = 0, $1604 = 0.0, $1007_1 = 0, $1010_1 = 0, $1607 = 0.0, $1020_1 = 0, $1507$hi = 0, $1133 = 0, $1634 = 0.0, $1156 = 0, $1637 = 0.0, $1189 = 0, $1640 = 0.0, $1207 = 0, $1210 = 0, $1643 = 0.0, $1220 = 0, $1224 = 0, $1227 = 0, $1647 = 0.0, $1229 = 0, $1231 = 0, $1234 = 0, $1237 = 0, $1239 = 0, $1248 = 0, $1663 = 0.0, $1308 = 0, $1309 = 0, $1312 = 0, $1481 = 0, $1480 = 0, $374_1 = 0, $2429 = 0, $613_1 = 0, $1490 = 0, $3150$hi = 0, $1556 = 0.0, $1493 = 0, $3179$hi = 0, $1561 = 0.0, $1583 = 0.0, $1591 = 0.0, $4058 = 0, $4170 = 0, $1507 = 0, $4277$hi = 0, $1149 = 0, $1650 = 0.0, $1658 = 0.0, $1477 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $12_1 = global$0 - 496 | 0;
  label$1 : {
   $1480 = $12_1;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $1480;
  }
  $13_1 = 0;
  HEAP32[($12_1 + 488 | 0) >> 2] = $0_1;
  HEAP32[($12_1 + 484 | 0) >> 2] = $1_1;
  HEAP32[($12_1 + 480 | 0) >> 2] = $2_1;
  HEAP32[($12_1 + 476 | 0) >> 2] = $3_1;
  HEAP32[($12_1 + 472 | 0) >> 2] = $4_1;
  HEAP32[($12_1 + 468 | 0) >> 2] = $5_1;
  HEAP32[($12_1 + 464 | 0) >> 2] = $6_1;
  HEAP32[($12_1 + 460 | 0) >> 2] = $7_1;
  HEAP32[($12_1 + 456 | 0) >> 2] = $8_1;
  HEAP32[($12_1 + 452 | 0) >> 2] = $9_1;
  (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $254(HEAP32[($12_1 + 488 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 448 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $249(HEAP32[($12_1 + 488 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 444 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($12_1 + 340 | 0) >> 2] = $13_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $12_1 + 328 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  $1483 = 0;
  i64toi32_i32$1 = $12_1 + 288 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1483;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1483;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($12_1 + 484 | 0) >> 2] | 0 | 0) == ($13_1 | 0) & 1 | 0)) {
     break label$4
    }
    (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $1068(1 | 0, 12 | 0) | 0), HEAP32[(wasm2js_i32$0 + 484 | 0) >> 2] = wasm2js_i32$1;
    label$5 : {
     if (!((HEAP32[($12_1 + 484 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$5
     }
     $45_1 = 2;
     $28(4669 | 0, 4264 | 0, 813 | 0, $45_1 | 0) | 0;
     HEAP32[($12_1 + 492 | 0) >> 2] = $45_1;
     break label$3;
    }
    $33(2 | 0, HEAP32[($12_1 + 484 | 0) >> 2] | 0 | 0);
    (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $486(HEAP32[($12_1 + 484 | 0) >> 2] | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 244 | 0) >> 2] = wasm2js_i32$1;
    label$6 : {
     if (!(HEAP32[($12_1 + 244 | 0) >> 2] | 0)) {
      break label$6
     }
     $28(4263 | 0, 4264 | 0, 816 | 0, HEAP32[($12_1 + 244 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($12_1 + 492 | 0) >> 2] = HEAP32[($12_1 + 244 | 0) >> 2] | 0;
     break label$3;
    }
    $33(1 | 0, HEAP32[($12_1 + 484 | 0) >> 2] | 0 | 0);
    HEAP32[($12_1 + 340 | 0) >> 2] = 1;
   }
   $67_1 = 0;
   label$7 : {
    if (!(HEAP32[($12_1 + 460 | 0) >> 2] | 0)) {
     break label$7
    }
    $67_1 = ($253(HEAP32[($12_1 + 488 | 0) >> 2] | 0 | 0) | 0 | 0) != (0 | 0);
   }
   HEAP32[($12_1 + 460 | 0) >> 2] = $67_1 & 1 | 0;
   label$8 : {
    label$9 : {
     if (!(HEAP32[($12_1 + 460 | 0) >> 2] | 0)) {
      break label$9
     }
     (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $49(HEAP32[($12_1 + 488 | 0) >> 2] | 0 | 0, $12_1 + 408 | 0 | 0, 1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 240 | 0) >> 2] = wasm2js_i32$1;
     label$10 : {
      if (!(HEAP32[($12_1 + 240 | 0) >> 2] | 0)) {
       break label$10
      }
      $28(4263 | 0, 4264 | 0, 822 | 0, HEAP32[($12_1 + 240 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($12_1 + 492 | 0) >> 2] = HEAP32[($12_1 + 240 | 0) >> 2] | 0;
      break label$3;
     }
     $33(5 | 0, $12_1 + 408 | 0 | 0);
     (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $49(HEAP32[($12_1 + 488 | 0) >> 2] | 0 | 0, $12_1 + 400 | 0 | 0, 2 | 0) | 0), HEAP32[(wasm2js_i32$0 + 236 | 0) >> 2] = wasm2js_i32$1;
     label$11 : {
      if (!(HEAP32[($12_1 + 236 | 0) >> 2] | 0)) {
       break label$11
      }
      $28(4263 | 0, 4264 | 0, 824 | 0, HEAP32[($12_1 + 236 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($12_1 + 492 | 0) >> 2] = HEAP32[($12_1 + 236 | 0) >> 2] | 0;
      break label$3;
     }
     $109_1 = $12_1 + 400 | 0;
     $33(5 | 0, $109_1 | 0);
     HEAP32[($12_1 + 388 | 0) >> 2] = $12_1 + 408 | 0;
     HEAP32[($12_1 + 384 | 0) >> 2] = $109_1;
     break label$8;
    }
    (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $49(HEAP32[($12_1 + 488 | 0) >> 2] | 0 | 0, $12_1 + 408 | 0 | 0, 3 | 0) | 0), HEAP32[(wasm2js_i32$0 + 232 | 0) >> 2] = wasm2js_i32$1;
    label$12 : {
     if (!(HEAP32[($12_1 + 232 | 0) >> 2] | 0)) {
      break label$12
     }
     $28(4263 | 0, 4264 | 0, 829 | 0, HEAP32[($12_1 + 232 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($12_1 + 492 | 0) >> 2] = HEAP32[($12_1 + 232 | 0) >> 2] | 0;
     break label$3;
    }
    $129_1 = $12_1 + 408 | 0;
    $33(5 | 0, $129_1 | 0);
    HEAP32[($12_1 + 384 | 0) >> 2] = $129_1;
    HEAP32[($12_1 + 388 | 0) >> 2] = $129_1;
   }
   (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $1068(HEAP32[($12_1 + 448 | 0) >> 2] | 0 | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 440 | 0) >> 2] = wasm2js_i32$1;
   label$13 : {
    if (!((HEAP32[($12_1 + 440 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$13
    }
    $142_1 = 2;
    $28(4669 | 0, 4264 | 0, 836 | 0, $142_1 | 0) | 0;
    HEAP32[($12_1 + 492 | 0) >> 2] = $142_1;
    break label$3;
   }
   $33(2 | 0, HEAP32[($12_1 + 440 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $1068(HEAP32[($12_1 + 448 | 0) >> 2] | 0 | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 432 | 0) >> 2] = wasm2js_i32$1;
   label$14 : {
    if (!((HEAP32[($12_1 + 432 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$14
    }
    $159_1 = 2;
    $28(4669 | 0, 4264 | 0, 841 | 0, $159_1 | 0) | 0;
    HEAP32[($12_1 + 492 | 0) >> 2] = $159_1;
    break label$3;
   }
   $33(2 | 0, HEAP32[($12_1 + 432 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $1068(HEAP32[($12_1 + 448 | 0) >> 2] | 0 | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 436 | 0) >> 2] = wasm2js_i32$1;
   label$15 : {
    if (!((HEAP32[($12_1 + 436 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$15
    }
    $176_1 = 2;
    $28(4669 | 0, 4264 | 0, 846 | 0, $176_1 | 0) | 0;
    HEAP32[($12_1 + 492 | 0) >> 2] = $176_1;
    break label$3;
   }
   $33(2 | 0, HEAP32[($12_1 + 436 | 0) >> 2] | 0 | 0);
   label$16 : {
    label$17 : {
     if (!((HEAP32[($12_1 + 456 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$17
     }
     (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $37($12_1 + 288 | 0 | 0, 100 | 0) | 0), HEAP32[(wasm2js_i32$0 + 228 | 0) >> 2] = wasm2js_i32$1;
     label$18 : {
      if (!(HEAP32[($12_1 + 228 | 0) >> 2] | 0)) {
       break label$18
      }
      $28(4263 | 0, 4264 | 0, 851 | 0, HEAP32[($12_1 + 228 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($12_1 + 492 | 0) >> 2] = HEAP32[($12_1 + 228 | 0) >> 2] | 0;
      break label$3;
     }
     $33(3 | 0, $12_1 + 288 | 0 | 0);
     break label$16;
    }
    label$19 : {
     if (!(+$502(HEAP32[($12_1 + 456 | 0) >> 2] | 0 | 0) <= +(0 | 0) & 1 | 0)) {
      break label$19
     }
     $211_1 = 4;
     $28(4331 | 0, 4264 | 0, 854 | 0, $211_1 | 0) | 0;
     HEAP32[($12_1 + 492 | 0) >> 2] = $211_1;
     break label$3;
    }
    label$20 : {
     if (!((HEAP32[($12_1 + 464 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$20
     }
     $36(4365 | 0, 4264 | 0, 859 | 0, -1 | 0) | 0;
    }
    label$21 : {
     label$22 : {
      if ((HEAP32[($12_1 + 468 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$22
      }
      if (!((HEAP32[($12_1 + 464 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$21
      }
     }
     $36(4719 | 0, 4264 | 0, 866 | 0, -1 | 0) | 0;
    }
    (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $945($12_1 + 248 | 0 | 0, HEAP32[($12_1 + 448 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 224 | 0) >> 2] = wasm2js_i32$1;
    label$23 : {
     if (!(HEAP32[($12_1 + 224 | 0) >> 2] | 0)) {
      break label$23
     }
     $28(4263 | 0, 4264 | 0, 869 | 0, HEAP32[($12_1 + 224 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($12_1 + 492 | 0) >> 2] = HEAP32[($12_1 + 224 | 0) >> 2] | 0;
     break label$3;
    }
    $33(8 | 0, $12_1 + 248 | 0 | 0);
    (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $51($12_1 + 392 | 0 | 0, HEAP32[($12_1 + 448 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 220 | 0) >> 2] = wasm2js_i32$1;
    label$24 : {
     if (!(HEAP32[($12_1 + 220 | 0) >> 2] | 0)) {
      break label$24
     }
     $28(4263 | 0, 4264 | 0, 872 | 0, HEAP32[($12_1 + 220 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($12_1 + 492 | 0) >> 2] = HEAP32[($12_1 + 220 | 0) >> 2] | 0;
     break label$3;
    }
    $33(5 | 0, $12_1 + 392 | 0 | 0);
   }
   (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $547($12_1 + 328 | 0 | 0, HEAP32[($12_1 + 448 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 216 | 0) >> 2] = wasm2js_i32$1;
   label$25 : {
    if (!(HEAP32[($12_1 + 216 | 0) >> 2] | 0)) {
     break label$25
    }
    $28(4263 | 0, 4264 | 0, 876 | 0, HEAP32[($12_1 + 216 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($12_1 + 492 | 0) >> 2] = HEAP32[($12_1 + 216 | 0) >> 2] | 0;
    break label$3;
   }
   $33(9 | 0, $12_1 + 328 | 0 | 0);
   label$26 : {
    if (!((HEAP32[($12_1 + 480 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$26
    }
    (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $494(HEAP32[($12_1 + 480 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 444 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 212 | 0) >> 2] = wasm2js_i32$1;
    label$27 : {
     if (!(HEAP32[($12_1 + 212 | 0) >> 2] | 0)) {
      break label$27
     }
     $28(4263 | 0, 4264 | 0, 880 | 0, HEAP32[($12_1 + 212 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($12_1 + 492 | 0) >> 2] = HEAP32[($12_1 + 212 | 0) >> 2] | 0;
     break label$3;
    }
    label$28 : {
     if (!((HEAP32[($12_1 + 444 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$28
     }
     HEAPF64[((HEAP32[(HEAP32[($12_1 + 480 | 0) >> 2] | 0) >> 2] | 0) + (((HEAP32[($12_1 + 444 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
    }
   }
   (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $486($12_1 + 360 | 0 | 0, HEAP32[($12_1 + 444 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 208 | 0) >> 2] = wasm2js_i32$1;
   label$29 : {
    if (!(HEAP32[($12_1 + 208 | 0) >> 2] | 0)) {
     break label$29
    }
    $28(4263 | 0, 4264 | 0, 886 | 0, HEAP32[($12_1 + 208 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($12_1 + 492 | 0) >> 2] = HEAP32[($12_1 + 208 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, $12_1 + 360 | 0 | 0);
   (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $1068(HEAP32[($12_1 + 444 | 0) >> 2] | 0 | 0, 1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 308 | 0) >> 2] = wasm2js_i32$1;
   label$30 : {
    if ((HEAP32[($12_1 + 308 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$30
    }
    $350_1 = 2;
    $28(4669 | 0, 4264 | 0, 890 | 0, $350_1 | 0) | 0;
    HEAP32[($12_1 + 492 | 0) >> 2] = $350_1;
    break label$3;
   }
   $33(2 | 0, HEAP32[($12_1 + 308 | 0) >> 2] | 0 | 0);
   HEAP32[($12_1 + 204 | 0) >> 2] = 0;
   (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $538($12_1 + 168 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 164 | 0) >> 2] = wasm2js_i32$1;
   label$31 : {
    if (!(HEAP32[($12_1 + 164 | 0) >> 2] | 0)) {
     break label$31
    }
    $28(4263 | 0, 4264 | 0, 912 | 0, HEAP32[($12_1 + 164 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($12_1 + 492 | 0) >> 2] = HEAP32[($12_1 + 164 | 0) >> 2] | 0;
    break label$3;
   }
   $33(10 | 0, $12_1 + 168 | 0 | 0);
   $374_1 = HEAP32[($12_1 + 488 | 0) >> 2] | 0;
   $375_1 = 8;
   HEAP32[($12_1 + $375_1 | 0) >> 2] = HEAP32[(($12_1 + 168 | 0) + $375_1 | 0) >> 2] | 0;
   i64toi32_i32$2 = $12_1;
   i64toi32_i32$0 = HEAP32[($12_1 + 168 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($12_1 + 172 | 0) >> 2] | 0;
   $2429 = i64toi32_i32$0;
   i64toi32_i32$0 = $12_1;
   HEAP32[$12_1 >> 2] = $2429;
   HEAP32[($12_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $541($374_1 | 0, $12_1 | 0, $12_1 + 184 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 160 | 0) >> 2] = wasm2js_i32$1;
   label$32 : {
    if (!(HEAP32[($12_1 + 160 | 0) >> 2] | 0)) {
     break label$32
    }
    $28(4263 | 0, 4264 | 0, 914 | 0, HEAP32[($12_1 + 160 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($12_1 + 492 | 0) >> 2] = HEAP32[($12_1 + 160 | 0) >> 2] | 0;
    break label$3;
   }
   $33(11 | 0, $12_1 + 184 | 0 | 0);
   label$33 : {
    label$34 : while (1) {
     if (!(((HEAP32[($12_1 + 188 | 0) >> 2] | 0 | 0) >= (HEAP32[($12_1 + 196 | 0) >> 2] | 0 | 0) ^ -1 | 0) & 1 | 0)) {
      break label$33
     }
     label$35 : {
      label$36 : {
       if (HEAP32[($12_1 + 184 | 0) >> 2] | 0) {
        break label$36
       }
       $1519 = +(HEAP32[($12_1 + 188 | 0) >> 2] | 0 | 0);
       break label$35;
      }
      $1519 = +HEAPF64[((HEAP32[(HEAP32[($12_1 + 200 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($12_1 + 188 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     }
     $1521 = $1519;
     label$37 : {
      label$38 : {
       if (!(Math_abs($1521) < 2147483648.0)) {
        break label$38
       }
       $415_1 = ~~$1521;
       break label$37;
      }
      $415_1 = -2147483648;
     }
     HEAP32[($12_1 + 156 | 0) >> 2] = $415_1;
     $1524 = +HEAPF64[((HEAP32[((HEAP32[($12_1 + 488 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 156 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$39 : {
      label$40 : {
       if (!(Math_abs($1524) < 2147483648.0)) {
        break label$40
       }
       $427_1 = ~~$1524;
       break label$39;
      }
      $427_1 = -2147483648;
     }
     HEAP32[($12_1 + 152 | 0) >> 2] = $427_1;
     $1527 = +HEAPF64[((HEAP32[((HEAP32[($12_1 + 488 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 156 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$41 : {
      label$42 : {
       if (!(Math_abs($1527) < 2147483648.0)) {
        break label$42
       }
       $439_1 = ~~$1527;
       break label$41;
      }
      $439_1 = -2147483648;
     }
     HEAP32[($12_1 + 148 | 0) >> 2] = $439_1;
     $1530 = +HEAPF64[((HEAP32[(HEAP32[($12_1 + 452 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($12_1 + 152 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$43 : {
      label$44 : {
       if (!(Math_abs($1530) < 2147483648.0)) {
        break label$44
       }
       $451_1 = ~~$1530;
       break label$43;
      }
      $451_1 = -2147483648;
     }
     HEAP32[($12_1 + 144 | 0) >> 2] = $451_1;
     $1533 = +HEAPF64[((HEAP32[(HEAP32[($12_1 + 452 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($12_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$45 : {
      label$46 : {
       if (!(Math_abs($1533) < 2147483648.0)) {
        break label$46
       }
       $463_1 = ~~$1533;
       break label$45;
      }
      $463_1 = -2147483648;
     }
     HEAP32[($12_1 + 140 | 0) >> 2] = $463_1;
     label$47 : {
      if (!((HEAP32[($12_1 + 144 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
       break label$47
      }
      if (!((HEAP32[($12_1 + 140 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
       break label$47
      }
      if (!((HEAP32[($12_1 + 144 | 0) >> 2] | 0 | 0) == (HEAP32[($12_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$47
      }
      HEAP32[($12_1 + 204 | 0) >> 2] = (HEAP32[($12_1 + 204 | 0) >> 2] | 0) + 1 | 0;
      HEAP8[((HEAP32[($12_1 + 308 | 0) >> 2] | 0) + (HEAP32[($12_1 + 156 | 0) >> 2] | 0) | 0) >> 0] = 1;
     }
     HEAP32[($12_1 + 188 | 0) >> 2] = (HEAP32[($12_1 + 188 | 0) >> 2] | 0) + 1 | 0;
     continue label$34;
    };
   }
   $542($12_1 + 184 | 0 | 0);
   $540($12_1 + 168 | 0 | 0);
   HEAP32[($12_1 + 136 | 0) >> 2] = (HEAP32[($12_1 + 444 | 0) >> 2] | 0) - (HEAP32[($12_1 + 204 | 0) >> 2] | 0) | 0;
   HEAPF64[($12_1 + 320 | 0) >> 3] = +(HEAP32[($12_1 + 136 | 0) >> 2] | 0 | 0) / 2.0 * +((HEAP32[($12_1 + 136 | 0) >> 2] | 0) + 1 | 0 | 0);
   HEAPF64[($12_1 + 312 | 0) >> 3] = +(0 | 0);
   (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $494(HEAP32[($12_1 + 484 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 136 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 132 | 0) >> 2] = wasm2js_i32$1;
   label$48 : {
    if (!(HEAP32[($12_1 + 132 | 0) >> 2] | 0)) {
     break label$48
    }
    $28(4263 | 0, 4264 | 0, 956 | 0, HEAP32[($12_1 + 132 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($12_1 + 492 | 0) >> 2] = HEAP32[($12_1 + 132 | 0) >> 2] | 0;
    break label$3;
   }
   HEAP32[($12_1 + 420 | 0) >> 2] = 0;
   label$49 : {
    label$50 : while (1) {
     if (!((HEAP32[($12_1 + 420 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$49
     }
     label$51 : {
      if (!($534(4917 | 0, +(100.0 * +HEAPF64[($12_1 + 312 | 0) >> 3] / +HEAPF64[($12_1 + 320 | 0) >> 3]), 0 | 0) | 0)) {
       break label$51
      }
      $31();
      HEAP32[($12_1 + 492 | 0) >> 2] = 13;
      break label$3;
     }
     $497($12_1 + 360 | 0 | 0);
     label$52 : {
      label$53 : {
       if (!((HEAP32[($12_1 + 456 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
        break label$53
       }
       HEAP32[($12_1 + 428 | 0) >> 2] = 0;
       label$54 : {
        label$55 : while (1) {
         if (!((HEAP32[($12_1 + 428 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 448 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$54
         }
         label$56 : {
          if (!((HEAP32[(0 + 11876 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$56
          }
          label$57 : {
           if (!($265(0 | 0) | 0)) {
            break label$57
           }
           HEAP32[($12_1 + 492 | 0) >> 2] = 13;
           break label$3;
          }
         }
         $1071(HEAP32[($12_1 + 440 | 0) >> 2] | 0 | 0, 0 | 0, (HEAP32[($12_1 + 448 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
         $1071(HEAP32[($12_1 + 432 | 0) >> 2] | 0 | 0, 0 | 0, (HEAP32[($12_1 + 448 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
         $1071(HEAP32[($12_1 + 436 | 0) >> 2] | 0 | 0, 0 | 0, (HEAP32[($12_1 + 448 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
         $551($12_1 + 328 | 0 | 0);
         (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $43($12_1 + 288 | 0 | 0, +(+(HEAP32[($12_1 + 428 | 0) >> 2] | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 128 | 0) >> 2] = wasm2js_i32$1;
         label$58 : {
          if (!(HEAP32[($12_1 + 128 | 0) >> 2] | 0)) {
           break label$58
          }
          $28(4263 | 0, 4264 | 0, 979 | 0, HEAP32[($12_1 + 128 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($12_1 + 492 | 0) >> 2] = HEAP32[($12_1 + 128 | 0) >> 2] | 0;
          break label$3;
         }
         i64toi32_i32$1 = 0;
         i64toi32_i32$0 = (HEAP32[($12_1 + 432 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 428 | 0) >> 2] | 0) << 3 | 0) | 0;
         HEAP32[i64toi32_i32$0 >> 2] = 1;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         HEAPF64[((HEAP32[($12_1 + 440 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 428 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
         label$59 : {
          label$60 : while (1) {
           if (!((($39($12_1 + 288 | 0 | 0) | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0)) {
            break label$59
           }
           $613_1 = 0;
           $1549 = +$41($12_1 + 288 | 0 | 0);
           label$61 : {
            label$62 : {
             if (!(Math_abs($1549) < 2147483648.0)) {
              break label$62
             }
             $620_1 = ~~$1549;
             break label$61;
            }
            $620_1 = -2147483648;
           }
           HEAP32[($12_1 + 124 | 0) >> 2] = $620_1;
           HEAP32[($12_1 + 380 | 0) >> 2] = (HEAP32[((HEAP32[($12_1 + 388 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($12_1 + 124 | 0) >> 2] | 0, 12) | 0;
           (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $515(HEAP32[($12_1 + 380 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 376 | 0) >> 2] = wasm2js_i32$1;
           HEAP32[($12_1 + 424 | 0) >> 2] = $613_1;
           label$63 : {
            label$64 : while (1) {
             if (!((HEAP32[($12_1 + 424 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 376 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$63
             }
             HEAP32[($12_1 + 120 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($12_1 + 380 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($12_1 + 424 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
             $258(HEAP32[($12_1 + 488 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 120 | 0) >> 2] | 0 | 0, $12_1 + 116 | 0 | 0, $12_1 + 112 | 0 | 0) | 0;
             label$65 : {
              label$66 : {
               if (!((HEAP32[($12_1 + 124 | 0) >> 2] | 0 | 0) != (HEAP32[($12_1 + 116 | 0) >> 2] | 0 | 0) & 1 | 0)) {
                break label$66
               }
               $661_1 = HEAP32[($12_1 + 116 | 0) >> 2] | 0;
               break label$65;
              }
              $661_1 = HEAP32[($12_1 + 112 | 0) >> 2] | 0;
             }
             i64toi32_i32$1 = 0;
             $1486$hi = i64toi32_i32$1;
             HEAP32[($12_1 + 108 | 0) >> 2] = $661_1;
             i64toi32_i32$2 = (HEAP32[($12_1 + 432 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0;
             i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
             i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
             $1488$hi = i64toi32_i32$0;
             i64toi32_i32$0 = $1486$hi;
             i64toi32_i32$0 = $1488$hi;
             i64toi32_i32$0 = $1486$hi;
             i64toi32_i32$0 = $1488$hi;
             i64toi32_i32$2 = i64toi32_i32$1;
             i64toi32_i32$1 = $1486$hi;
             i64toi32_i32$3 = 0;
             label$67 : {
              label$68 : {
               if (!(((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) & 1 | 0)) {
                break label$68
               }
               label$69 : {
                if (!(+HEAPF64[((HEAP32[($12_1 + 440 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +HEAPF64[((HEAP32[($12_1 + 440 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + 1.0 & 1 | 0)) {
                 break label$69
                }
                i64toi32_i32$3 = (HEAP32[($12_1 + 432 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0;
                i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                $1490 = i64toi32_i32$2;
                $1490$hi = i64toi32_i32$0;
                $694_1 = (HEAP32[($12_1 + 432 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0;
                i64toi32_i32$3 = $694_1;
                i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                $3150$hi = i64toi32_i32$2;
                i64toi32_i32$2 = $1490$hi;
                i64toi32_i32$2 = $3150$hi;
                i64toi32_i32$3 = i64toi32_i32$0;
                i64toi32_i32$0 = $1490$hi;
                i64toi32_i32$1 = $1490;
                i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
                i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
                if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
                 i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
                }
                i64toi32_i32$3 = $694_1;
                HEAP32[i64toi32_i32$3 >> 2] = i64toi32_i32$4;
                HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$5;
               }
               break label$67;
              }
              $1556 = 1.0;
              i64toi32_i32$2 = (HEAP32[($12_1 + 432 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0;
              i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $1493 = i64toi32_i32$5;
              $1493$hi = i64toi32_i32$3;
              $704_1 = (HEAP32[($12_1 + 432 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0;
              i64toi32_i32$2 = $704_1;
              i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $3179$hi = i64toi32_i32$5;
              i64toi32_i32$5 = $1493$hi;
              i64toi32_i32$5 = $3179$hi;
              i64toi32_i32$2 = i64toi32_i32$3;
              i64toi32_i32$3 = $1493$hi;
              i64toi32_i32$1 = $1493;
              i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
              i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
              if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
               i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
              }
              i64toi32_i32$2 = $704_1;
              HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$0;
              HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
              HEAPF64[((HEAP32[($12_1 + 440 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($12_1 + 440 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] + $1556;
              (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $43($12_1 + 288 | 0 | 0, +(+(HEAP32[($12_1 + 108 | 0) >> 2] | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 104 | 0) >> 2] = wasm2js_i32$1;
              label$70 : {
               if (!(HEAP32[($12_1 + 104 | 0) >> 2] | 0)) {
                break label$70
               }
               $28(4263 | 0, 4264 | 0, 1003 | 0, HEAP32[($12_1 + 104 | 0) >> 2] | 0 | 0) | 0;
               HEAP32[($12_1 + 492 | 0) >> 2] = HEAP32[($12_1 + 104 | 0) >> 2] | 0;
               break label$3;
              }
              (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $552($12_1 + 328 | 0 | 0, +(+(HEAP32[($12_1 + 108 | 0) >> 2] | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 100 | 0) >> 2] = wasm2js_i32$1;
              label$71 : {
               if (!(HEAP32[($12_1 + 100 | 0) >> 2] | 0)) {
                break label$71
               }
               $28(4263 | 0, 4264 | 0, 1004 | 0, HEAP32[($12_1 + 100 | 0) >> 2] | 0 | 0) | 0;
               HEAP32[($12_1 + 492 | 0) >> 2] = HEAP32[($12_1 + 100 | 0) >> 2] | 0;
               break label$3;
              }
             }
             HEAP32[($12_1 + 424 | 0) >> 2] = (HEAP32[($12_1 + 424 | 0) >> 2] | 0) + 1 | 0;
             continue label$64;
            };
           }
           continue label$60;
          };
         }
         label$72 : {
          label$73 : while (1) {
           if (!((($550($12_1 + 328 | 0 | 0) | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0)) {
            break label$72
           }
           $1561 = 1.0;
           $1562 = +$553($12_1 + 328 | 0 | 0);
           label$74 : {
            label$75 : {
             if (!(Math_abs($1562) < 2147483648.0)) {
              break label$75
             }
             $758_1 = ~~$1562;
             break label$74;
            }
            $758_1 = -2147483648;
           }
           HEAP32[($12_1 + 96 | 0) >> 2] = $758_1;
           label$76 : {
            if (!(+HEAPF64[((HEAP32[($12_1 + 440 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < $1561 & 1 | 0)) {
             break label$76
            }
            continue label$73;
           }
           HEAP32[($12_1 + 380 | 0) >> 2] = (HEAP32[((HEAP32[($12_1 + 384 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($12_1 + 96 | 0) >> 2] | 0, 12) | 0;
           (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $515(HEAP32[($12_1 + 380 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 376 | 0) >> 2] = wasm2js_i32$1;
           HEAP32[($12_1 + 424 | 0) >> 2] = 0;
           label$77 : {
            label$78 : while (1) {
             if (!((HEAP32[($12_1 + 424 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 376 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$77
             }
             HEAP32[($12_1 + 92 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($12_1 + 380 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($12_1 + 424 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
             $1566 = +HEAPF64[((HEAP32[((HEAP32[($12_1 + 488 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
             label$79 : {
              label$80 : {
               if (!(Math_abs($1566) < 2147483648.0)) {
                break label$80
               }
               $801_1 = ~~$1566;
               break label$79;
              }
              $801_1 = -2147483648;
             }
             label$81 : {
              label$82 : {
               if (!(($801_1 | 0) == (HEAP32[($12_1 + 96 | 0) >> 2] | 0 | 0) & 1 | 0)) {
                break label$82
               }
               $1569 = +HEAPF64[((HEAP32[((HEAP32[($12_1 + 488 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
               label$83 : {
                label$84 : {
                 if (!(Math_abs($1569) < 2147483648.0)) {
                  break label$84
                 }
                 $819_1 = ~~$1569;
                 break label$83;
                }
                $819_1 = -2147483648;
               }
               $822_1 = $819_1;
               break label$81;
              }
              $1572 = +HEAPF64[((HEAP32[((HEAP32[($12_1 + 488 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
              label$85 : {
               label$86 : {
                if (!(Math_abs($1572) < 2147483648.0)) {
                 break label$86
                }
                $832_1 = ~~$1572;
                break label$85;
               }
               $832_1 = -2147483648;
              }
              $822_1 = $832_1;
             }
             HEAP32[($12_1 + 88 | 0) >> 2] = $822_1;
             label$87 : {
              if (!(+HEAPF64[((HEAP32[($12_1 + 440 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +HEAPF64[((HEAP32[($12_1 + 440 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 96 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - 1.0 & 1 | 0)) {
               break label$87
              }
              i64toi32_i32$4 = 0;
              $1496$hi = i64toi32_i32$4;
              i64toi32_i32$5 = (HEAP32[($12_1 + 432 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0;
              i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
              $1498$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $1496$hi;
              i64toi32_i32$2 = $1498$hi;
              i64toi32_i32$2 = $1496$hi;
              i64toi32_i32$2 = $1498$hi;
              i64toi32_i32$5 = i64toi32_i32$4;
              i64toi32_i32$4 = $1496$hi;
              i64toi32_i32$1 = 0;
              if (!(((i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | 0) & 1 | 0)) {
               break label$87
              }
              $857_1 = HEAP32[($12_1 + 436 | 0) >> 2] | 0;
              $859_1 = 3;
              $860_1 = (HEAP32[($12_1 + 96 | 0) >> 2] | 0) << $859_1 | 0;
              $1580 = 1.0;
              $862_1 = HEAP32[($12_1 + 432 | 0) >> 2] | 0;
              $864_1 = (HEAP32[($12_1 + 88 | 0) >> 2] | 0) << $859_1 | 0;
              i64toi32_i32$1 = $862_1 + $864_1 | 0;
              i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              i64toi32_i32$1 = 0;
              $1583 = (+HEAPF64[($857_1 + $860_1 | 0) >> 3] + $1580) * (+(i64toi32_i32$5 >>> 0) + 4294967296.0 * +(i64toi32_i32$2 >>> 0));
              i64toi32_i32$1 = $862_1 + $860_1 | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              i64toi32_i32$1 = 0;
              $867_1 = $857_1 + $864_1 | 0;
              HEAPF64[$867_1 >> 3] = +HEAPF64[$867_1 >> 3] + $1583 / (+(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$5 >>> 0));
              $870_1 = (HEAP32[($12_1 + 96 | 0) >> 2] | 0) << $859_1 | 0;
              $872_1 = HEAP32[($12_1 + 432 | 0) >> 2] | 0;
              i64toi32_i32$1 = $872_1 + ((HEAP32[($12_1 + 88 | 0) >> 2] | 0) << $859_1 | 0) | 0;
              i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              i64toi32_i32$1 = 0;
              $1591 = (+HEAPF64[((HEAP32[($12_1 + 436 | 0) >> 2] | 0) + $870_1 | 0) >> 3] + $1580) * (+(i64toi32_i32$5 >>> 0) + 4294967296.0 * +(i64toi32_i32$2 >>> 0));
              i64toi32_i32$1 = $872_1 + $870_1 | 0;
              i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              i64toi32_i32$1 = 0;
              $881_1 = (HEAP32[($12_1 + 360 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 92 | 0) >> 2] | 0) << 3 | 0) | 0;
              HEAPF64[$881_1 >> 3] = +HEAPF64[$881_1 >> 3] + $1591 / (+(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$5 >>> 0));
             }
             HEAP32[($12_1 + 424 | 0) >> 2] = (HEAP32[($12_1 + 424 | 0) >> 2] | 0) + 1 | 0;
             continue label$78;
            };
           }
           continue label$73;
          };
         }
         HEAP32[($12_1 + 428 | 0) >> 2] = (HEAP32[($12_1 + 428 | 0) >> 2] | 0) + 1 | 0;
         continue label$55;
        };
       }
       break label$52;
      }
      HEAP32[($12_1 + 428 | 0) >> 2] = 0;
      label$88 : {
       label$89 : while (1) {
        if (!((HEAP32[($12_1 + 428 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 448 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$88
        }
        label$90 : {
         if (!((HEAP32[(0 + 11876 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$90
         }
         label$91 : {
          if (!($265(0 | 0) | 0)) {
           break label$91
          }
          HEAP32[($12_1 + 492 | 0) >> 2] = 13;
          break label$3;
         }
        }
        i64toi32_i32$5 = 0;
        $1071(HEAP32[($12_1 + 440 | 0) >> 2] | 0 | 0, 0 | 0, (HEAP32[($12_1 + 448 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
        $1071(HEAP32[($12_1 + 432 | 0) >> 2] | 0 | 0, 0 | 0, (HEAP32[($12_1 + 448 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
        $1071(HEAP32[($12_1 + 436 | 0) >> 2] | 0 | 0, 0 | 0, (HEAP32[($12_1 + 448 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
        $948($12_1 + 248 | 0 | 0, HEAP32[($12_1 + 428 | 0) >> 2] | 0 | 0, +(+(0 | 0))) | 0;
        HEAPF64[((HEAP32[($12_1 + 440 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 428 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = 1.0;
        i64toi32_i32$2 = (HEAP32[($12_1 + 432 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 428 | 0) >> 2] | 0) << 3 | 0) | 0;
        HEAP32[i64toi32_i32$2 >> 2] = 1;
        HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
        label$92 : {
         label$93 : while (1) {
          if (!((($947($12_1 + 248 | 0 | 0) | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0)) {
           break label$92
          }
          $955_1 = $12_1 + 248 | 0;
          (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $949($955_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 84 | 0) >> 2] = wasm2js_i32$1;
          (wasm2js_i32$0 = $12_1, wasm2js_f64$0 = -+$950($955_1 | 0)), HEAPF64[(wasm2js_i32$0 + 72 | 0) >> 3] = wasm2js_f64$0;
          $552($12_1 + 328 | 0 | 0, +(+(HEAP32[($12_1 + 84 | 0) >> 2] | 0 | 0))) | 0;
          HEAP32[($12_1 + 380 | 0) >> 2] = (HEAP32[((HEAP32[($12_1 + 388 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($12_1 + 84 | 0) >> 2] | 0, 12) | 0;
          (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $515(HEAP32[($12_1 + 380 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 376 | 0) >> 2] = wasm2js_i32$1;
          HEAP32[($12_1 + 424 | 0) >> 2] = 0;
          label$94 : {
           label$95 : while (1) {
            if (!((HEAP32[($12_1 + 424 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 376 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$94
            }
            HEAP32[($12_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($12_1 + 380 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($12_1 + 424 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
            $1601 = +HEAPF64[((HEAP32[((HEAP32[($12_1 + 488 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            label$96 : {
             label$97 : {
              if (!(Math_abs($1601) < 2147483648.0)) {
               break label$97
              }
              $989_1 = ~~$1601;
              break label$96;
             }
             $989_1 = -2147483648;
            }
            label$98 : {
             label$99 : {
              if (!(($989_1 | 0) == (HEAP32[($12_1 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
               break label$99
              }
              $1604 = +HEAPF64[((HEAP32[((HEAP32[($12_1 + 488 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
              label$100 : {
               label$101 : {
                if (!(Math_abs($1604) < 2147483648.0)) {
                 break label$101
                }
                $1007_1 = ~~$1604;
                break label$100;
               }
               $1007_1 = -2147483648;
              }
              $1010_1 = $1007_1;
              break label$98;
             }
             $1607 = +HEAPF64[((HEAP32[((HEAP32[($12_1 + 488 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
             label$102 : {
              label$103 : {
               if (!(Math_abs($1607) < 2147483648.0)) {
                break label$103
               }
               $1020_1 = ~~$1607;
               break label$102;
              }
              $1020_1 = -2147483648;
             }
             $1010_1 = $1020_1;
            }
            HEAP32[($12_1 + 64 | 0) >> 2] = $1010_1;
            HEAPF64[($12_1 + 56 | 0) >> 3] = +HEAPF64[($12_1 + 72 | 0) >> 3] + +HEAPF64[((HEAP32[(HEAP32[($12_1 + 456 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($12_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            HEAPF64[($12_1 + 48 | 0) >> 3] = +HEAPF64[((HEAP32[($12_1 + 440 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            label$104 : {
             label$105 : {
              if (!(+HEAPF64[($12_1 + 48 | 0) >> 3] == +(0 | 0) & 1 | 0)) {
               break label$105
              }
              HEAP32[($12_1 + 44 | 0) >> 2] = (HEAP32[($12_1 + 396 | 0) >> 2] | 0) + Math_imul(HEAP32[($12_1 + 64 | 0) >> 2] | 0, 12) | 0;
              $529(HEAP32[($12_1 + 44 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
              HEAP32[(HEAP32[(HEAP32[($12_1 + 44 | 0) >> 2] | 0) >> 2] | 0) >> 2] = HEAP32[($12_1 + 68 | 0) >> 2] | 0;
              i64toi32_i32$1 = (HEAP32[($12_1 + 432 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0;
              i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
              i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
              $4058 = i64toi32_i32$5;
              i64toi32_i32$5 = (HEAP32[($12_1 + 432 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0;
              HEAP32[i64toi32_i32$5 >> 2] = $4058;
              HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$2;
              HEAPF64[((HEAP32[($12_1 + 440 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($12_1 + 56 | 0) >> 3] + 1.0;
              (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $948($12_1 + 248 | 0 | 0, HEAP32[($12_1 + 64 | 0) >> 2] | 0 | 0, +-+HEAPF64[($12_1 + 56 | 0) >> 3]) | 0), HEAP32[(wasm2js_i32$0 + 40 | 0) >> 2] = wasm2js_i32$1;
              label$106 : {
               if (!(HEAP32[($12_1 + 40 | 0) >> 2] | 0)) {
                break label$106
               }
               $28(4263 | 0, 4264 | 0, 1075 | 0, HEAP32[($12_1 + 40 | 0) >> 2] | 0 | 0) | 0;
               HEAP32[($12_1 + 492 | 0) >> 2] = HEAP32[($12_1 + 40 | 0) >> 2] | 0;
               break label$3;
              }
              break label$104;
             }
             label$107 : {
              label$108 : {
               if (!(+HEAPF64[($12_1 + 56 | 0) >> 3] < +HEAPF64[($12_1 + 48 | 0) >> 3] - 1.0 & 1 | 0)) {
                break label$108
               }
               HEAP32[($12_1 + 44 | 0) >> 2] = (HEAP32[($12_1 + 396 | 0) >> 2] | 0) + Math_imul(HEAP32[($12_1 + 64 | 0) >> 2] | 0, 12) | 0;
               $529(HEAP32[($12_1 + 44 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
               HEAP32[(HEAP32[(HEAP32[($12_1 + 44 | 0) >> 2] | 0) >> 2] | 0) >> 2] = HEAP32[($12_1 + 68 | 0) >> 2] | 0;
               i64toi32_i32$1 = (HEAP32[($12_1 + 432 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0;
               i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
               i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
               $4170 = i64toi32_i32$2;
               i64toi32_i32$2 = (HEAP32[($12_1 + 432 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0;
               HEAP32[i64toi32_i32$2 >> 2] = $4170;
               HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
               HEAPF64[((HEAP32[($12_1 + 440 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($12_1 + 56 | 0) >> 3] + 1.0;
               (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $951($12_1 + 248 | 0 | 0, HEAP32[($12_1 + 64 | 0) >> 2] | 0 | 0, +-+HEAPF64[($12_1 + 56 | 0) >> 3]) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
               label$109 : {
                if (!(HEAP32[($12_1 + 36 | 0) >> 2] | 0)) {
                 break label$109
                }
                $28(4263 | 0, 4264 | 0, 1083 | 0, HEAP32[($12_1 + 36 | 0) >> 2] | 0 | 0) | 0;
                HEAP32[($12_1 + 492 | 0) >> 2] = HEAP32[($12_1 + 36 | 0) >> 2] | 0;
                break label$3;
               }
               break label$107;
              }
              label$110 : {
               if (!(+HEAPF64[($12_1 + 56 | 0) >> 3] == +HEAPF64[($12_1 + 48 | 0) >> 3] - 1.0 & 1 | 0)) {
                break label$110
               }
               HEAP32[($12_1 + 44 | 0) >> 2] = (HEAP32[($12_1 + 396 | 0) >> 2] | 0) + Math_imul(HEAP32[($12_1 + 64 | 0) >> 2] | 0, 12) | 0;
               $528(HEAP32[($12_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 68 | 0) >> 2] | 0 | 0) | 0;
               i64toi32_i32$1 = (HEAP32[($12_1 + 432 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0;
               i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
               i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
               $1507 = i64toi32_i32$5;
               $1507$hi = i64toi32_i32$2;
               $1133 = (HEAP32[($12_1 + 432 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0;
               i64toi32_i32$1 = $1133;
               i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
               i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
               $4277$hi = i64toi32_i32$5;
               i64toi32_i32$5 = $1507$hi;
               i64toi32_i32$5 = $4277$hi;
               i64toi32_i32$1 = i64toi32_i32$2;
               i64toi32_i32$2 = $1507$hi;
               i64toi32_i32$4 = $1507;
               i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
               i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
               if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
                i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
               }
               i64toi32_i32$1 = $1133;
               HEAP32[i64toi32_i32$1 >> 2] = i64toi32_i32$3;
               HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
              }
             }
            }
            HEAP32[($12_1 + 424 | 0) >> 2] = (HEAP32[($12_1 + 424 | 0) >> 2] | 0) + 1 | 0;
            continue label$95;
           };
          }
          continue label$93;
         };
        }
        label$111 : {
         label$112 : while (1) {
          if (!((($550($12_1 + 328 | 0 | 0) | 0 | 0) != (0 | 0) ^ -1 | 0) & 1 | 0)) {
           break label$111
          }
          $1149 = 0;
          $1634 = +$553($12_1 + 328 | 0 | 0);
          label$113 : {
           label$114 : {
            if (!(Math_abs($1634) < 2147483648.0)) {
             break label$114
            }
            $1156 = ~~$1634;
            break label$113;
           }
           $1156 = -2147483648;
          }
          HEAP32[($12_1 + 32 | 0) >> 2] = $1156;
          HEAP32[($12_1 + 28 | 0) >> 2] = (HEAP32[($12_1 + 396 | 0) >> 2] | 0) + Math_imul(HEAP32[($12_1 + 32 | 0) >> 2] | 0, 12) | 0;
          (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $515(HEAP32[($12_1 + 28 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
          HEAP32[($12_1 + 424 | 0) >> 2] = $1149;
          label$115 : {
           label$116 : while (1) {
            if (!((HEAP32[($12_1 + 424 | 0) >> 2] | 0 | 0) < (HEAP32[($12_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$115
            }
            HEAP32[($12_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($12_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($12_1 + 424 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
            $1637 = +HEAPF64[((HEAP32[((HEAP32[($12_1 + 488 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            label$117 : {
             label$118 : {
              if (!(Math_abs($1637) < 2147483648.0)) {
               break label$118
              }
              $1189 = ~~$1637;
              break label$117;
             }
             $1189 = -2147483648;
            }
            label$119 : {
             label$120 : {
              if (!(($1189 | 0) == (HEAP32[($12_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
               break label$120
              }
              $1640 = +HEAPF64[((HEAP32[((HEAP32[($12_1 + 488 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
              label$121 : {
               label$122 : {
                if (!(Math_abs($1640) < 2147483648.0)) {
                 break label$122
                }
                $1207 = ~~$1640;
                break label$121;
               }
               $1207 = -2147483648;
              }
              $1210 = $1207;
              break label$119;
             }
             $1643 = +HEAPF64[((HEAP32[((HEAP32[($12_1 + 488 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
             label$123 : {
              label$124 : {
               if (!(Math_abs($1643) < 2147483648.0)) {
                break label$124
               }
               $1220 = ~~$1643;
               break label$123;
              }
              $1220 = -2147483648;
             }
             $1210 = $1220;
            }
            HEAP32[($12_1 + 16 | 0) >> 2] = $1210;
            $1224 = HEAP32[($12_1 + 436 | 0) >> 2] | 0;
            $1226 = 3;
            $1227 = (HEAP32[($12_1 + 32 | 0) >> 2] | 0) << $1226 | 0;
            $1647 = 1.0;
            $1229 = HEAP32[($12_1 + 432 | 0) >> 2] | 0;
            $1231 = (HEAP32[($12_1 + 16 | 0) >> 2] | 0) << $1226 | 0;
            i64toi32_i32$5 = $1229 + $1231 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
            i64toi32_i32$5 = 0;
            $1650 = (+HEAPF64[($1224 + $1227 | 0) >> 3] + $1647) * (+(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0));
            i64toi32_i32$5 = $1229 + $1227 | 0;
            i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
            i64toi32_i32$5 = 0;
            $1234 = $1224 + $1231 | 0;
            HEAPF64[$1234 >> 3] = +HEAPF64[$1234 >> 3] + $1650 / (+(i64toi32_i32$1 >>> 0) + 4294967296.0 * +(i64toi32_i32$0 >>> 0));
            $1237 = (HEAP32[($12_1 + 32 | 0) >> 2] | 0) << $1226 | 0;
            $1239 = HEAP32[($12_1 + 432 | 0) >> 2] | 0;
            i64toi32_i32$5 = $1239 + ((HEAP32[($12_1 + 16 | 0) >> 2] | 0) << $1226 | 0) | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
            i64toi32_i32$5 = 0;
            $1658 = (+HEAPF64[((HEAP32[($12_1 + 436 | 0) >> 2] | 0) + $1237 | 0) >> 3] + $1647) * (+(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0));
            i64toi32_i32$5 = $1239 + $1237 | 0;
            i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
            i64toi32_i32$5 = 0;
            $1248 = (HEAP32[($12_1 + 360 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0;
            HEAPF64[$1248 >> 3] = +HEAPF64[$1248 >> 3] + $1658 / (+(i64toi32_i32$1 >>> 0) + 4294967296.0 * +(i64toi32_i32$0 >>> 0));
            HEAP32[($12_1 + 424 | 0) >> 2] = (HEAP32[($12_1 + 424 | 0) >> 2] | 0) + 1 | 0;
            continue label$116;
           };
          }
          i64toi32_i32$0 = 0;
          $1663 = +(0 | 0);
          HEAPF64[((HEAP32[($12_1 + 436 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $1663;
          HEAPF64[((HEAP32[($12_1 + 440 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $1663;
          i64toi32_i32$1 = (HEAP32[($12_1 + 432 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0;
          HEAP32[i64toi32_i32$1 >> 2] = 0;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
          $527(HEAP32[($12_1 + 28 | 0) >> 2] | 0 | 0);
          continue label$112;
         };
        }
        HEAP32[($12_1 + 428 | 0) >> 2] = (HEAP32[($12_1 + 428 | 0) >> 2] | 0) + 1 | 0;
        continue label$89;
       };
      }
     }
     (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $231($12_1 + 360 | 0 | 0, HEAP32[($12_1 + 308 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 356 | 0) >> 2] = wasm2js_i32$1;
     HEAPF64[((HEAP32[(HEAP32[($12_1 + 484 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($12_1 + 420 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($12_1 + 356 | 0) >> 2] | 0 | 0);
     label$125 : {
      if (!((HEAP32[($12_1 + 480 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$125
      }
      HEAPF64[((HEAP32[(HEAP32[($12_1 + 480 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($12_1 + 420 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($12_1 + 360 | 0) >> 2] | 0) + ((HEAP32[($12_1 + 356 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$126 : {
       if (HEAP32[($12_1 + 460 | 0) >> 2] | 0) {
        break label$126
       }
       $1308 = (HEAP32[(HEAP32[($12_1 + 480 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($12_1 + 420 | 0) >> 2] | 0) << 3 | 0) | 0;
       HEAPF64[$1308 >> 3] = +HEAPF64[$1308 >> 3] / 2.0;
      }
     }
     $1309 = 0;
     $1312 = $12_1 + 352 | 0;
     HEAP8[((HEAP32[($12_1 + 308 | 0) >> 2] | 0) + (HEAP32[($12_1 + 356 | 0) >> 2] | 0) | 0) >> 0] = 1;
     $258(HEAP32[($12_1 + 488 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 356 | 0) >> 2] | 0 | 0, $12_1 + 348 | 0 | 0, $12_1 + 344 | 0 | 0) | 0;
     HEAP32[($12_1 + 380 | 0) >> 2] = (HEAP32[((HEAP32[($12_1 + 384 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($12_1 + 344 | 0) >> 2] | 0, 12) | 0;
     (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $515(HEAP32[($12_1 + 380 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 376 | 0) >> 2] = wasm2js_i32$1;
     $532(HEAP32[($12_1 + 380 | 0) >> 2] | 0 | 0, $1309 | 0, HEAP32[($12_1 + 356 | 0) >> 2] | 0 | 0, $1312 | 0) | 0;
     HEAP32[((HEAP32[(HEAP32[($12_1 + 380 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($12_1 + 352 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($12_1 + 380 | 0) >> 2] | 0) >> 2] | 0) + (((HEAP32[($12_1 + 376 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     $531(HEAP32[($12_1 + 380 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($12_1 + 380 | 0) >> 2] = (HEAP32[((HEAP32[($12_1 + 388 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($12_1 + 348 | 0) >> 2] | 0, 12) | 0;
     (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $515(HEAP32[($12_1 + 380 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 376 | 0) >> 2] = wasm2js_i32$1;
     $532(HEAP32[($12_1 + 380 | 0) >> 2] | 0 | 0, $1309 | 0, HEAP32[($12_1 + 356 | 0) >> 2] | 0 | 0, $1312 | 0) | 0;
     HEAP32[((HEAP32[(HEAP32[($12_1 + 380 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($12_1 + 352 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($12_1 + 380 | 0) >> 2] | 0) >> 2] | 0) + (((HEAP32[($12_1 + 376 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0;
     $531(HEAP32[($12_1 + 380 | 0) >> 2] | 0 | 0) | 0;
     HEAPF64[($12_1 + 312 | 0) >> 3] = +HEAPF64[($12_1 + 312 | 0) >> 3] + +((HEAP32[($12_1 + 136 | 0) >> 2] | 0) - (HEAP32[($12_1 + 420 | 0) >> 2] | 0) | 0 | 0);
     HEAP32[($12_1 + 420 | 0) >> 2] = (HEAP32[($12_1 + 420 | 0) >> 2] | 0) + 1 | 0;
     continue label$50;
    };
   }
   label$127 : {
    if (!($534(4917 | 0, +(100.0), 0 | 0) | 0)) {
     break label$127
    }
    $31();
    HEAP32[($12_1 + 492 | 0) >> 2] = 13;
    break label$3;
   }
   $264(HEAP32[($12_1 + 308 | 0) >> 2] | 0 | 0) | 0;
   $488($12_1 + 360 | 0 | 0);
   $548($12_1 + 328 | 0 | 0);
   $34(3 | 0);
   label$128 : {
    label$129 : {
     if (!((HEAP32[($12_1 + 456 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$129
     }
     $38($12_1 + 288 | 0 | 0);
     $34(1 | 0);
     break label$128;
    }
    $946($12_1 + 248 | 0 | 0);
    $50($12_1 + 392 | 0 | 0);
    $34(2 | 0);
   }
   $264(HEAP32[($12_1 + 436 | 0) >> 2] | 0 | 0) | 0;
   $264(HEAP32[($12_1 + 432 | 0) >> 2] | 0 | 0) | 0;
   $264(HEAP32[($12_1 + 440 | 0) >> 2] | 0 | 0) | 0;
   $34(3 | 0);
   label$130 : {
    label$131 : {
     if (!(HEAP32[($12_1 + 460 | 0) >> 2] | 0)) {
      break label$131
     }
     $50($12_1 + 408 | 0 | 0);
     $50($12_1 + 400 | 0 | 0);
     $34(2 | 0);
     break label$130;
    }
    $50($12_1 + 408 | 0 | 0);
    $34(1 | 0);
   }
   label$132 : {
    label$133 : {
     if ((HEAP32[($12_1 + 476 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$133
     }
     if ((HEAP32[($12_1 + 472 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$133
     }
     if ((HEAP32[($12_1 + 468 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$133
     }
     if (!((HEAP32[($12_1 + 464 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$132
     }
    }
    (wasm2js_i32$0 = $12_1, wasm2js_i32$1 = $230(HEAP32[($12_1 + 488 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 484 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 456 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 476 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 472 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 468 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 464 | 0) >> 2] | 0 | 0, HEAP32[($12_1 + 452 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
    label$134 : {
     if (!(HEAP32[($12_1 + 12 | 0) >> 2] | 0)) {
      break label$134
     }
     $28(4263 | 0, 4264 | 0, 1171 | 0, HEAP32[($12_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($12_1 + 492 | 0) >> 2] = HEAP32[($12_1 + 12 | 0) >> 2] | 0;
     break label$3;
    }
   }
   label$135 : {
    if (!(HEAP32[($12_1 + 340 | 0) >> 2] | 0)) {
     break label$135
    }
    $488(HEAP32[($12_1 + 484 | 0) >> 2] | 0 | 0);
    $1064(HEAP32[($12_1 + 484 | 0) >> 2] | 0 | 0);
    $34(2 | 0);
   }
   HEAP32[($12_1 + 492 | 0) >> 2] = 0;
  }
  $1477 = HEAP32[($12_1 + 492 | 0) >> 2] | 0;
  label$136 : {
   $1481 = $12_1 + 496 | 0;
   if ($1481 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $1481;
  }
  return $1477 | 0;
 }
 
 function $234($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $21_1 = 0, $357_1 = 0.0, $100_1 = 0, $360_1 = 0.0, $117_1 = 0, $365_1 = 0.0, $153_1 = 0, $185_1 = 0, $373_1 = 0.0, $214_1 = 0, $246_1 = 0, $381_1 = 0.0, $293_1 = 0, $325_1 = 0, $355_1 = 0, $354_1 = 0, $356_1 = 0.0, $144_1 = 0, $205_1 = 0, $351_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 96 | 0;
  label$1 : {
   $354_1 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $354_1;
  }
  HEAP32[($7_1 + 88 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 84 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 80 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 72 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 68 | 0) >> 2] = HEAP32[($7_1 + 84 | 0) >> 2] | 0;
  HEAP32[($7_1 + 64 | 0) >> 2] = (HEAP32[($7_1 + 68 | 0) >> 2] | 0) - (HEAP32[($7_1 + 80 | 0) >> 2] | 0) | 0;
  HEAP32[($7_1 + 56 | 0) >> 2] = 0;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($7_1 + 80 | 0) >> 2] | 0 | 0) > ($21(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
     break label$4
    }
    $21_1 = 4;
    $28(4962 | 0, 4264 | 0, 1247 | 0, $21_1 | 0) | 0;
    HEAP32[($7_1 + 92 | 0) >> 2] = $21_1;
    break label$3;
   }
   label$5 : {
    if (!((HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$5
    }
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $494(HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
    label$6 : {
     if (!(HEAP32[($7_1 + 36 | 0) >> 2] | 0)) {
      break label$6
     }
     $28(4263 | 0, 4264 | 0, 1251 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 92 | 0) >> 2] = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
     break label$3;
    }
    $497(HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0);
   }
   label$7 : {
    if (!((HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$7
    }
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $494(HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
    label$8 : {
     if (!(HEAP32[($7_1 + 32 | 0) >> 2] | 0)) {
      break label$8
     }
     $28(4263 | 0, 4264 | 0, 1255 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 92 | 0) >> 2] = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
     break label$3;
    }
    $497(HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0);
   }
   (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $486($7_1 + 40 | 0 | 0, HEAP32[($7_1 + 80 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
   label$9 : {
    if (!(HEAP32[($7_1 + 28 | 0) >> 2] | 0)) {
     break label$9
    }
    $28(4263 | 0, 4264 | 0, 1259 | 0, HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($7_1 + 92 | 0) >> 2] = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, $7_1 + 40 | 0 | 0);
   HEAP32[($7_1 + 60 | 0) >> 2] = (HEAP32[($7_1 + 80 | 0) >> 2] | 0) - 1 | 0;
   label$10 : {
    label$11 : while (1) {
     if (!((HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
      break label$10
     }
     $356_1 = +(0 | 0);
     $357_1 = +HEAPF64[((HEAP32[(HEAP32[($7_1 + 88 | 0) >> 2] | 0) >> 2] | 0) + ((Math_imul(HEAP32[((HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0, 0) + (HEAP32[($7_1 + 60 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
     label$12 : {
      label$13 : {
       if (!(Math_abs($357_1) < 2147483648.0)) {
        break label$13
       }
       $100_1 = ~~$357_1;
       break label$12;
      }
      $100_1 = -2147483648;
     }
     HEAP32[($7_1 + 24 | 0) >> 2] = $100_1;
     $360_1 = +HEAPF64[((HEAP32[(HEAP32[($7_1 + 88 | 0) >> 2] | 0) >> 2] | 0) + ((((HEAP32[((HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) << 0 | 0) + (HEAP32[($7_1 + 60 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3];
     label$14 : {
      label$15 : {
       if (!(Math_abs($360_1) < 2147483648.0)) {
        break label$15
       }
       $117_1 = ~~$360_1;
       break label$14;
      }
      $117_1 = -2147483648;
     }
     HEAP32[($7_1 + 20 | 0) >> 2] = $117_1;
     label$16 : {
      if (!(+HEAPF64[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == $356_1 & 1 | 0)) {
       break label$16
      }
      HEAP32[($7_1 + 56 | 0) >> 2] = (HEAP32[($7_1 + 56 | 0) >> 2] | 0) + 1 | 0;
      HEAPF64[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0);
     }
     label$17 : {
      label$18 : {
       if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$18
       }
       $144_1 = 0;
       $365_1 = +HEAPF64[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       label$19 : {
        label$20 : {
         if (!(Math_abs($365_1) < 2147483648.0)) {
          break label$20
         }
         $153_1 = ~~$365_1;
         break label$19;
        }
        $153_1 = -2147483648;
       }
       HEAP32[($7_1 + 16 | 0) >> 2] = $153_1 - 1 | 0;
       label$21 : {
        if (!((HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0) != ($144_1 | 0) & 1 | 0)) {
         break label$21
        }
        HEAPF64[((HEAP32[(HEAP32[($7_1 + 76 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 1 | 0 | 0);
       }
       label$22 : {
        if (!((HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$22
        }
        $185_1 = (HEAP32[(HEAP32[($7_1 + 72 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0;
        HEAPF64[$185_1 >> 3] = +HEAPF64[$185_1 >> 3] + 1.0;
       }
       break label$17;
      }
      HEAPF64[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 24 | 0) >> 2] | 0) - (HEAP32[($7_1 + 68 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     }
     label$23 : {
      label$24 : {
       if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$24
       }
       $205_1 = 0;
       $373_1 = +HEAPF64[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       label$25 : {
        label$26 : {
         if (!(Math_abs($373_1) < 2147483648.0)) {
          break label$26
         }
         $214_1 = ~~$373_1;
         break label$25;
        }
        $214_1 = -2147483648;
       }
       HEAP32[($7_1 + 12 | 0) >> 2] = $214_1 - 1 | 0;
       label$27 : {
        if (!((HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0) != ($205_1 | 0) & 1 | 0)) {
         break label$27
        }
        HEAPF64[((HEAP32[(HEAP32[($7_1 + 76 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 1 | 0 | 0);
       }
       label$28 : {
        if (!((HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$28
        }
        $246_1 = (HEAP32[(HEAP32[($7_1 + 72 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
        HEAPF64[$246_1 >> 3] = +HEAPF64[$246_1 >> 3] + 1.0;
       }
       break label$23;
      }
      HEAPF64[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) - (HEAP32[($7_1 + 68 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     }
     HEAP32[($7_1 + 60 | 0) >> 2] = (HEAP32[($7_1 + 60 | 0) >> 2] | 0) + -1 | 0;
     continue label$11;
    };
   }
   label$29 : {
    label$30 : {
     if ((HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$30
     }
     if (!((HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$29
     }
    }
    HEAP32[($7_1 + 60 | 0) >> 2] = 0;
    label$31 : {
     label$32 : while (1) {
      if (!((HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$31
      }
      $381_1 = +HEAPF64[((HEAP32[(HEAP32[($7_1 + 76 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$33 : {
       label$34 : {
        if (!(Math_abs($381_1) < 2147483648.0)) {
         break label$34
        }
        $293_1 = ~~$381_1;
        break label$33;
       }
       $293_1 = -2147483648;
      }
      HEAP32[($7_1 + 8 | 0) >> 2] = $293_1;
      label$35 : {
       label$36 : {
        if (!(HEAP32[($7_1 + 8 | 0) >> 2] | 0)) {
         break label$36
        }
        label$37 : {
         if (!((HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$37
         }
         HEAPF64[((HEAP32[(HEAP32[($7_1 + 76 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +((HEAP32[($7_1 + 8 | 0) >> 2] | 0) - 1 | 0 | 0);
        }
        break label$35;
       }
       label$38 : {
        if (!((HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$38
        }
        $325_1 = (HEAP32[(HEAP32[($7_1 + 72 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0;
        HEAPF64[$325_1 >> 3] = +HEAPF64[$325_1 >> 3] + 1.0;
       }
       label$39 : {
        if (!((HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$39
        }
        HEAPF64[((HEAP32[(HEAP32[($7_1 + 76 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0);
       }
       HEAP32[($7_1 + 56 | 0) >> 2] = (HEAP32[($7_1 + 56 | 0) >> 2] | 0) + 1 | 0;
      }
      HEAP32[($7_1 + 60 | 0) >> 2] = (HEAP32[($7_1 + 60 | 0) >> 2] | 0) + 1 | 0;
      continue label$32;
     };
    }
   }
   $488($7_1 + 40 | 0 | 0);
   $34(1 | 0);
   HEAP32[($7_1 + 92 | 0) >> 2] = 0;
  }
  $351_1 = HEAP32[($7_1 + 92 | 0) >> 2] | 0;
  label$40 : {
   $355_1 = $7_1 + 96 | 0;
   if ($355_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $355_1;
  }
  return $351_1 | 0;
 }
 
 function $235($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $156_1 = 0.0, $50_1 = 0, $60_1 = 0, $164_1 = 0.0, $118_1 = 0, $155_1 = 0, $154_1 = 0, $163_1 = 0.0, $151_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 64 | 0;
  label$1 : {
   $154_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $154_1;
  }
  HEAP32[($5_1 + 56 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 48 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $490(HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 40 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $486($5_1 + 24 | 0 | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!(HEAP32[($5_1 + 16 | 0) >> 2] | 0)) {
     break label$4
    }
    $28(4263 | 0, 4264 | 0, 1534 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 60 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, $5_1 + 24 | 0 | 0);
   label$5 : {
    if (!((HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$5
    }
    $492(HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($5_1 + 20 | 0) >> 2] = 1;
   HEAP32[($5_1 + 44 | 0) >> 2] = 0;
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     $156_1 = +HEAPF64[((HEAP32[(HEAP32[($5_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$8 : {
      label$9 : {
       if (!(Math_abs($156_1) < 2147483648.0)) {
        break label$9
       }
       $50_1 = ~~$156_1;
       break label$8;
      }
      $50_1 = -2147483648;
     }
     HEAP32[($5_1 + 12 | 0) >> 2] = $50_1;
     label$10 : {
      if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) >= (HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$10
      }
      $60_1 = 4;
      $28(5252 | 0, 4264 | 0, 1548 | 0, $60_1 | 0) | 0;
      HEAP32[($5_1 + 60 | 0) >> 2] = $60_1;
      break label$3;
     }
     label$11 : {
      if (!(+HEAPF64[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(0 | 0) & 1 | 0)) {
       break label$11
      }
      HEAPF64[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
      HEAP32[($5_1 + 20 | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 1 | 0;
      label$12 : {
       if (!((HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$12
       }
       (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $493(HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0, +(+(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
       label$13 : {
        if (!(HEAP32[($5_1 + 8 | 0) >> 2] | 0)) {
         break label$13
        }
        $28(4263 | 0, 4264 | 0, 1555 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($5_1 + 60 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
        break label$3;
       }
      }
     }
     HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 1 | 0;
     continue label$7;
    };
   }
   HEAP32[($5_1 + 44 | 0) >> 2] = 0;
   label$14 : {
    label$15 : while (1) {
     if (!((HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$14
     }
     $163_1 = 1.0;
     $164_1 = +HEAPF64[((HEAP32[(HEAP32[($5_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$16 : {
      label$17 : {
       if (!(Math_abs($164_1) < 2147483648.0)) {
        break label$17
       }
       $118_1 = ~~$164_1;
       break label$16;
      }
      $118_1 = -2147483648;
     }
     HEAP32[($5_1 + 4 | 0) >> 2] = $118_1;
     HEAPF64[((HEAP32[(HEAP32[($5_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] - $163_1;
     HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 1 | 0;
     continue label$15;
    };
   }
   label$18 : {
    if (!((HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$18
    }
    HEAP32[(HEAP32[($5_1 + 48 | 0) >> 2] | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) - 1 | 0;
   }
   $488($5_1 + 24 | 0 | 0);
   $34(1 | 0);
   HEAP32[($5_1 + 60 | 0) >> 2] = 0;
  }
  $151_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
  label$19 : {
   $155_1 = $5_1 + 64 | 0;
   if ($155_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $155_1;
  }
  return $151_1 | 0;
 }
 
 function $236($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $30_1 = 0, $49_1 = 0, $58_1 = 0, $104_1 = 0, $989_1 = 0.0, $201_1 = 0, $211_1 = 0, $222_1 = 0, $384_1 = 0, $451_1 = 0, $997_1 = 0.0, $466_1 = 0, $1000_1 = 0.0, $507_1 = 0, $1003_1 = 0.0, $531_1 = 0, $534_1 = 0, $1006_1 = 0.0, $550_1 = 0, $1009_1 = 0.0, $560_1 = 0, $589_1 = 0, $1027_1 = 0.0, $689_1 = 0, $1030_1 = 0.0, $697_1 = 0, $1042_1 = 0.0, $792_1 = 0, $1045_1 = 0.0, $805_1 = 0, $1052_1 = 0.0, $844_1 = 0, $856_1 = 0, $1056_1 = 0.0, $877_1 = 0, $1062_1 = 0.0, $914_1 = 0, $977_1 = 0, $976_1 = 0, $996_1 = 0.0, $454_1 = 0, $457_1 = 0, $491_1 = 0, $795_1 = 0, $1051_1 = 0.0, $835_1 = 0, $867_1 = 0, $973_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8_1 = global$0 - 240 | 0;
  label$1 : {
   $976_1 = $8_1;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $976_1;
  }
  HEAP32[($8_1 + 232 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 228 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 224 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 220 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 216 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 212 | 0) >> 2] = $5_1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $254(HEAP32[($8_1 + 232 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 208 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $249(HEAP32[($8_1 + 232 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 204 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($8_1 + 200 | 0) >> 2] = HEAP32[($8_1 + 208 | 0) >> 2] | 0;
  HEAP32[($8_1 + 164 | 0) >> 2] = 1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($8_1 + 216 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    if (!(($523(HEAP32[($8_1 + 216 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    $30_1 = 4;
    $28(5273 | 0, 4264 | 0, 2906 | 0, $30_1 | 0) | 0;
    HEAP32[($8_1 + 236 | 0) >> 2] = $30_1;
    break label$3;
   }
   label$5 : {
    if (!((HEAP32[($8_1 + 224 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$5
    }
    label$6 : {
     if (!(($490(HEAP32[($8_1 + 224 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 204 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     $49_1 = 4;
     $28(5223 | 0, 4264 | 0, 2910 | 0, $49_1 | 0) | 0;
     HEAP32[($8_1 + 236 | 0) >> 2] = $49_1;
     break label$3;
    }
    label$7 : {
     if (!(+$502(HEAP32[($8_1 + 224 | 0) >> 2] | 0 | 0) < +(0 | 0) & 1 | 0)) {
      break label$7
     }
     $58_1 = 4;
     $28(5310 | 0, 4264 | 0, 2912 | 0, $58_1 | 0) | 0;
     HEAP32[($8_1 + 236 | 0) >> 2] = $58_1;
     break label$3;
    }
   }
   label$8 : {
    if (!((HEAP32[($8_1 + 216 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$8
    }
    if ((HEAP32[($8_1 + 220 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$8
    }
    $36(5339 | 0, 4264 | 0, 2916 | 0, -1 | 0) | 0;
   }
   (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $494(HEAP32[($8_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 208 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 100 | 0) >> 2] = wasm2js_i32$1;
   label$9 : {
    if (!(HEAP32[($8_1 + 100 | 0) >> 2] | 0)) {
     break label$9
    }
    $28(4263 | 0, 4264 | 0, 2919 | 0, HEAP32[($8_1 + 100 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($8_1 + 236 | 0) >> 2] = HEAP32[($8_1 + 100 | 0) >> 2] | 0;
    break label$3;
   }
   label$10 : {
    label$11 : {
     if (!((HEAP32[($8_1 + 220 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$11
     }
     label$12 : {
      if (!(($490(HEAP32[($8_1 + 220 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$12
      }
      $104_1 = 4;
      $28(5392 | 0, 4264 | 0, 2923 | 0, $104_1 | 0) | 0;
      HEAP32[($8_1 + 236 | 0) >> 2] = $104_1;
      break label$3;
     }
     HEAP32[($8_1 + 196 | 0) >> 2] = 0;
     label$13 : {
      label$14 : while (1) {
       if (!((HEAP32[($8_1 + 196 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$13
       }
       label$15 : {
        label$16 : {
         if (!(+HEAPF64[((HEAP32[(HEAP32[($8_1 + 220 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($8_1 + 196 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(0 | 0) & 1 | 0)) {
          break label$16
         }
         HEAPF64[((HEAP32[(HEAP32[($8_1 + 228 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($8_1 + 196 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
         break label$15;
        }
        HEAPF64[((HEAP32[(HEAP32[($8_1 + 228 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($8_1 + 196 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = Math_floor(+HEAPF64[((HEAP32[(HEAP32[($8_1 + 220 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($8_1 + 196 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]) + 1.0;
       }
       HEAP32[($8_1 + 196 | 0) >> 2] = (HEAP32[($8_1 + 196 | 0) >> 2] | 0) + 1 | 0;
       continue label$14;
      };
     }
     label$17 : {
      if (!((HEAP32[($8_1 + 216 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$17
      }
      HEAP32[($8_1 + 196 | 0) >> 2] = 0;
      label$18 : {
       label$19 : while (1) {
        if (!((HEAP32[($8_1 + 196 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$18
        }
        label$20 : {
         if (!(HEAP32[((HEAP32[(HEAP32[($8_1 + 216 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($8_1 + 196 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0)) {
          break label$20
         }
         label$21 : {
          label$22 : {
           if (!(+HEAPF64[((HEAP32[(HEAP32[($8_1 + 228 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($8_1 + 196 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(0 | 0) & 1 | 0)) {
            break label$22
           }
           $36(5431 | 0, 4264 | 0, 2937 | 0, -1 | 0) | 0;
           HEAP32[((HEAP32[(HEAP32[($8_1 + 216 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($8_1 + 196 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
           break label$21;
          }
          HEAP32[($8_1 + 200 | 0) >> 2] = (HEAP32[($8_1 + 200 | 0) >> 2] | 0) + -1 | 0;
         }
        }
        HEAP32[($8_1 + 196 | 0) >> 2] = (HEAP32[($8_1 + 196 | 0) >> 2] | 0) + 1 | 0;
        continue label$19;
       };
      }
     }
     $989_1 = +$500(HEAP32[($8_1 + 228 | 0) >> 2] | 0 | 0);
     label$23 : {
      label$24 : {
       if (!(Math_abs($989_1) < 2147483648.0)) {
        break label$24
       }
       $201_1 = ~~$989_1;
       break label$23;
      }
      $201_1 = -2147483648;
     }
     HEAP32[($8_1 + 196 | 0) >> 2] = $201_1;
     label$25 : {
      if (!((HEAP32[($8_1 + 196 | 0) >> 2] | 0 | 0) > (HEAP32[($8_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$25
      }
      $211_1 = 4;
      $28(5478 | 0, 4264 | 0, 2948 | 0, $211_1 | 0) | 0;
      HEAP32[($8_1 + 236 | 0) >> 2] = $211_1;
      break label$3;
     }
     label$26 : {
      if (!((HEAP32[($8_1 + 196 | 0) >> 2] | 0 | 0) <= (0 | 0) & 1 | 0)) {
       break label$26
      }
      $222_1 = 4;
      $28(5546 | 0, 4264 | 0, 2951 | 0, $222_1 | 0) | 0;
      HEAP32[($8_1 + 236 | 0) >> 2] = $222_1;
      break label$3;
     }
     break label$10;
    }
    HEAP32[($8_1 + 196 | 0) >> 2] = 0;
    label$27 : {
     label$28 : while (1) {
      if (!((HEAP32[($8_1 + 196 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$27
      }
      HEAPF64[((HEAP32[(HEAP32[($8_1 + 228 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($8_1 + 196 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +((HEAP32[($8_1 + 196 | 0) >> 2] | 0) + 1 | 0 | 0);
      HEAP32[($8_1 + 196 | 0) >> 2] = (HEAP32[($8_1 + 196 | 0) >> 2] | 0) + 1 | 0;
      continue label$28;
     };
    }
   }
   label$29 : {
    label$30 : {
     if (!((HEAP32[($8_1 + 224 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$30
     }
     (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $49(HEAP32[($8_1 + 232 | 0) >> 2] | 0 | 0, $8_1 + 168 | 0 | 0, 2 | 0) | 0), HEAP32[(wasm2js_i32$0 + 96 | 0) >> 2] = wasm2js_i32$1;
     label$31 : {
      if (!(HEAP32[($8_1 + 96 | 0) >> 2] | 0)) {
       break label$31
      }
      $28(4263 | 0, 4264 | 0, 2963 | 0, HEAP32[($8_1 + 96 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($8_1 + 236 | 0) >> 2] = HEAP32[($8_1 + 96 | 0) >> 2] | 0;
      break label$3;
     }
     $33(5 | 0, $8_1 + 168 | 0 | 0);
     break label$29;
    }
    (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $47(HEAP32[($8_1 + 232 | 0) >> 2] | 0 | 0, $8_1 + 176 | 0 | 0, 2 | 0) | 0), HEAP32[(wasm2js_i32$0 + 92 | 0) >> 2] = wasm2js_i32$1;
    label$32 : {
     if (!(HEAP32[($8_1 + 92 | 0) >> 2] | 0)) {
      break label$32
     }
     $28(4263 | 0, 4264 | 0, 2966 | 0, HEAP32[($8_1 + 92 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($8_1 + 236 | 0) >> 2] = HEAP32[($8_1 + 92 | 0) >> 2] | 0;
     break label$3;
    }
    $33(4 | 0, $8_1 + 176 | 0 | 0);
   }
   (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $486($8_1 + 152 | 0 | 0, (HEAP32[($8_1 + 208 | 0) >> 2] | 0) + 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 88 | 0) >> 2] = wasm2js_i32$1;
   label$33 : {
    if (!(HEAP32[($8_1 + 88 | 0) >> 2] | 0)) {
     break label$33
    }
    $28(4263 | 0, 4264 | 0, 2971 | 0, HEAP32[($8_1 + 88 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($8_1 + 236 | 0) >> 2] = HEAP32[($8_1 + 88 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, $8_1 + 152 | 0 | 0);
   (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $486($8_1 + 136 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 84 | 0) >> 2] = wasm2js_i32$1;
   label$34 : {
    if (!(HEAP32[($8_1 + 84 | 0) >> 2] | 0)) {
     break label$34
    }
    $28(4263 | 0, 4264 | 0, 2972 | 0, HEAP32[($8_1 + 84 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($8_1 + 236 | 0) >> 2] = HEAP32[($8_1 + 84 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, $8_1 + 136 | 0 | 0);
   (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $486($8_1 + 120 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 80 | 0) >> 2] = wasm2js_i32$1;
   label$35 : {
    if (!(HEAP32[($8_1 + 80 | 0) >> 2] | 0)) {
     break label$35
    }
    $28(4263 | 0, 4264 | 0, 2973 | 0, HEAP32[($8_1 + 80 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($8_1 + 236 | 0) >> 2] = HEAP32[($8_1 + 80 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, $8_1 + 120 | 0 | 0);
   (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $489($8_1 + 136 | 0 | 0, 2 | 0) | 0), HEAP32[(wasm2js_i32$0 + 76 | 0) >> 2] = wasm2js_i32$1;
   label$36 : {
    if (!(HEAP32[($8_1 + 76 | 0) >> 2] | 0)) {
     break label$36
    }
    $28(4263 | 0, 4264 | 0, 2974 | 0, HEAP32[($8_1 + 76 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($8_1 + 236 | 0) >> 2] = HEAP32[($8_1 + 76 | 0) >> 2] | 0;
    break label$3;
   }
   label$37 : {
    if (!((HEAP32[(($959() | 0) + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$37
    }
    $960($959() | 0 | 0, fimport$0(0 | 0) | 0 | 0) | 0;
    (wasm2js_i32$0 = $959() | 0, wasm2js_i32$1 = 2), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
   }
   label$38 : {
    label$39 : {
     if (!((HEAP32[($8_1 + 216 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$39
     }
     (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $486($8_1 + 104 | 0 | 0, HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 72 | 0) >> 2] = wasm2js_i32$1;
     label$40 : {
      if (!(HEAP32[($8_1 + 72 | 0) >> 2] | 0)) {
       break label$40
      }
      $28(4263 | 0, 4264 | 0, 2980 | 0, HEAP32[($8_1 + 72 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($8_1 + 236 | 0) >> 2] = HEAP32[($8_1 + 72 | 0) >> 2] | 0;
      break label$3;
     }
     $33(1 | 0, $8_1 + 104 | 0 | 0);
     $384_1 = 0;
     HEAP32[($8_1 + 196 | 0) >> 2] = $384_1;
     HEAP32[($8_1 + 192 | 0) >> 2] = $384_1;
     label$41 : {
      label$42 : while (1) {
       if (!((HEAP32[($8_1 + 196 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$41
       }
       label$43 : {
        if (HEAP32[((HEAP32[(HEAP32[($8_1 + 216 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($8_1 + 196 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) {
         break label$43
        }
        HEAPF64[((HEAP32[($8_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($8_1 + 196 | 0) >> 2] | 0 | 0);
        HEAP32[($8_1 + 192 | 0) >> 2] = (HEAP32[($8_1 + 192 | 0) >> 2] | 0) + 1 | 0;
       }
       HEAP32[($8_1 + 196 | 0) >> 2] = (HEAP32[($8_1 + 196 | 0) >> 2] | 0) + 1 | 0;
       continue label$42;
      };
     }
     break label$38;
    }
    (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $506($8_1 + 104 | 0 | 0, +(+(0 | 0)), +(+((HEAP32[($8_1 + 208 | 0) >> 2] | 0) - 1 | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 68 | 0) >> 2] = wasm2js_i32$1;
    label$44 : {
     if (!(HEAP32[($8_1 + 68 | 0) >> 2] | 0)) {
      break label$44
     }
     $28(4263 | 0, 4264 | 0, 2988 | 0, HEAP32[($8_1 + 68 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($8_1 + 236 | 0) >> 2] = HEAP32[($8_1 + 68 | 0) >> 2] | 0;
     break label$3;
    }
    $33(1 | 0, $8_1 + 104 | 0 | 0);
   }
   HEAP32[($8_1 + 164 | 0) >> 2] = 1;
   label$45 : {
    label$46 : while (1) {
     if (!(HEAP32[($8_1 + 164 | 0) >> 2] | 0)) {
      break label$45
     }
     HEAP32[($8_1 + 164 | 0) >> 2] = 0;
     (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $514($8_1 + 104 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
     label$47 : {
      if (!(HEAP32[($8_1 + 32 | 0) >> 2] | 0)) {
       break label$47
      }
      $28(4263 | 0, 4264 | 0, 3003 | 0, HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($8_1 + 236 | 0) >> 2] = HEAP32[($8_1 + 32 | 0) >> 2] | 0;
      break label$3;
     }
     HEAP32[($8_1 + 196 | 0) >> 2] = 0;
     label$48 : {
      label$49 : while (1) {
       if (!((HEAP32[($8_1 + 196 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 200 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$48
       }
       $451_1 = 0;
       $996_1 = +($451_1 | 0);
       $454_1 = $8_1 + 120 | 0;
       $457_1 = $8_1 + 136 | 0;
       $997_1 = +HEAPF64[((HEAP32[($8_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 196 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       label$50 : {
        label$51 : {
         if (!(Math_abs($997_1) < 2147483648.0)) {
          break label$51
         }
         $466_1 = ~~$997_1;
         break label$50;
        }
        $466_1 = -2147483648;
       }
       HEAP32[($8_1 + 64 | 0) >> 2] = $466_1;
       $492($457_1 | 0);
       $492($454_1 | 0);
       HEAPF64[($8_1 + 48 | 0) >> 3] = $996_1;
       label$52 : {
        label$53 : {
         if (!((HEAP32[($8_1 + 224 | 0) >> 2] | 0 | 0) != ($451_1 | 0) & 1 | 0)) {
          break label$53
         }
         HEAP32[($8_1 + 40 | 0) >> 2] = (HEAP32[($8_1 + 172 | 0) >> 2] | 0) + Math_imul(HEAP32[($8_1 + 64 | 0) >> 2] | 0, 12) | 0;
         (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $515(HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
         HEAP32[($8_1 + 192 | 0) >> 2] = 0;
         label$54 : {
          label$55 : while (1) {
           if (!((HEAP32[($8_1 + 192 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$54
           }
           $491_1 = HEAP32[(HEAP32[($8_1 + 228 | 0) >> 2] | 0) >> 2] | 0;
           $1000_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 232 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[(HEAP32[($8_1 + 40 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($8_1 + 192 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           label$56 : {
            label$57 : {
             if (!(Math_abs($1000_1) < 2147483648.0)) {
              break label$57
             }
             $507_1 = ~~$1000_1;
             break label$56;
            }
            $507_1 = -2147483648;
           }
           label$58 : {
            label$59 : {
             if (!(($507_1 | 0) == (HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$59
             }
             $1003_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 232 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[(HEAP32[($8_1 + 40 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($8_1 + 192 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
             label$60 : {
              label$61 : {
               if (!(Math_abs($1003_1) < 2147483648.0)) {
                break label$61
               }
               $531_1 = ~~$1003_1;
               break label$60;
              }
              $531_1 = -2147483648;
             }
             $534_1 = $531_1;
             break label$58;
            }
            $1006_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 232 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[(HEAP32[($8_1 + 40 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($8_1 + 192 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            label$62 : {
             label$63 : {
              if (!(Math_abs($1006_1) < 2147483648.0)) {
               break label$63
              }
              $550_1 = ~~$1006_1;
              break label$62;
             }
             $550_1 = -2147483648;
            }
            $534_1 = $550_1;
           }
           $1009_1 = +HEAPF64[($491_1 + ($534_1 << 3 | 0) | 0) >> 3];
           label$64 : {
            label$65 : {
             if (!(Math_abs($1009_1) < 2147483648.0)) {
              break label$65
             }
             $560_1 = ~~$1009_1;
             break label$64;
            }
            $560_1 = -2147483648;
           }
           HEAP32[($8_1 + 188 | 0) >> 2] = $560_1;
           label$66 : {
            label$67 : {
             if (HEAP32[($8_1 + 188 | 0) >> 2] | 0) {
              break label$67
             }
             break label$66;
            }
            HEAP32[($8_1 + 36 | 0) >> 2] = +HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 188 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(0 | 0) & 1 | 0;
            $589_1 = (HEAP32[($8_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 188 | 0) >> 2] | 0) << 3 | 0) | 0;
            HEAPF64[$589_1 >> 3] = +HEAPF64[$589_1 >> 3] + +HEAPF64[((HEAP32[(HEAP32[($8_1 + 224 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[((HEAP32[(HEAP32[($8_1 + 40 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($8_1 + 192 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            label$68 : {
             if (!(HEAP32[($8_1 + 36 | 0) >> 2] | 0)) {
              break label$68
             }
             if (!(+HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 188 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] != +(0 | 0) & 1 | 0)) {
              break label$68
             }
             (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $493($8_1 + 120 | 0 | 0, +(+(HEAP32[($8_1 + 188 | 0) >> 2] | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
             label$69 : {
              if (!(HEAP32[($8_1 + 28 | 0) >> 2] | 0)) {
               break label$69
              }
              $28(4263 | 0, 4264 | 0, 3025 | 0, HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) | 0;
              HEAP32[($8_1 + 236 | 0) >> 2] = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
              break label$3;
             }
            }
            label$70 : {
             label$71 : {
              if (!(+HEAPF64[($8_1 + 48 | 0) >> 3] < +HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 188 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
               break label$71
              }
              HEAPF64[($8_1 + 48 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 188 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
              (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $494($8_1 + 136 | 0 | 0, 1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
              label$72 : {
               if (!(HEAP32[($8_1 + 24 | 0) >> 2] | 0)) {
                break label$72
               }
               $28(4263 | 0, 4264 | 0, 3029 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) | 0;
               HEAP32[($8_1 + 236 | 0) >> 2] = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
               break label$3;
              }
              HEAPF64[(HEAP32[($8_1 + 136 | 0) >> 2] | 0) >> 3] = +(HEAP32[($8_1 + 188 | 0) >> 2] | 0 | 0);
              break label$70;
             }
             label$73 : {
              if (!(+HEAPF64[($8_1 + 48 | 0) >> 3] == +HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 188 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
               break label$73
              }
              (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $493($8_1 + 136 | 0 | 0, +(+(HEAP32[($8_1 + 188 | 0) >> 2] | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
              label$74 : {
               if (!(HEAP32[($8_1 + 20 | 0) >> 2] | 0)) {
                break label$74
               }
               $28(4263 | 0, 4264 | 0, 3032 | 0, HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0) | 0;
               HEAP32[($8_1 + 236 | 0) >> 2] = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
               break label$3;
              }
             }
            }
           }
           HEAP32[($8_1 + 192 | 0) >> 2] = (HEAP32[($8_1 + 192 | 0) >> 2] | 0) + 1 | 0;
           continue label$55;
          };
         }
         break label$52;
        }
        HEAP32[($8_1 + 44 | 0) >> 2] = (HEAP32[($8_1 + 180 | 0) >> 2] | 0) + Math_imul(HEAP32[($8_1 + 64 | 0) >> 2] | 0, 12) | 0;
        (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $515(HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
        HEAP32[($8_1 + 192 | 0) >> 2] = 0;
        label$75 : {
         label$76 : while (1) {
          if (!((HEAP32[($8_1 + 192 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$75
          }
          $1027_1 = +HEAPF64[((HEAP32[(HEAP32[($8_1 + 228 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[((HEAP32[(HEAP32[($8_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($8_1 + 192 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          label$77 : {
           label$78 : {
            if (!(Math_abs($1027_1) < 2147483648.0)) {
             break label$78
            }
            $689_1 = ~~$1027_1;
            break label$77;
           }
           $689_1 = -2147483648;
          }
          HEAP32[($8_1 + 188 | 0) >> 2] = $689_1;
          label$79 : {
           label$80 : {
            if (HEAP32[($8_1 + 188 | 0) >> 2] | 0) {
             break label$80
            }
            break label$79;
           }
           $1030_1 = 1.0;
           $697_1 = (HEAP32[($8_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 188 | 0) >> 2] | 0) << 3 | 0) | 0;
           HEAPF64[$697_1 >> 3] = +HEAPF64[$697_1 >> 3] + $1030_1;
           label$81 : {
            if (!(+HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 188 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == $1030_1 & 1 | 0)) {
             break label$81
            }
            (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $493($8_1 + 120 | 0 | 0, +(+(HEAP32[($8_1 + 188 | 0) >> 2] | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
            label$82 : {
             if (!(HEAP32[($8_1 + 16 | 0) >> 2] | 0)) {
              break label$82
             }
             $28(4263 | 0, 4264 | 0, 3046 | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) | 0;
             HEAP32[($8_1 + 236 | 0) >> 2] = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
             break label$3;
            }
           }
           label$83 : {
            label$84 : {
             if (!(+HEAPF64[($8_1 + 48 | 0) >> 3] < +HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 188 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
              break label$84
             }
             HEAPF64[($8_1 + 48 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 188 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
             (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $494($8_1 + 136 | 0 | 0, 1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
             label$85 : {
              if (!(HEAP32[($8_1 + 12 | 0) >> 2] | 0)) {
               break label$85
              }
              $28(4263 | 0, 4264 | 0, 3050 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) | 0;
              HEAP32[($8_1 + 236 | 0) >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
              break label$3;
             }
             HEAPF64[(HEAP32[($8_1 + 136 | 0) >> 2] | 0) >> 3] = +(HEAP32[($8_1 + 188 | 0) >> 2] | 0 | 0);
             break label$83;
            }
            label$86 : {
             if (!(+HEAPF64[($8_1 + 48 | 0) >> 3] == +HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 188 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
              break label$86
             }
             (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $493($8_1 + 136 | 0 | 0, +(+(HEAP32[($8_1 + 188 | 0) >> 2] | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
             label$87 : {
              if (!(HEAP32[($8_1 + 8 | 0) >> 2] | 0)) {
               break label$87
              }
              $28(4263 | 0, 4264 | 0, 3053 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0) | 0;
              HEAP32[($8_1 + 236 | 0) >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
              break label$3;
             }
            }
           }
          }
          HEAP32[($8_1 + 192 | 0) >> 2] = (HEAP32[($8_1 + 192 | 0) >> 2] | 0) + 1 | 0;
          continue label$76;
         };
        }
       }
       label$88 : {
        if (!(($490($8_1 + 136 | 0 | 0) | 0 | 0) > (0 | 0) & 1 | 0)) {
         break label$88
        }
        (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $961($959() | 0 | 0, 0 | 0, ($490($8_1 + 136 | 0 | 0) | 0) - 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 188 | 0) >> 2] = wasm2js_i32$1;
        $1042_1 = +HEAPF64[((HEAP32[($8_1 + 136 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 188 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$89 : {
         label$90 : {
          if (!(Math_abs($1042_1) < 2147483648.0)) {
           break label$90
          }
          $792_1 = ~~$1042_1;
          break label$89;
         }
         $792_1 = -2147483648;
        }
        HEAP32[($8_1 + 188 | 0) >> 2] = $792_1;
        $795_1 = HEAP32[($8_1 + 152 | 0) >> 2] | 0;
        $1045_1 = +HEAPF64[((HEAP32[(HEAP32[($8_1 + 228 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($8_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$91 : {
         label$92 : {
          if (!(Math_abs($1045_1) < 2147483648.0)) {
           break label$92
          }
          $805_1 = ~~$1045_1;
          break label$91;
         }
         $805_1 = -2147483648;
        }
        label$93 : {
         if (!(+HEAPF64[($795_1 + ($805_1 << 3 | 0) | 0) >> 3] != +HEAPF64[($8_1 + 48 | 0) >> 3] & 1 | 0)) {
          break label$93
         }
         HEAP32[($8_1 + 164 | 0) >> 2] = 1;
        }
        HEAPF64[((HEAP32[(HEAP32[($8_1 + 228 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($8_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($8_1 + 188 | 0) >> 2] | 0 | 0);
       }
       (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $490($8_1 + 120 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
       HEAP32[($8_1 + 192 | 0) >> 2] = 0;
       label$94 : {
        label$95 : while (1) {
         if (!((HEAP32[($8_1 + 192 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$94
         }
         $1051_1 = +(0 | 0);
         $835_1 = HEAP32[($8_1 + 152 | 0) >> 2] | 0;
         $1052_1 = +HEAPF64[((HEAP32[($8_1 + 120 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 192 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         label$96 : {
          label$97 : {
           if (!(Math_abs($1052_1) < 2147483648.0)) {
            break label$97
           }
           $844_1 = ~~$1052_1;
           break label$96;
          }
          $844_1 = -2147483648;
         }
         HEAPF64[($835_1 + ($844_1 << 3 | 0) | 0) >> 3] = $1051_1;
         HEAP32[($8_1 + 192 | 0) >> 2] = (HEAP32[($8_1 + 192 | 0) >> 2] | 0) + 1 | 0;
         continue label$95;
        };
       }
       HEAP32[($8_1 + 196 | 0) >> 2] = (HEAP32[($8_1 + 196 | 0) >> 2] | 0) + 1 | 0;
       continue label$49;
      };
     }
     continue label$46;
    };
   }
   $856_1 = 0;
   $498($8_1 + 152 | 0 | 0, +(-1.0));
   HEAP32[($8_1 + 192 | 0) >> 2] = $856_1;
   HEAP32[($8_1 + 196 | 0) >> 2] = $856_1;
   label$98 : {
    label$99 : while (1) {
     if (!((HEAP32[($8_1 + 196 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$98
     }
     $867_1 = 0;
     $1056_1 = +HEAPF64[((HEAP32[(HEAP32[($8_1 + 228 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($8_1 + 196 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$100 : {
      label$101 : {
       if (!(Math_abs($1056_1) < 2147483648.0)) {
        break label$101
       }
       $877_1 = ~~$1056_1;
       break label$100;
      }
      $877_1 = -2147483648;
     }
     HEAP32[($8_1 + 188 | 0) >> 2] = $877_1 - 1 | 0;
     label$102 : {
      label$103 : {
       if (!((HEAP32[($8_1 + 188 | 0) >> 2] | 0 | 0) >= ($867_1 | 0) & 1 | 0)) {
        break label$103
       }
       label$104 : {
        label$105 : {
         if (!(+HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 188 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == -1.0 & 1 | 0)) {
          break label$105
         }
         HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 188 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($8_1 + 192 | 0) >> 2] | 0 | 0);
         HEAP32[($8_1 + 188 | 0) >> 2] = HEAP32[($8_1 + 192 | 0) >> 2] | 0;
         HEAP32[($8_1 + 192 | 0) >> 2] = (HEAP32[($8_1 + 192 | 0) >> 2] | 0) + 1 | 0;
         break label$104;
        }
        $1062_1 = +HEAPF64[((HEAP32[($8_1 + 152 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 188 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$106 : {
         label$107 : {
          if (!(Math_abs($1062_1) < 2147483648.0)) {
           break label$107
          }
          $914_1 = ~~$1062_1;
          break label$106;
         }
         $914_1 = -2147483648;
        }
        HEAP32[($8_1 + 188 | 0) >> 2] = $914_1;
       }
       break label$102;
      }
     }
     HEAPF64[((HEAP32[(HEAP32[($8_1 + 228 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($8_1 + 196 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($8_1 + 188 | 0) >> 2] | 0 | 0);
     HEAP32[($8_1 + 196 | 0) >> 2] = (HEAP32[($8_1 + 196 | 0) >> 2] | 0) + 1 | 0;
     continue label$99;
    };
   }
   label$108 : {
    label$109 : {
     if (!((HEAP32[($8_1 + 224 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$109
     }
     $50($8_1 + 168 | 0 | 0);
     break label$108;
    }
    $48($8_1 + 176 | 0 | 0);
   }
   $34(1 | 0);
   label$110 : {
    if (!((HEAP32[($8_1 + 212 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$110
    }
    (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $229(HEAP32[($8_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 228 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 212 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 224 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
    label$111 : {
     if (!(HEAP32[($8_1 + 4 | 0) >> 2] | 0)) {
      break label$111
     }
     $28(4263 | 0, 4264 | 0, 3110 | 0, HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($8_1 + 236 | 0) >> 2] = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
     break label$3;
    }
   }
   $488($8_1 + 104 | 0 | 0);
   $488($8_1 + 152 | 0 | 0);
   $488($8_1 + 136 | 0 | 0);
   $488($8_1 + 120 | 0 | 0);
   $34(4 | 0);
   HEAP32[($8_1 + 236 | 0) >> 2] = 0;
  }
  $973_1 = HEAP32[($8_1 + 236 | 0) >> 2] | 0;
  label$112 : {
   $977_1 = $8_1 + 240 | 0;
   if ($977_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $977_1;
  }
  return $973_1 | 0;
 }
 
 function $237($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 32 | 0;
  $4_1 = 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAPF64[($3_1 + 16 | 0) >> 3] = +($4_1 | 0);
  HEAPF64[$3_1 >> 3] = +HEAPF64[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 3];
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     if (!((HEAP32[((HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 12 | 0) >> 2] | 0, 24) | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAPF64[($3_1 + 16 | 0) >> 3] = +HEAPF64[($3_1 + 16 | 0) >> 3] + (+HEAPF64[(((HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 12 | 0) >> 2] | 0, 24) | 0) + 8 | 0) >> 3] - +HEAPF64[(((HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 12 | 0) >> 2] | 0, 24) | 0) + 16 | 0) >> 3] * +HEAPF64[(((HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 12 | 0) >> 2] | 0, 24) | 0) + 16 | 0) >> 3] / +HEAPF64[$3_1 >> 3]) / +HEAPF64[$3_1 >> 3];
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return +(+HEAPF64[($3_1 + 16 | 0) >> 3]);
 }
 
 function $238($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) - (HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[$4_1 >> 2] | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
    break label$1;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) | 0;
  }
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $239($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $29_1 = 0, $138_1 = 0, $197_1 = 0, $196_1 = 0, $193_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 80 | 0;
  label$1 : {
   $196_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $196_1;
  }
  $5_1 = -1;
  HEAP32[($4_1 + 72 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 68 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $249(HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 64 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($4_1 + 56 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 52 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 48 | 0) >> 2] = $5_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $253(HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 44 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $494(HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!(HEAP32[($4_1 + 16 | 0) >> 2] | 0)) {
     break label$4
    }
    $28(4263 | 0, 4264 | 0, 3184 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 76 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break label$3;
   }
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1068(HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0, 12 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
   label$5 : {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$5
    }
    $29_1 = 2;
    $28(5606 | 0, 4264 | 0, 3188 | 0, $29_1 | 0) | 0;
    HEAP32[($4_1 + 76 | 0) >> 2] = $29_1;
    break label$3;
   }
   $33(12 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
   HEAP32[($4_1 + 60 | 0) >> 2] = 0;
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     $258(HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0, $4_1 + 40 | 0 | 0, $4_1 + 36 | 0 | 0) | 0;
     HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 60 | 0) >> 2] | 0, 12) | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
     HEAP32[(((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 60 | 0) >> 2] | 0, 12) | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
     HEAP32[(((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 60 | 0) >> 2] | 0, 12) | 0) + 8 | 0) >> 2] = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
     HEAP32[($4_1 + 60 | 0) >> 2] = (HEAP32[($4_1 + 60 | 0) >> 2] | 0) + 1 | 0;
     continue label$7;
    };
   }
   $1000(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0, 12 | 0, 13 | 0);
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $486($4_1 + 24 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
   label$8 : {
    if (!(HEAP32[($4_1 + 12 | 0) >> 2] | 0)) {
     break label$8
    }
    $28(4263 | 0, 4264 | 0, 3202 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 76 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, $4_1 + 24 | 0 | 0);
   HEAP32[($4_1 + 60 | 0) >> 2] = 0;
   label$9 : {
    label$10 : while (1) {
     if (!((HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$9
     }
     label$11 : {
      label$12 : {
       if (!((HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 60 | 0) >> 2] | 0, 12) | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$12
       }
       if (!((HEAP32[(((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 60 | 0) >> 2] | 0, 12) | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$12
       }
       HEAPF64[((HEAP32[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[(((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 60 | 0) >> 2] | 0, 12) | 0) + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0);
       break label$11;
      }
      $138_1 = $4_1 + 24 | 0;
      HEAP32[($4_1 + 52 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 60 | 0) >> 2] | 0, 12) | 0) >> 2] | 0;
      HEAP32[($4_1 + 48 | 0) >> 2] = HEAP32[(((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 60 | 0) >> 2] | 0, 12) | 0) + 4 | 0) >> 2] | 0;
      $493($138_1 | 0, +(+(HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0))) | 0;
      $493($138_1 | 0, +(+(HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0))) | 0;
      HEAP32[($4_1 + 56 | 0) >> 2] = (HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 1 | 0;
      HEAPF64[((HEAP32[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[(((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 60 | 0) >> 2] | 0, 12) | 0) + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0);
     }
     HEAP32[($4_1 + 60 | 0) >> 2] = (HEAP32[($4_1 + 60 | 0) >> 2] | 0) + 1 | 0;
     continue label$10;
    };
   }
   $1064(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
   $34(1 | 0);
   $250(HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $52(HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0, $4_1 + 24 | 0 | 0, $254(HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
   label$13 : {
    if (!(HEAP32[($4_1 + 8 | 0) >> 2] | 0)) {
     break label$13
    }
    $28(4263 | 0, 4264 | 0, 3224 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 76 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    break label$3;
   }
   $488($4_1 + 24 | 0 | 0);
   $34(1 | 0);
   HEAP32[($4_1 + 76 | 0) >> 2] = 0;
  }
  $193_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
  label$14 : {
   $197_1 = $4_1 + 80 | 0;
   if ($197_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $197_1;
  }
  return $193_1 | 0;
 }
 
 function $240($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) - (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) | 0 | 0;
 }
 
 function $241($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $11_1 = 0, $240_1 = 0.0, $12_1 = 0, $15_1 = 0, $242_1 = 0.0, $26_1 = 0, $47_1 = 0, $245_1 = 0.0, $71_1 = 0, $249_1 = 0.0, $90_1 = 0, $252_1 = 0.0, $108_1 = 0, $111_1 = 0, $255_1 = 0.0, $121_1 = 0, $125_1 = 0, $134_1 = 0, $265_1 = 0.0, $156_1 = 0, $166_1 = 0, $228_1 = 0, $239_1 = 0, $238_1 = 0, $13_1 = 0, $14_1 = 0, $235_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11_1 = global$0 - 96 | 0;
  label$1 : {
   $238_1 = $11_1;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $238_1;
  }
  $12_1 = 0;
  $13_1 = 16;
  $14_1 = 3;
  $240_1 = +($12_1 | 0);
  $15_1 = -1;
  HEAP32[($11_1 + 88 | 0) >> 2] = $0_1;
  HEAP32[($11_1 + 84 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 80 | 0) >> 2] = $2_1;
  HEAP32[($11_1 + 76 | 0) >> 2] = $3_1;
  HEAP32[($11_1 + 72 | 0) >> 2] = $4_1;
  HEAP32[($11_1 + 68 | 0) >> 2] = $5_1;
  HEAP32[($11_1 + 64 | 0) >> 2] = $6_1;
  HEAP32[($11_1 + 60 | 0) >> 2] = $7_1;
  HEAP32[($11_1 + 56 | 0) >> 2] = $8_1;
  HEAP32[($11_1 + 44 | 0) >> 2] = $15_1;
  HEAP32[($11_1 + 40 | 0) >> 2] = $15_1;
  HEAPF64[($11_1 + 32 | 0) >> 3] = 1.0;
  $242_1 = +HEAPF64[((HEAP32[(HEAP32[((HEAP32[($11_1 + 84 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($11_1 + 80 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
  label$3 : {
   label$4 : {
    if (!(Math_abs($242_1) < 2147483648.0)) {
     break label$4
    }
    $26_1 = ~~$242_1;
    break label$3;
   }
   $26_1 = -2147483648;
  }
  HEAP32[($11_1 + 20 | 0) >> 2] = $26_1;
  HEAPF64[(HEAP32[($11_1 + 64 | 0) >> 2] | 0) >> 3] = $240_1;
  HEAPF64[(HEAP32[($11_1 + 68 | 0) >> 2] | 0) >> 3] = $240_1;
  HEAPF64[(HEAP32[($11_1 + 72 | 0) >> 2] | 0) >> 3] = $240_1;
  $492(HEAP32[($11_1 + 60 | 0) >> 2] | 0 | 0);
  $492(HEAP32[($11_1 + 56 | 0) >> 2] | 0 | 0);
  $263(HEAP32[($11_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 80 | 0) >> 2] | 0 | 0, $14_1 | 0) | 0;
  (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $490(HEAP32[($11_1 + 76 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 48 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1068(HEAP32[($11_1 + 48 | 0) >> 2] | 0 | 0, $13_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  label$5 : {
   label$6 : {
    if (!((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) == ($12_1 | 0) & 1 | 0)) {
     break label$6
    }
    $47_1 = 2;
    $28(5606 | 0, 4264 | 0, 3278 | 0, $47_1 | 0) | 0;
    HEAP32[($11_1 + 92 | 0) >> 2] = $47_1;
    break label$5;
   }
   $33(2 | 0, HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0);
   HEAP32[($11_1 + 52 | 0) >> 2] = 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($11_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$7
     }
     $245_1 = +HEAPF64[((HEAP32[(HEAP32[($11_1 + 76 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($11_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$9 : {
      label$10 : {
       if (!(Math_abs($245_1) < 2147483648.0)) {
        break label$10
       }
       $71_1 = ~~$245_1;
       break label$9;
      }
      $71_1 = -2147483648;
     }
     HEAP32[($11_1 + 12 | 0) >> 2] = $71_1;
     HEAPF64[($11_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[(HEAP32[((HEAP32[($11_1 + 84 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($11_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     $249_1 = +HEAPF64[((HEAP32[((HEAP32[($11_1 + 88 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$11 : {
      label$12 : {
       if (!(Math_abs($249_1) < 2147483648.0)) {
        break label$12
       }
       $90_1 = ~~$249_1;
       break label$11;
      }
      $90_1 = -2147483648;
     }
     label$13 : {
      label$14 : {
       if (!(($90_1 | 0) == (HEAP32[($11_1 + 80 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$14
       }
       $252_1 = +HEAPF64[((HEAP32[((HEAP32[($11_1 + 88 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       label$15 : {
        label$16 : {
         if (!(Math_abs($252_1) < 2147483648.0)) {
          break label$16
         }
         $108_1 = ~~$252_1;
         break label$15;
        }
        $108_1 = -2147483648;
       }
       $111_1 = $108_1;
       break label$13;
      }
      $255_1 = +HEAPF64[((HEAP32[((HEAP32[($11_1 + 88 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$17 : {
       label$18 : {
        if (!(Math_abs($255_1) < 2147483648.0)) {
         break label$18
        }
        $121_1 = ~~$255_1;
        break label$17;
       }
       $121_1 = -2147483648;
      }
      $111_1 = $121_1;
     }
     HEAP32[($11_1 + 28 | 0) >> 2] = $111_1;
     $125_1 = HEAP32[($11_1 + 72 | 0) >> 2] | 0;
     HEAPF64[$125_1 >> 3] = +HEAPF64[$125_1 >> 3] + +HEAPF64[($11_1 + 32 | 0) >> 3];
     label$19 : {
      label$20 : {
       if (!((HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0) == (HEAP32[($11_1 + 80 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$20
       }
       $134_1 = HEAP32[($11_1 + 64 | 0) >> 2] | 0;
       HEAPF64[$134_1 >> 3] = +HEAPF64[$134_1 >> 3] + +HEAPF64[($11_1 + 32 | 0) >> 3];
       HEAP32[((HEAP32[($11_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 52 | 0) >> 2] | 0) << 4 | 0) | 0) >> 2] = HEAP32[($11_1 + 20 | 0) >> 2] | 0;
       HEAPF64[(((HEAP32[($11_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 52 | 0) >> 2] | 0) << 4 | 0) | 0) + 8 | 0) >> 3] = +(0 | 0);
       break label$19;
      }
      $265_1 = +HEAPF64[((HEAP32[(HEAP32[((HEAP32[($11_1 + 84 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($11_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$21 : {
       label$22 : {
        if (!(Math_abs($265_1) < 2147483648.0)) {
         break label$22
        }
        $156_1 = ~~$265_1;
        break label$21;
       }
       $156_1 = -2147483648;
      }
      HEAP32[($11_1 + 24 | 0) >> 2] = $156_1;
      label$23 : {
       if (!((HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$23
       }
       $166_1 = HEAP32[($11_1 + 68 | 0) >> 2] | 0;
       HEAPF64[$166_1 >> 3] = +HEAPF64[$166_1 >> 3] + +HEAPF64[($11_1 + 32 | 0) >> 3];
      }
      HEAP32[((HEAP32[($11_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 52 | 0) >> 2] | 0) << 4 | 0) | 0) >> 2] = HEAP32[($11_1 + 24 | 0) >> 2] | 0;
      HEAPF64[(((HEAP32[($11_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 52 | 0) >> 2] | 0) << 4 | 0) | 0) + 8 | 0) >> 3] = +HEAPF64[($11_1 + 32 | 0) >> 3];
     }
     HEAP32[($11_1 + 52 | 0) >> 2] = (HEAP32[($11_1 + 52 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
   $1000(HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 48 | 0) >> 2] | 0 | 0, 16 | 0, 14 | 0);
   HEAP32[($11_1 + 52 | 0) >> 2] = 0;
   label$24 : {
    label$25 : while (1) {
     if (!((HEAP32[($11_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$24
     }
     HEAP32[($11_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[($11_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 52 | 0) >> 2] | 0) << 4 | 0) | 0) >> 2] | 0;
     label$26 : {
      label$27 : {
       if (!((HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0) != (HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$27
       }
       $493(HEAP32[($11_1 + 60 | 0) >> 2] | 0 | 0, +(+(HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0))) | 0;
       $493(HEAP32[($11_1 + 56 | 0) >> 2] | 0 | 0, +(+HEAPF64[(((HEAP32[($11_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 52 | 0) >> 2] | 0) << 4 | 0) | 0) + 8 | 0) >> 3])) | 0;
       HEAP32[($11_1 + 44 | 0) >> 2] = HEAP32[($11_1 + 24 | 0) >> 2] | 0;
       HEAP32[($11_1 + 40 | 0) >> 2] = (HEAP32[($11_1 + 40 | 0) >> 2] | 0) + 1 | 0;
       break label$26;
      }
      $228_1 = (HEAP32[(HEAP32[($11_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($11_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0;
      HEAPF64[$228_1 >> 3] = +HEAPF64[$228_1 >> 3] + +HEAPF64[(((HEAP32[($11_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($11_1 + 52 | 0) >> 2] | 0) << 4 | 0) | 0) + 8 | 0) >> 3];
     }
     HEAP32[($11_1 + 52 | 0) >> 2] = (HEAP32[($11_1 + 52 | 0) >> 2] | 0) + 1 | 0;
     continue label$25;
    };
   }
   $264(HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) | 0;
   $34(1 | 0);
   HEAP32[($11_1 + 92 | 0) >> 2] = 0;
  }
  $235_1 = HEAP32[($11_1 + 92 | 0) >> 2] | 0;
  label$28 : {
   $239_1 = $11_1 + 96 | 0;
   if ($239_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $239_1;
  }
  return $235_1 | 0;
 }
 
 function $242($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = +$3_1;
  $4_1 = +$4_1;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAPF64[($7_1 + 8 | 0) >> 3] = $3_1;
  HEAPF64[$7_1 >> 3] = $4_1;
  return +(+HEAPF64[$7_1 >> 3] - +HEAPF64[(((HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 24 | 0) >> 2] | 0, 24) | 0) + 16 | 0) >> 3] * +HEAPF64[($7_1 + 8 | 0) >> 3] / +HEAPF64[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 3]);
 }
 
 function $243($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $21_1 = 0, $43_1 = 0, $57_1 = 0, $180_1 = 0.0, $182_1 = 0.0, $102_1 = 0, $119_1 = 0, $132_1 = 0, $187_1 = 0.0, $150_1 = 0, $177_1 = 0, $176_1 = 0, $56_1 = 0, i64toi32_i32$1 = 0, $84_1 = 0, $95_1 = 0, $98_1 = 0, $185_1 = 0.0, $118_1 = 0, $186_1 = 0.0, $131_1 = 0, $173_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 128 | 0;
  label$1 : {
   $176_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $176_1;
  }
  HEAP32[($4_1 + 120 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 116 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $254(HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 100 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $249(HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 96 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $253(HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 92 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (HEAP32[($4_1 + 100 | 0) >> 2] | 0) {
     break label$4
    }
    HEAP32[($4_1 + 124 | 0) >> 2] = 0;
    break label$3;
   }
   label$5 : {
    if (!(($490(HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0) | 0 | 0) < (HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    $21_1 = 4;
    $28(5655 | 0, 4264 | 0, 3359 | 0, $21_1 | 0) | 0;
    HEAP32[($4_1 + 124 | 0) >> 2] = $21_1;
    break label$3;
   }
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $486($4_1 + 104 | 0 | 0, (HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
   label$6 : {
    if (!(HEAP32[($4_1 + 60 | 0) >> 2] | 0)) {
     break label$6
    }
    $28(4263 | 0, 4264 | 0, 3362 | 0, HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 124 | 0) >> 2] = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, $4_1 + 104 | 0 | 0);
   $43_1 = 0;
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $235(HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0, $43_1 | 0, $43_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 56 | 0) >> 2] = wasm2js_i32$1;
   label$7 : {
    if (!(HEAP32[($4_1 + 56 | 0) >> 2] | 0)) {
     break label$7
    }
    $28(4263 | 0, 4264 | 0, 3364 | 0, HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 124 | 0) >> 2] = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
    break label$3;
   }
   $56_1 = HEAP32[($4_1 + 120 | 0) >> 2] | 0;
   $539($4_1 + 40 | 0 | 0, 0 | 0);
   $57_1 = 8;
   HEAP32[(($4_1 + 8 | 0) + $57_1 | 0) >> 2] = HEAP32[(($4_1 + 40 | 0) + $57_1 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = i64toi32_i32$1;
   $541($56_1 | 0, $4_1 + 8 | 0 | 0, $4_1 + 64 | 0 | 0) | 0;
   $33(11 | 0, $4_1 + 64 | 0 | 0);
   HEAP32[($4_1 + 88 | 0) >> 2] = 0;
   label$8 : {
    label$9 : while (1) {
     if (!(((HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) >= (HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) ^ -1 | 0) & 1 | 0)) {
      break label$8
     }
     $84_1 = HEAP32[($4_1 + 120 | 0) >> 2] | 0;
     label$10 : {
      label$11 : {
       if (HEAP32[($4_1 + 64 | 0) >> 2] | 0) {
        break label$11
       }
       $180_1 = +(HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0);
       break label$10;
      }
      $180_1 = +HEAPF64[((HEAP32[(HEAP32[($4_1 + 80 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     }
     $182_1 = $180_1;
     $95_1 = $4_1 + 36 | 0;
     $98_1 = $4_1 + 32 | 0;
     label$12 : {
      label$13 : {
       if (!(Math_abs($182_1) < 2147483648.0)) {
        break label$13
       }
       $102_1 = ~~$182_1;
       break label$12;
      }
      $102_1 = -2147483648;
     }
     (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $258($84_1 | 0, $102_1 | 0, $95_1 | 0, $98_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
     label$14 : {
      if (!(HEAP32[($4_1 + 28 | 0) >> 2] | 0)) {
       break label$14
      }
      $28(4263 | 0, 4264 | 0, 3372 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($4_1 + 124 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
      break label$3;
     }
     $185_1 = +HEAPF64[((HEAP32[(HEAP32[($4_1 + 116 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     $118_1 = HEAP32[($4_1 + 104 | 0) >> 2] | 0;
     $119_1 = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
     HEAP32[($4_1 + 88 | 0) >> 2] = $119_1 + 1 | 0;
     HEAPF64[($118_1 + ($119_1 << 3 | 0) | 0) >> 3] = $185_1;
     $186_1 = +HEAPF64[((HEAP32[(HEAP32[($4_1 + 116 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     $131_1 = HEAP32[($4_1 + 104 | 0) >> 2] | 0;
     $132_1 = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
     HEAP32[($4_1 + 88 | 0) >> 2] = $132_1 + 1 | 0;
     HEAPF64[($131_1 + ($132_1 << 3 | 0) | 0) >> 3] = $186_1;
     HEAP32[($4_1 + 68 | 0) >> 2] = (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 1 | 0;
     continue label$9;
    };
   }
   $542($4_1 + 64 | 0 | 0);
   $34(1 | 0);
   $250(HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0);
   $187_1 = +$500(HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0);
   label$15 : {
    label$16 : {
     if (!(Math_abs($187_1) < 2147483648.0)) {
      break label$16
     }
     $150_1 = ~~$187_1;
     break label$15;
    }
    $150_1 = -2147483648;
   }
   HEAP32[($4_1 + 100 | 0) >> 2] = $150_1 + 1 | 0;
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $52(HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0, $4_1 + 104 | 0 | 0, HEAP32[($4_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
   label$17 : {
    if (!(HEAP32[($4_1 + 24 | 0) >> 2] | 0)) {
     break label$17
    }
    $28(4263 | 0, 4264 | 0, 3384 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 124 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
    break label$3;
   }
   $488($4_1 + 104 | 0 | 0);
   $34(1 | 0);
   HEAP32[($4_1 + 124 | 0) >> 2] = 0;
  }
  $173_1 = HEAP32[($4_1 + 124 | 0) >> 2] | 0;
  label$18 : {
   $177_1 = $4_1 + 128 | 0;
   if ($177_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $177_1;
  }
  return $173_1 | 0;
 }
 
 function $244($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $566_1 = 0.0, $14_1 = 0, $27_1 = 0, $34_1 = 0, $126_1 = 0, $548_1 = 0.0, $194_1 = 0, $199_1 = 0, $211_1 = 0, $567_1 = 0.0, $273_1 = 0, $283_1 = 0, $296_1 = 0, $304_1 = 0, $309_1 = 0, $582_1 = 0.0, $329_1 = 0, $362_1 = 0, $370_1 = 0, $375_1 = 0, $424_1 = 0, $437_1 = 0, $494_1 = 0, $612_1 = 0.0, $518_1 = 0, $523_1 = 0, $543_1 = 0, $542_1 = 0, $565_1 = 0.0, $320_1 = 0, $611_1 = 0.0, $509_1 = 0, $539_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $6_1 = global$0 - 304 | 0;
  label$1 : {
   $542_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $542_1;
  }
  HEAP32[($6_1 + 296 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 292 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 288 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 284 | 0) >> 2] = $3_1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $254(HEAP32[($6_1 + 296 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 272 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $249(HEAP32[($6_1 + 296 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 268 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($6_1 + 232 | 0) >> 2] = 0;
  label$3 : {
   label$4 : {
    if (!($253(HEAP32[($6_1 + 296 | 0) >> 2] | 0 | 0) | 0)) {
     break label$4
    }
    $14_1 = 12;
    $28(5704 | 0, 4264 | 0, 3435 | 0, $14_1 | 0) | 0;
    HEAP32[($6_1 + 300 | 0) >> 2] = $14_1;
    break label$3;
   }
   label$5 : {
    if (!(($490(HEAP32[($6_1 + 292 | 0) >> 2] | 0 | 0) | 0 | 0) < ($249(HEAP32[($6_1 + 296 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
     break label$5
    }
    $27_1 = 4;
    $28(5769 | 0, 4264 | 0, 3438 | 0, $27_1 | 0) | 0;
    HEAP32[($6_1 + 300 | 0) >> 2] = $27_1;
    break label$3;
   }
   label$6 : {
    if (!($510(HEAP32[($6_1 + 292 | 0) >> 2] | 0 | 0, +(+(0 | 0))) | 0)) {
     break label$6
    }
    $34_1 = 4;
    $28(5826 | 0, 4264 | 0, 3441 | 0, $34_1 | 0) | 0;
    HEAP32[($6_1 + 300 | 0) >> 2] = $34_1;
    break label$3;
   }
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $486($6_1 + 216 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 132 | 0) >> 2] = wasm2js_i32$1;
   label$7 : {
    if (!(HEAP32[($6_1 + 132 | 0) >> 2] | 0)) {
     break label$7
    }
    $28(4263 | 0, 4264 | 0, 3445 | 0, HEAP32[($6_1 + 132 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 300 | 0) >> 2] = HEAP32[($6_1 + 132 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, $6_1 + 216 | 0 | 0);
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $486($6_1 + 200 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 128 | 0) >> 2] = wasm2js_i32$1;
   label$8 : {
    if (!(HEAP32[($6_1 + 128 | 0) >> 2] | 0)) {
     break label$8
    }
    $28(4263 | 0, 4264 | 0, 3446 | 0, HEAP32[($6_1 + 128 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 300 | 0) >> 2] = HEAP32[($6_1 + 128 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, $6_1 + 200 | 0 | 0);
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $486($6_1 + 184 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 124 | 0) >> 2] = wasm2js_i32$1;
   label$9 : {
    if (!(HEAP32[($6_1 + 124 | 0) >> 2] | 0)) {
     break label$9
    }
    $28(4263 | 0, 4264 | 0, 3447 | 0, HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 300 | 0) >> 2] = HEAP32[($6_1 + 124 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, $6_1 + 184 | 0 | 0);
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $486($6_1 + 168 | 0 | 0, HEAP32[($6_1 + 272 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 120 | 0) >> 2] = wasm2js_i32$1;
   label$10 : {
    if (!(HEAP32[($6_1 + 120 | 0) >> 2] | 0)) {
     break label$10
    }
    $28(4263 | 0, 4264 | 0, 3448 | 0, HEAP32[($6_1 + 120 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 300 | 0) >> 2] = HEAP32[($6_1 + 120 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, $6_1 + 168 | 0 | 0);
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $494(HEAP32[($6_1 + 288 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 272 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 116 | 0) >> 2] = wasm2js_i32$1;
   label$11 : {
    if (!(HEAP32[($6_1 + 116 | 0) >> 2] | 0)) {
     break label$11
    }
    $28(4263 | 0, 4264 | 0, 3449 | 0, HEAP32[($6_1 + 116 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 300 | 0) >> 2] = HEAP32[($6_1 + 116 | 0) >> 2] | 0;
    break label$3;
   }
   HEAP32[($6_1 + 140 | 0) >> 2] = HEAP32[($6_1 + 272 | 0) >> 2] | 0;
   HEAP32[($6_1 + 136 | 0) >> 2] = HEAP32[($6_1 + 272 | 0) >> 2] | 0;
   HEAP32[($6_1 + 160 | 0) >> 2] = HEAP32[($6_1 + 292 | 0) >> 2] | 0;
   (wasm2js_i32$0 = $6_1, wasm2js_f64$0 = 2.0 * +$505(HEAP32[($6_1 + 292 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 144 | 0) >> 3] = wasm2js_f64$0;
   HEAP32[($6_1 + 156 | 0) >> 2] = HEAP32[($6_1 + 288 | 0) >> 2] | 0;
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $1068(HEAP32[($6_1 + 272 | 0) >> 2] | 0 | 0, 24 | 0) | 0), HEAP32[(wasm2js_i32$0 + 152 | 0) >> 2] = wasm2js_i32$1;
   label$12 : {
    if (!((HEAP32[($6_1 + 152 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$12
    }
    $126_1 = 2;
    $28(5606 | 0, 4264 | 0, 3459 | 0, $126_1 | 0) | 0;
    HEAP32[($6_1 + 300 | 0) >> 2] = $126_1;
    break label$3;
   }
   $33(2 | 0, HEAP32[($6_1 + 152 | 0) >> 2] | 0 | 0);
   HEAP32[($6_1 + 280 | 0) >> 2] = 0;
   label$13 : {
    label$14 : while (1) {
     if (!((HEAP32[($6_1 + 280 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 272 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$13
     }
     $548_1 = +(0 | 0);
     HEAPF64[((HEAP32[(HEAP32[($6_1 + 156 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 280 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($6_1 + 280 | 0) >> 2] | 0 | 0);
     HEAP32[((HEAP32[($6_1 + 152 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 280 | 0) >> 2] | 0, 24) | 0) >> 2] = 1;
     HEAPF64[(((HEAP32[($6_1 + 152 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 280 | 0) >> 2] | 0, 24) | 0) + 8 | 0) >> 3] = $548_1;
     HEAPF64[(((HEAP32[($6_1 + 152 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 280 | 0) >> 2] | 0, 24) | 0) + 16 | 0) >> 3] = $548_1;
     HEAP32[($6_1 + 280 | 0) >> 2] = (HEAP32[($6_1 + 280 | 0) >> 2] | 0) + 1 | 0;
     continue label$14;
    };
   }
   HEAP32[($6_1 + 280 | 0) >> 2] = 0;
   label$15 : {
    label$16 : while (1) {
     if (!((HEAP32[($6_1 + 280 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 268 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$15
     }
     HEAPF64[($6_1 + 104 | 0) >> 3] = 1.0;
     $258(HEAP32[($6_1 + 296 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 280 | 0) >> 2] | 0 | 0, $6_1 + 264 | 0 | 0, $6_1 + 260 | 0 | 0) | 0;
     HEAPF64[($6_1 + 104 | 0) >> 3] = +HEAPF64[((HEAP32[(HEAP32[($6_1 + 292 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 280 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     $194_1 = (HEAP32[($6_1 + 152 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 264 | 0) >> 2] | 0, 24) | 0;
     HEAPF64[($194_1 + 16 | 0) >> 3] = +HEAPF64[($194_1 + 16 | 0) >> 3] + +HEAPF64[($6_1 + 104 | 0) >> 3];
     $199_1 = (HEAP32[($6_1 + 152 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 260 | 0) >> 2] | 0, 24) | 0;
     HEAPF64[($199_1 + 16 | 0) >> 3] = +HEAPF64[($199_1 + 16 | 0) >> 3] + +HEAPF64[($6_1 + 104 | 0) >> 3];
     label$17 : {
      if (!((HEAP32[($6_1 + 264 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 260 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$17
      }
      $211_1 = (HEAP32[($6_1 + 152 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 264 | 0) >> 2] | 0, 24) | 0;
      HEAPF64[($211_1 + 8 | 0) >> 3] = +HEAPF64[($211_1 + 8 | 0) >> 3] + 2.0 * +HEAPF64[($6_1 + 104 | 0) >> 3];
     }
     HEAP32[($6_1 + 280 | 0) >> 2] = (HEAP32[($6_1 + 280 | 0) >> 2] | 0) + 1 | 0;
     continue label$16;
    };
   }
   (wasm2js_i32$0 = $6_1, wasm2js_f64$0 = +$237($6_1 + 136 | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 248 | 0) >> 3] = wasm2js_f64$0;
   HEAP32[($6_1 + 236 | 0) >> 2] = 1;
   label$18 : while (1) {
    HEAP32[($6_1 + 100 | 0) >> 2] = HEAP32[($6_1 + 136 | 0) >> 2] | 0;
    HEAPF64[($6_1 + 240 | 0) >> 3] = +HEAPF64[($6_1 + 248 | 0) >> 3];
    HEAP32[($6_1 + 232 | 0) >> 2] = 0;
    (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $513($6_1 + 168 | 0 | 0, HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 96 | 0) >> 2] = wasm2js_i32$1;
    label$19 : {
     if (!(HEAP32[($6_1 + 96 | 0) >> 2] | 0)) {
      break label$19
     }
     $28(4263 | 0, 4264 | 0, 3494 | 0, HEAP32[($6_1 + 96 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($6_1 + 300 | 0) >> 2] = HEAP32[($6_1 + 96 | 0) >> 2] | 0;
     break label$3;
    }
    HEAP32[($6_1 + 280 | 0) >> 2] = 0;
    label$20 : {
     label$21 : while (1) {
      if (!((HEAP32[($6_1 + 280 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 272 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$20
      }
      $565_1 = -1.0;
      $566_1 = +(0 | 0);
      HEAPF64[($6_1 + 88 | 0) >> 3] = $566_1;
      HEAPF64[($6_1 + 80 | 0) >> 3] = $566_1;
      HEAPF64[($6_1 + 72 | 0) >> 3] = $566_1;
      HEAPF64[($6_1 + 64 | 0) >> 3] = $566_1;
      $241(HEAP32[($6_1 + 296 | 0) >> 2] | 0 | 0, $6_1 + 136 | 0 | 0, HEAP32[($6_1 + 280 | 0) >> 2] | 0 | 0, $6_1 + 184 | 0 | 0, $6_1 + 88 | 0 | 0, $6_1 + 80 | 0 | 0, $6_1 + 72 | 0 | 0, $6_1 + 216 | 0 | 0, $6_1 + 200 | 0 | 0) | 0;
      $567_1 = +HEAPF64[((HEAP32[(HEAP32[($6_1 + 156 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 280 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$22 : {
       label$23 : {
        if (!(Math_abs($567_1) < 2147483648.0)) {
         break label$23
        }
        $273_1 = ~~$567_1;
        break label$22;
       }
       $273_1 = -2147483648;
      }
      HEAP32[($6_1 + 52 | 0) >> 2] = $273_1;
      HEAP32[($6_1 + 48 | 0) >> 2] = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
      $496(HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 280 | 0) >> 2] | 0 | 0, +$565_1);
      $283_1 = (HEAP32[($6_1 + 152 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 52 | 0) >> 2] | 0, 24) | 0;
      HEAP32[$283_1 >> 2] = (HEAP32[$283_1 >> 2] | 0) + -1 | 0;
      label$24 : {
       if (HEAP32[((HEAP32[($6_1 + 152 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 52 | 0) >> 2] | 0, 24) | 0) >> 2] | 0) {
        break label$24
       }
       HEAP32[($6_1 + 136 | 0) >> 2] = (HEAP32[($6_1 + 136 | 0) >> 2] | 0) + -1 | 0;
      }
      $296_1 = 0;
      $304_1 = (HEAP32[($6_1 + 152 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 52 | 0) >> 2] | 0, 24) | 0;
      HEAPF64[($304_1 + 16 | 0) >> 3] = +HEAPF64[($304_1 + 16 | 0) >> 3] - +HEAPF64[($6_1 + 88 | 0) >> 3];
      $309_1 = (HEAP32[($6_1 + 152 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 52 | 0) >> 2] | 0, 24) | 0;
      HEAPF64[($309_1 + 8 | 0) >> 3] = +HEAPF64[($309_1 + 8 | 0) >> 3] - (2.0 * +HEAPF64[($6_1 + 80 | 0) >> 3] + +HEAPF64[($6_1 + 72 | 0) >> 3]);
      HEAPF64[($6_1 + 64 | 0) >> 3] = +($296_1 | 0);
      HEAPF64[($6_1 + 56 | 0) >> 3] = +HEAPF64[($6_1 + 80 | 0) >> 3];
      (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $490($6_1 + 216 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 44 | 0) >> 2] = wasm2js_i32$1;
      HEAP32[($6_1 + 276 | 0) >> 2] = $296_1;
      label$25 : {
       label$26 : while (1) {
        if (!((HEAP32[($6_1 + 276 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$25
        }
        $320_1 = $6_1 + 136 | 0;
        $582_1 = +HEAPF64[((HEAP32[($6_1 + 216 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 276 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$27 : {
         label$28 : {
          if (!(Math_abs($582_1) < 2147483648.0)) {
           break label$28
          }
          $329_1 = ~~$582_1;
          break label$27;
         }
         $329_1 = -2147483648;
        }
        HEAP32[($6_1 + 40 | 0) >> 2] = $329_1;
        HEAPF64[($6_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 276 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        (wasm2js_i32$0 = $6_1, wasm2js_f64$0 = +$242($320_1 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 280 | 0) >> 2] | 0 | 0, +(+HEAPF64[($6_1 + 88 | 0) >> 3]), +(+HEAPF64[($6_1 + 32 | 0) >> 3]))), HEAPF64[(wasm2js_i32$0 + 24 | 0) >> 3] = wasm2js_f64$0;
        label$29 : {
         if (!(+HEAPF64[($6_1 + 24 | 0) >> 3] > +HEAPF64[($6_1 + 64 | 0) >> 3] & 1 | 0)) {
          break label$29
         }
         HEAP32[($6_1 + 48 | 0) >> 2] = HEAP32[($6_1 + 40 | 0) >> 2] | 0;
         HEAPF64[($6_1 + 64 | 0) >> 3] = +HEAPF64[($6_1 + 24 | 0) >> 3];
         HEAPF64[($6_1 + 56 | 0) >> 3] = +HEAPF64[($6_1 + 32 | 0) >> 3];
        }
        HEAP32[($6_1 + 276 | 0) >> 2] = (HEAP32[($6_1 + 276 | 0) >> 2] | 0) + 1 | 0;
        continue label$26;
       };
      }
      $496(HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 280 | 0) >> 2] | 0 | 0, +(+(HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0)));
      label$30 : {
       if (HEAP32[((HEAP32[($6_1 + 152 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 48 | 0) >> 2] | 0, 24) | 0) >> 2] | 0) {
        break label$30
       }
       HEAP32[($6_1 + 136 | 0) >> 2] = (HEAP32[($6_1 + 136 | 0) >> 2] | 0) + 1 | 0;
      }
      $362_1 = (HEAP32[($6_1 + 152 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 48 | 0) >> 2] | 0, 24) | 0;
      HEAP32[$362_1 >> 2] = (HEAP32[$362_1 >> 2] | 0) + 1 | 0;
      $370_1 = (HEAP32[($6_1 + 152 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 48 | 0) >> 2] | 0, 24) | 0;
      HEAPF64[($370_1 + 16 | 0) >> 3] = +HEAPF64[($370_1 + 16 | 0) >> 3] + +HEAPF64[($6_1 + 88 | 0) >> 3];
      $375_1 = (HEAP32[($6_1 + 152 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 48 | 0) >> 2] | 0, 24) | 0;
      HEAPF64[($375_1 + 8 | 0) >> 3] = +HEAPF64[($375_1 + 8 | 0) >> 3] + (2.0 * +HEAPF64[($6_1 + 56 | 0) >> 3] + +HEAPF64[($6_1 + 72 | 0) >> 3]);
      label$31 : {
       if (!((HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0) != (HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$31
       }
       HEAP32[($6_1 + 232 | 0) >> 2] = (HEAP32[($6_1 + 232 | 0) >> 2] | 0) + 1 | 0;
      }
      HEAP32[($6_1 + 280 | 0) >> 2] = (HEAP32[($6_1 + 280 | 0) >> 2] | 0) + 1 | 0;
      continue label$21;
     };
    }
    (wasm2js_i32$0 = $6_1, wasm2js_f64$0 = +$237($6_1 + 136 | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 248 | 0) >> 3] = wasm2js_f64$0;
    label$32 : {
     label$33 : {
      label$34 : {
       if (!(HEAP32[($6_1 + 232 | 0) >> 2] | 0)) {
        break label$34
       }
       if (!(+HEAPF64[($6_1 + 248 | 0) >> 3] > +HEAPF64[($6_1 + 240 | 0) >> 3] & 1 | 0)) {
        break label$34
       }
       HEAP32[($6_1 + 236 | 0) >> 2] = (HEAP32[($6_1 + 236 | 0) >> 2] | 0) + 1 | 0;
       break label$33;
      }
      (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $513(HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0, $6_1 + 168 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
      label$35 : {
       if (!(HEAP32[($6_1 + 20 | 0) >> 2] | 0)) {
        break label$35
       }
       $28(4263 | 0, 4264 | 0, 3571 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($6_1 + 300 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
       break label$3;
      }
      HEAP32[($6_1 + 136 | 0) >> 2] = HEAP32[($6_1 + 100 | 0) >> 2] | 0;
      break label$32;
     }
     label$36 : {
      if (!((HEAP32[(0 + 11876 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$36
      }
      label$37 : {
       if (!($265(0 | 0) | 0)) {
        break label$37
       }
       HEAP32[($6_1 + 300 | 0) >> 2] = 13;
       break label$3;
      }
     }
     $424_1 = 0;
     label$38 : {
      if (!(HEAP32[($6_1 + 232 | 0) >> 2] | 0)) {
       break label$38
      }
      $424_1 = +HEAPF64[($6_1 + 248 | 0) >> 3] > +HEAPF64[($6_1 + 240 | 0) >> 3];
     }
     if ($424_1 & 1 | 0) {
      continue label$18
     }
    }
    break label$18;
   };
   label$39 : {
    if (!((HEAP32[($6_1 + 284 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$39
    }
    HEAPF64[(HEAP32[($6_1 + 284 | 0) >> 2] | 0) >> 3] = +HEAPF64[($6_1 + 248 | 0) >> 3];
   }
   $437_1 = 0;
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $235(HEAP32[($6_1 + 288 | 0) >> 2] | 0 | 0, $437_1 | 0, $437_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
   label$40 : {
    if (!(HEAP32[($6_1 + 16 | 0) >> 2] | 0)) {
     break label$40
    }
    $28(4263 | 0, 4264 | 0, 3586 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 300 | 0) >> 2] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
    break label$3;
   }
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $513($6_1 + 168 | 0 | 0, HEAP32[($6_1 + 288 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
   label$41 : {
    if (!(HEAP32[($6_1 + 12 | 0) >> 2] | 0)) {
     break label$41
    }
    $28(4263 | 0, 4264 | 0, 3592 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 300 | 0) >> 2] = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    break label$3;
   }
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $243(HEAP32[($6_1 + 296 | 0) >> 2] | 0 | 0, $6_1 + 168 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
   label$42 : {
    if (!(HEAP32[($6_1 + 8 | 0) >> 2] | 0)) {
     break label$42
    }
    $28(4263 | 0, 4264 | 0, 3593 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 300 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    break label$3;
   }
   $488($6_1 + 168 | 0 | 0);
   $34(1 | 0);
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $239(HEAP32[($6_1 + 296 | 0) >> 2] | 0 | 0, $6_1 + 184 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
   label$43 : {
    if (!(HEAP32[($6_1 + 4 | 0) >> 2] | 0)) {
     break label$43
    }
    $28(4263 | 0, 4264 | 0, 3600 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 300 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
    break label$3;
   }
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $513($6_1 + 200 | 0 | 0, HEAP32[($6_1 + 292 | 0) >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   label$44 : {
    if (!(HEAP32[$6_1 >> 2] | 0)) {
     break label$44
    }
    $28(4263 | 0, 4264 | 0, 3603 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 300 | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
    break label$3;
   }
   $494_1 = 0;
   $498(HEAP32[($6_1 + 292 | 0) >> 2] | 0 | 0, +(+($494_1 | 0)));
   HEAP32[($6_1 + 280 | 0) >> 2] = $494_1;
   label$45 : {
    label$46 : while (1) {
     if (!((HEAP32[($6_1 + 280 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 268 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$45
     }
     $611_1 = +HEAPF64[((HEAP32[($6_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 280 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     $509_1 = HEAP32[(HEAP32[($6_1 + 292 | 0) >> 2] | 0) >> 2] | 0;
     $612_1 = +HEAPF64[((HEAP32[($6_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 280 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$47 : {
      label$48 : {
       if (!(Math_abs($612_1) < 2147483648.0)) {
        break label$48
       }
       $518_1 = ~~$612_1;
       break label$47;
      }
      $518_1 = -2147483648;
     }
     $523_1 = $509_1 + ($518_1 << 3 | 0) | 0;
     HEAPF64[$523_1 >> 3] = +HEAPF64[$523_1 >> 3] + $611_1;
     HEAP32[($6_1 + 280 | 0) >> 2] = (HEAP32[($6_1 + 280 | 0) >> 2] | 0) + 1 | 0;
     continue label$46;
    };
   }
   $264(HEAP32[($6_1 + 152 | 0) >> 2] | 0 | 0) | 0;
   $488($6_1 + 216 | 0 | 0);
   $488($6_1 + 200 | 0 | 0);
   $488($6_1 + 184 | 0 | 0);
   $34(4 | 0);
   HEAP32[($6_1 + 300 | 0) >> 2] = 0;
  }
  $539_1 = HEAP32[($6_1 + 300 | 0) >> 2] | 0;
  label$49 : {
   $543_1 = $6_1 + 304 | 0;
   if ($543_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $543_1;
  }
  return $539_1 | 0;
 }
 
 function $245($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $418_1 = 0.0, $424_1 = 0.0, $227_1 = 0, $417_1 = 0, $416_1 = 0, $218_1 = 0, $413_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 288 | 0;
  label$1 : {
   $416_1 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $416_1;
  }
  $418_1 = -1.0;
  HEAP32[($7_1 + 280 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 276 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 272 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 268 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 264 | 0) >> 2] = $4_1;
  HEAPF64[($7_1 + 120 | 0) >> 3] = $418_1;
  HEAPF64[($7_1 + 112 | 0) >> 3] = $418_1;
  HEAP32[($7_1 + 104 | 0) >> 2] = 1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $254(HEAP32[($7_1 + 280 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 100 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $251($7_1 + 176 | 0 | 0, HEAP32[($7_1 + 280 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 96 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!(HEAP32[($7_1 + 96 | 0) >> 2] | 0)) {
     break label$4
    }
    $28(4263 | 0, 4264 | 0, 3671 | 0, HEAP32[($7_1 + 96 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($7_1 + 284 | 0) >> 2] = HEAP32[($7_1 + 96 | 0) >> 2] | 0;
    break label$3;
   }
   $33(6 | 0, $7_1 + 176 | 0 | 0);
   label$5 : {
    label$6 : {
     if (!((HEAP32[($7_1 + 276 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$6
     }
     (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $504($7_1 + 160 | 0 | 0, HEAP32[($7_1 + 276 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 92 | 0) >> 2] = wasm2js_i32$1;
     label$7 : {
      if (!(HEAP32[($7_1 + 92 | 0) >> 2] | 0)) {
       break label$7
      }
      $28(4263 | 0, 4264 | 0, 3675 | 0, HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($7_1 + 284 | 0) >> 2] = HEAP32[($7_1 + 92 | 0) >> 2] | 0;
      break label$3;
     }
     $33(1 | 0, $7_1 + 160 | 0 | 0);
     break label$5;
    }
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $486($7_1 + 160 | 0 | 0, $249($7_1 + 176 | 0 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 88 | 0) >> 2] = wasm2js_i32$1;
    label$8 : {
     if (!(HEAP32[($7_1 + 88 | 0) >> 2] | 0)) {
      break label$8
     }
     $28(4263 | 0, 4264 | 0, 3678 | 0, HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 284 | 0) >> 2] = HEAP32[($7_1 + 88 | 0) >> 2] | 0;
     break label$3;
    }
    $33(1 | 0, $7_1 + 160 | 0 | 0);
    $498($7_1 + 160 | 0 | 0, +(1.0));
   }
   (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $486($7_1 + 144 | 0 | 0, HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 84 | 0) >> 2] = wasm2js_i32$1;
   label$9 : {
    if (!(HEAP32[($7_1 + 84 | 0) >> 2] | 0)) {
     break label$9
    }
    $28(4263 | 0, 4264 | 0, 3682 | 0, HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($7_1 + 284 | 0) >> 2] = HEAP32[($7_1 + 84 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, $7_1 + 144 | 0 | 0);
   (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $486($7_1 + 128 | 0 | 0, HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 80 | 0) >> 2] = wasm2js_i32$1;
   label$10 : {
    if (!(HEAP32[($7_1 + 80 | 0) >> 2] | 0)) {
     break label$10
    }
    $28(4263 | 0, 4264 | 0, 3683 | 0, HEAP32[($7_1 + 80 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($7_1 + 284 | 0) >> 2] = HEAP32[($7_1 + 80 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, $7_1 + 128 | 0 | 0);
   label$11 : {
    label$12 : {
     if ((HEAP32[($7_1 + 268 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$12
     }
     if (!((HEAP32[($7_1 + 272 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$11
     }
    }
    HEAP32[($7_1 + 108 | 0) >> 2] = 0;
    label$13 : {
     label$14 : while (1) {
      if (!((HEAP32[($7_1 + 108 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$13
      }
      HEAPF64[((HEAP32[($7_1 + 128 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($7_1 + 108 | 0) >> 2] | 0 | 0);
      HEAP32[($7_1 + 108 | 0) >> 2] = (HEAP32[($7_1 + 108 | 0) >> 2] | 0) + 1 | 0;
      continue label$14;
     };
    }
   }
   label$15 : {
    if (!((HEAP32[($7_1 + 268 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$15
    }
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $20(HEAP32[($7_1 + 268 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 76 | 0) >> 2] = wasm2js_i32$1;
    label$16 : {
     if (!(HEAP32[($7_1 + 76 | 0) >> 2] | 0)) {
      break label$16
     }
     $28(4263 | 0, 4264 | 0, 3693 | 0, HEAP32[($7_1 + 76 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 284 | 0) >> 2] = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
     break label$3;
    }
   }
   label$17 : {
    if (!((HEAP32[($7_1 + 264 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$17
    }
    $492(HEAP32[($7_1 + 264 | 0) >> 2] | 0 | 0);
   }
   label$18 : while (1) {
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $254($7_1 + 176 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 72 | 0) >> 2] = wasm2js_i32$1;
    HEAPF64[($7_1 + 120 | 0) >> 3] = +HEAPF64[($7_1 + 112 | 0) >> 3];
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $244($7_1 + 176 | 0 | 0, $7_1 + 160 | 0 | 0, $7_1 + 144 | 0 | 0, $7_1 + 112 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 68 | 0) >> 2] = wasm2js_i32$1;
    label$19 : {
     if (!(HEAP32[($7_1 + 68 | 0) >> 2] | 0)) {
      break label$19
     }
     $28(4263 | 0, 4264 | 0, 3705 | 0, HEAP32[($7_1 + 68 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 284 | 0) >> 2] = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
     break label$3;
    }
    label$20 : {
     label$21 : {
      label$22 : {
       if (($254($7_1 + 176 | 0 | 0) | 0 | 0) == (HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0) {
        break label$22
       }
       if (!(+HEAPF64[($7_1 + 112 | 0) >> 3] < +HEAPF64[($7_1 + 120 | 0) >> 3] & 1 | 0)) {
        break label$21
       }
      }
      break label$20;
     }
     label$23 : {
      label$24 : {
       if ((HEAP32[($7_1 + 268 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
        break label$24
       }
       if (!((HEAP32[($7_1 + 272 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$23
       }
      }
      HEAP32[($7_1 + 108 | 0) >> 2] = 0;
      label$25 : {
       label$26 : while (1) {
        if (!((HEAP32[($7_1 + 108 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$25
        }
        $218_1 = HEAP32[($7_1 + 144 | 0) >> 2] | 0;
        $424_1 = +HEAPF64[((HEAP32[($7_1 + 128 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$27 : {
         label$28 : {
          if (!(Math_abs($424_1) < 2147483648.0)) {
           break label$28
          }
          $227_1 = ~~$424_1;
          break label$27;
         }
         $227_1 = -2147483648;
        }
        HEAPF64[((HEAP32[($7_1 + 128 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($218_1 + ($227_1 << 3 | 0) | 0) >> 3];
        HEAP32[($7_1 + 108 | 0) >> 2] = (HEAP32[($7_1 + 108 | 0) >> 2] | 0) + 1 | 0;
        continue label$26;
       };
      }
     }
     label$29 : {
      if (!((HEAP32[($7_1 + 264 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$29
      }
      (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $493(HEAP32[($7_1 + 264 | 0) >> 2] | 0 | 0, +(+HEAPF64[($7_1 + 112 | 0) >> 3])) | 0), HEAP32[(wasm2js_i32$0 + 64 | 0) >> 2] = wasm2js_i32$1;
      label$30 : {
       if (!(HEAP32[($7_1 + 64 | 0) >> 2] | 0)) {
        break label$30
       }
       $28(4263 | 0, 4264 | 0, 3721 | 0, HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($7_1 + 284 | 0) >> 2] = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
       break label$3;
      }
     }
     label$31 : {
      if (!((HEAP32[($7_1 + 268 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$31
      }
      (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $23(HEAP32[($7_1 + 268 | 0) >> 2] | 0 | 0, 1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
      label$32 : {
       if (!(HEAP32[($7_1 + 60 | 0) >> 2] | 0)) {
        break label$32
       }
       $28(4263 | 0, 4264 | 0, 3727 | 0, HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($7_1 + 284 | 0) >> 2] = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
       break label$3;
      }
      (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $25(HEAP32[($7_1 + 268 | 0) >> 2] | 0 | 0, $7_1 + 128 | 0 | 0, (HEAP32[($7_1 + 104 | 0) >> 2] | 0) - 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 56 | 0) >> 2] = wasm2js_i32$1;
      label$33 : {
       if (!(HEAP32[($7_1 + 56 | 0) >> 2] | 0)) {
        break label$33
       }
       $28(4263 | 0, 4264 | 0, 3728 | 0, HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($7_1 + 284 | 0) >> 2] = HEAP32[($7_1 + 56 | 0) >> 2] | 0;
       break label$3;
      }
     }
     HEAP32[($7_1 + 104 | 0) >> 2] = (HEAP32[($7_1 + 104 | 0) >> 2] | 0) + 1 | 0;
     continue label$18;
    }
    break label$18;
   };
   label$34 : {
    if (!((HEAP32[($7_1 + 264 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$34
    }
    if ($490(HEAP32[($7_1 + 264 | 0) >> 2] | 0 | 0) | 0) {
     break label$34
    }
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $486($7_1 + 40 | 0 | 0, HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
    label$35 : {
     if (!(HEAP32[($7_1 + 24 | 0) >> 2] | 0)) {
      break label$35
     }
     $28(4263 | 0, 4264 | 0, 3744 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 284 | 0) >> 2] = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
     break label$3;
    }
    $33(1 | 0, $7_1 + 40 | 0 | 0);
    HEAP32[($7_1 + 28 | 0) >> 2] = 0;
    label$36 : {
     label$37 : while (1) {
      if (!((HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$36
      }
      HEAPF64[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0);
      HEAP32[($7_1 + 28 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 1 | 0;
      continue label$37;
     };
    }
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $229(HEAP32[($7_1 + 280 | 0) >> 2] | 0 | 0, $7_1 + 40 | 0 | 0, $7_1 + 32 | 0 | 0, HEAP32[($7_1 + 276 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
    label$38 : {
     if (!(HEAP32[($7_1 + 20 | 0) >> 2] | 0)) {
      break label$38
     }
     $28(4263 | 0, 4264 | 0, 3748 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 284 | 0) >> 2] = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
     break label$3;
    }
    $488($7_1 + 40 | 0 | 0);
    $34(1 | 0);
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $494(HEAP32[($7_1 + 264 | 0) >> 2] | 0 | 0, 1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
    label$39 : {
     if (!(HEAP32[($7_1 + 16 | 0) >> 2] | 0)) {
      break label$39
     }
     $28(4263 | 0, 4264 | 0, 3751 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 284 | 0) >> 2] = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
     break label$3;
    }
    HEAPF64[(HEAP32[(HEAP32[($7_1 + 264 | 0) >> 2] | 0) >> 2] | 0) >> 3] = +HEAPF64[($7_1 + 32 | 0) >> 3];
   }
   label$40 : {
    if (!((HEAP32[($7_1 + 272 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$40
    }
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $494(HEAP32[($7_1 + 272 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
    label$41 : {
     if (!(HEAP32[($7_1 + 12 | 0) >> 2] | 0)) {
      break label$41
     }
     $28(4263 | 0, 4264 | 0, 3757 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 284 | 0) >> 2] = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
     break label$3;
    }
    HEAP32[($7_1 + 108 | 0) >> 2] = 0;
    label$42 : {
     label$43 : while (1) {
      if (!((HEAP32[($7_1 + 108 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$42
      }
      HEAPF64[((HEAP32[(HEAP32[($7_1 + 272 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($7_1 + 128 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($7_1 + 108 | 0) >> 2] = (HEAP32[($7_1 + 108 | 0) >> 2] | 0) + 1 | 0;
      continue label$43;
     };
    }
   }
   $250($7_1 + 176 | 0 | 0);
   $488($7_1 + 144 | 0 | 0);
   $488($7_1 + 160 | 0 | 0);
   $488($7_1 + 128 | 0 | 0);
   $34(4 | 0);
   HEAP32[($7_1 + 284 | 0) >> 2] = 0;
  }
  $413_1 = HEAP32[($7_1 + 284 | 0) >> 2] | 0;
  label$44 : {
   $417_1 = $7_1 + 288 | 0;
   if ($417_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $417_1;
  }
  return $413_1 | 0;
 }
 
 function $246($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $14_1 = 0, $13_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $10_1 = $247(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  label$3 : {
   $14_1 = $5_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $10_1 | 0;
 }
 
 function $247($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $14_1 = 0, $20_1 = 0, $124_1 = 0, $157_1 = 0.0, $155_1 = 0, $154_1 = 0, $151_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 64 | 0;
  label$1 : {
   $154_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $154_1;
  }
  HEAP32[($6_1 + 56 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
     break label$4
    }
    $14_1 = 4;
    $28(5851 | 0, 5910 | 0, 117 | 0, $14_1 | 0) | 0;
    HEAP32[($6_1 + 60 | 0) >> 2] = $14_1;
    break label$3;
   }
   label$5 : {
    if ($16(+(+(HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0))) | 0) {
     break label$5
    }
    $20_1 = 4;
    $28(5944 | 0, 5910 | 0, 121 | 0, $20_1 | 0) | 0;
    HEAP32[($6_1 + 60 | 0) >> 2] = $20_1;
    break label$3;
   }
   HEAP32[(HEAP32[($6_1 + 56 | 0) >> 2] | 0) >> 2] = 0;
   HEAP32[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $486((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 8 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 40 | 0) >> 2] = wasm2js_i32$1;
   label$6 : {
    if (!(HEAP32[($6_1 + 40 | 0) >> 2] | 0)) {
     break label$6
    }
    $28(5994 | 0, 5910 | 0, 126 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[($6_1 + 40 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, (HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 8 | 0 | 0);
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $486((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 20 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
   label$7 : {
    if (!(HEAP32[($6_1 + 36 | 0) >> 2] | 0)) {
     break label$7
    }
    $28(5994 | 0, 5910 | 0, 127 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, (HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 20 | 0 | 0);
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $486((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 32 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
   label$8 : {
    if (!(HEAP32[($6_1 + 32 | 0) >> 2] | 0)) {
     break label$8
    }
    $28(5994 | 0, 5910 | 0, 128 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, (HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 32 | 0 | 0);
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $486((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 44 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
   label$9 : {
    if (!(HEAP32[($6_1 + 28 | 0) >> 2] | 0)) {
     break label$9
    }
    $28(5994 | 0, 5910 | 0, 129 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, (HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 44 | 0 | 0);
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $486((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 56 | 0 | 0, 1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
   label$10 : {
    if (!(HEAP32[($6_1 + 24 | 0) >> 2] | 0)) {
     break label$10
    }
    $28(5994 | 0, 5910 | 0, 130 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, (HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 56 | 0 | 0);
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $486((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 68 | 0 | 0, 1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
   label$11 : {
    if (!(HEAP32[($6_1 + 20 | 0) >> 2] | 0)) {
     break label$11
    }
    $28(5994 | 0, 5910 | 0, 131 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, (HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 68 | 0 | 0);
   $124_1 = 0;
   $157_1 = +($124_1 | 0);
   HEAPF64[(HEAP32[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) >> 3] = $157_1;
   HEAPF64[(HEAP32[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) >> 3] = $157_1;
   HEAP32[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 80 | 0) >> 2] = $124_1;
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $962(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
   label$12 : {
    if (!(HEAP32[($6_1 + 16 | 0) >> 2] | 0)) {
     break label$12
    }
    $28(5994 | 0, 5910 | 0, 138 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
    break label$3;
   }
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $248(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
   label$13 : {
    if (!(HEAP32[($6_1 + 12 | 0) >> 2] | 0)) {
     break label$13
    }
    $28(5994 | 0, 5910 | 0, 141 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    break label$3;
   }
   $34(6 | 0);
   HEAP32[($6_1 + 60 | 0) >> 2] = 0;
  }
  $151_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
  label$14 : {
   $155_1 = $6_1 + 64 | 0;
   if ($155_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $155_1;
  }
  return $151_1 | 0;
 }
 
 function $248($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $15_1 = 0, $104_1 = 0, $129_1 = 0, $128_1 = 0, $125_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 48 | 0;
  label$1 : {
   $128_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $128_1;
  }
  HEAP32[($5_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $249(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
     break label$4
    }
    $15_1 = 4;
    $28(6049 | 0, 5910 | 0, 366 | 0, $15_1 | 0) | 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = $15_1;
    break label$3;
   }
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $489((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 56 | 0 | 0, ((HEAP32[(HEAP32[($5_1 + 40 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0) + 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
   label$5 : {
    if (!(HEAP32[($5_1 + 20 | 0) >> 2] | 0)) {
     break label$5
    }
    $28(5994 | 0, 5910 | 0, 369 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    break label$3;
   }
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $489((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 68 | 0 | 0, ((HEAP32[(HEAP32[($5_1 + 40 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0) + 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
   label$6 : {
    if (!(HEAP32[($5_1 + 16 | 0) >> 2] | 0)) {
     break label$6
    }
    $28(5994 | 0, 5910 | 0, 370 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
    break label$3;
   }
   $494((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 56 | 0 | 0, ((HEAP32[(HEAP32[($5_1 + 40 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0) + 1 | 0 | 0) | 0;
   $494((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 68 | 0 | 0, ((HEAP32[(HEAP32[($5_1 + 40 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0) + 1 | 0 | 0) | 0;
   HEAP32[($5_1 + 24 | 0) >> 2] = (HEAP32[(HEAP32[($5_1 + 40 | 0) >> 2] | 0) >> 2] | 0) + 1 | 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) < (((HEAP32[(HEAP32[($5_1 + 40 | 0) >> 2] | 0) >> 2] | 0) + (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0) + 1 | 0 | 0) & 1 | 0)) {
      break label$7
     }
     HEAPF64[((HEAP32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0);
     HEAPF64[((HEAP32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 24 | 0) >> 2] = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
   $104_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
   HEAP32[$104_1 >> 2] = (HEAP32[$104_1 >> 2] | 0) + (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
   label$9 : {
    if (!((HEAP32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$9
    }
    (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $965(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
    label$10 : {
     if (!(HEAP32[($5_1 + 12 | 0) >> 2] | 0)) {
      break label$10
     }
     $28(5994 | 0, 5910 | 0, 382 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
     break label$3;
    }
   }
   HEAP32[($5_1 + 44 | 0) >> 2] = 0;
  }
  $125_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  label$11 : {
   $129_1 = $5_1 + 48 | 0;
   if ($129_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $129_1;
  }
  return $125_1 | 0;
 }
 
 function $249($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $490((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $250($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $34_1 = 0, $33_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $33_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $33_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if (!((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $963(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  }
  $488((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0);
  $488((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 20 | 0 | 0);
  $488((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 32 | 0 | 0);
  $488((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 44 | 0 | 0);
  $488((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 56 | 0 | 0);
  $488((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 68 | 0 | 0);
  label$4 : {
   $34_1 = $3_1 + 16 | 0;
   if ($34_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $34_1;
  }
  return;
 }
 
 function $251($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $127_1 = 0, $119_1 = 0, $130_1 = 0, $151_1 = 0, $150_1 = 0, $147_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 48 | 0;
  label$1 : {
   $150_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $150_1;
  }
  HEAP32[($4_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[(HEAP32[($4_1 + 40 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 36 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $504((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 8 | 0 | 0, (HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 8 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!(HEAP32[($4_1 + 32 | 0) >> 2] | 0)) {
     break label$4
    }
    $28(5994 | 0, 5910 | 0, 204 | 0, HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 44 | 0) >> 2] = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, (HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 8 | 0 | 0);
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $504((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 20 | 0 | 0, (HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 20 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
   label$5 : {
    if (!(HEAP32[($4_1 + 28 | 0) >> 2] | 0)) {
     break label$5
    }
    $28(5994 | 0, 5910 | 0, 206 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 44 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, (HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 20 | 0 | 0);
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $504((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 32 | 0 | 0, (HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 32 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
   label$6 : {
    if (!(HEAP32[($4_1 + 24 | 0) >> 2] | 0)) {
     break label$6
    }
    $28(5994 | 0, 5910 | 0, 208 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 44 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, (HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 32 | 0 | 0);
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $504((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 44 | 0 | 0, (HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 44 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
   label$7 : {
    if (!(HEAP32[($4_1 + 20 | 0) >> 2] | 0)) {
     break label$7
    }
    $28(5994 | 0, 5910 | 0, 210 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 44 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, (HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 44 | 0 | 0);
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $504((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 56 | 0 | 0, (HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 56 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
   label$8 : {
    if (!(HEAP32[($4_1 + 16 | 0) >> 2] | 0)) {
     break label$8
    }
    $28(5994 | 0, 5910 | 0, 212 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 44 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, (HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 56 | 0 | 0);
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $504((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 68 | 0 | 0, (HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 68 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
   label$9 : {
    if (!(HEAP32[($4_1 + 12 | 0) >> 2] | 0)) {
     break label$9
    }
    $28(5994 | 0, 5910 | 0, 214 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 44 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, (HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 68 | 0 | 0);
   $119_1 = 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = $119_1;
   label$10 : {
    label$11 : {
     if (!((HEAP32[((HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0 | 0) != ($119_1 | 0) & 1 | 0)) {
      break label$11
     }
     $127_1 = 1;
     $130_1 = $964(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0, $127_1 | 0, $127_1 | 0, $127_1 | 0) | 0;
     HEAP32[($4_1 + 8 | 0) >> 2] = $130_1;
     HEAP32[($4_1 + 4 | 0) >> 2] = $130_1;
     label$12 : {
      if (!(HEAP32[($4_1 + 4 | 0) >> 2] | 0)) {
       break label$12
      }
      $28(5994 | 0, 5910 | 0, 217 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($4_1 + 44 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      break label$3;
     }
     break label$10;
    }
    HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 80 | 0) >> 2] = 0;
   }
   label$13 : {
    if (!(HEAP32[($4_1 + 8 | 0) >> 2] | 0)) {
     break label$13
    }
    $28(5994 | 0, 5910 | 0, 217 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 44 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    break label$3;
   }
   $34(6 | 0);
   HEAP32[($4_1 + 44 | 0) >> 2] = 0;
  }
  $147_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  label$14 : {
   $151_1 = $4_1 + 48 | 0;
   if ($151_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $151_1;
  }
  return $147_1 | 0;
 }
 
 function $252($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $21_1 = 0, $32_1 = 0, $94_1 = 0, $105_1 = 0, $116_1 = 0, $127_1 = 0, $158_1 = 0, $161_1 = 0, $170_1 = 0, $173_1 = 0, $220_1 = 0, $223_1 = 0, $232_1 = 0, $235_1 = 0, $277_1 = 0, $280_1 = 0, $306_1 = 0, $313_1 = 0, $322_1 = 0, $321_1 = 0, $91_1 = 0, $93_1 = 0, $102_1 = 0, $104_1 = 0, $113_1 = 0, $115_1 = 0, $124_1 = 0, $126_1 = 0, $1033_1 = 0, $1052_1 = 0, $318_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 96 | 0;
  label$1 : {
   $321_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $321_1;
  }
  HEAP32[($5_1 + 88 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 84 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 80 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $490((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 8 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 76 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = ($490(HEAP32[($5_1 + 84 | 0) >> 2] | 0 | 0) | 0 | 0) / (2 | 0) | 0), HEAP32[(wasm2js_i32$0 + 72 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($5_1 + 68 | 0) >> 2] = 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $253(HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!(($490(HEAP32[($5_1 + 84 | 0) >> 2] | 0 | 0) | 0 | 0) % (2 | 0) | 0)) {
     break label$4
    }
    $21_1 = 6;
    $28(5995 | 0, 5910 | 0, 266 | 0, $21_1 | 0) | 0;
    HEAP32[($5_1 + 92 | 0) >> 2] = $21_1;
    break label$3;
   }
   label$5 : {
    if ($509(HEAP32[($5_1 + 84 | 0) >> 2] | 0 | 0, +(+(0 | 0)), +(+(($254(HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0) | 0) - 1 | 0 | 0))) | 0) {
     break label$5
    }
    $32_1 = 7;
    $28(6032 | 0, 5910 | 0, 269 | 0, $32_1 | 0) | 0;
    HEAP32[($5_1 + 92 | 0) >> 2] = $32_1;
    break label$3;
   }
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $489((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 8 | 0 | 0, (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + (HEAP32[($5_1 + 72 | 0) >> 2] | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
   label$6 : {
    if (!(HEAP32[($5_1 + 16 | 0) >> 2] | 0)) {
     break label$6
    }
    $28(5994 | 0, 5910 | 0, 273 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 92 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
    break label$3;
   }
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $489((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 20 | 0 | 0, (HEAP32[($5_1 + 76 | 0) >> 2] | 0) + (HEAP32[($5_1 + 72 | 0) >> 2] | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
   label$7 : {
    if (!(HEAP32[($5_1 + 12 | 0) >> 2] | 0)) {
     break label$7
    }
    $28(5994 | 0, 5910 | 0, 274 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 92 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    break label$3;
   }
   label$8 : {
    label$9 : while (1) {
     if (!((HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0) < ((HEAP32[($5_1 + 72 | 0) >> 2] | 0) << 1 | 0 | 0) & 1 | 0)) {
      break label$8
     }
     label$10 : {
      label$11 : {
       label$12 : {
        if (HEAP32[($5_1 + 20 | 0) >> 2] | 0) {
         break label$12
        }
        if (!(+HEAPF64[((HEAP32[(HEAP32[($5_1 + 84 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] > +HEAPF64[((HEAP32[(HEAP32[($5_1 + 84 | 0) >> 2] | 0) >> 2] | 0) + (((HEAP32[($5_1 + 68 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
         break label$11
        }
       }
       $91_1 = (HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 8 | 0;
       $93_1 = HEAP32[(HEAP32[($5_1 + 84 | 0) >> 2] | 0) >> 2] | 0;
       $94_1 = HEAP32[($5_1 + 68 | 0) >> 2] | 0;
       HEAP32[($5_1 + 68 | 0) >> 2] = $94_1 + 1 | 0;
       $493($91_1 | 0, +(+HEAPF64[($93_1 + ($94_1 << 3 | 0) | 0) >> 3])) | 0;
       $102_1 = (HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 20 | 0;
       $104_1 = HEAP32[(HEAP32[($5_1 + 84 | 0) >> 2] | 0) >> 2] | 0;
       $105_1 = HEAP32[($5_1 + 68 | 0) >> 2] | 0;
       HEAP32[($5_1 + 68 | 0) >> 2] = $105_1 + 1 | 0;
       $493($102_1 | 0, +(+HEAPF64[($104_1 + ($105_1 << 3 | 0) | 0) >> 3])) | 0;
       break label$10;
      }
      $113_1 = (HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 20 | 0;
      $115_1 = HEAP32[(HEAP32[($5_1 + 84 | 0) >> 2] | 0) >> 2] | 0;
      $116_1 = HEAP32[($5_1 + 68 | 0) >> 2] | 0;
      HEAP32[($5_1 + 68 | 0) >> 2] = $116_1 + 1 | 0;
      $493($113_1 | 0, +(+HEAPF64[($115_1 + ($116_1 << 3 | 0) | 0) >> 3])) | 0;
      $124_1 = (HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 8 | 0;
      $126_1 = HEAP32[(HEAP32[($5_1 + 84 | 0) >> 2] | 0) >> 2] | 0;
      $127_1 = HEAP32[($5_1 + 68 | 0) >> 2] | 0;
      HEAP32[($5_1 + 68 | 0) >> 2] = $127_1 + 1 | 0;
      $493($124_1 | 0, +(+HEAPF64[($126_1 + ($127_1 << 3 | 0) | 0) >> 3])) | 0;
     }
     continue label$9;
    };
   }
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $32(15 | 0) | 0), HEAP32[(wasm2js_i32$0 + 64 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $486($5_1 + 40 | 0 | 0, HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $486($5_1 + 24 | 0 | 0, HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 56 | 0) >> 2] = wasm2js_i32$1;
   label$13 : {
    label$14 : {
     if (HEAP32[($5_1 + 60 | 0) >> 2] | 0) {
      break label$14
     }
     if (!(HEAP32[($5_1 + 56 | 0) >> 2] | 0)) {
      break label$13
     }
    }
    $494((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) | 0;
    $494((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 20 | 0 | 0, HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) | 0;
    $32(HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) | 0;
    label$15 : {
     label$16 : {
      if (!(HEAP32[($5_1 + 60 | 0) >> 2] | 0)) {
       break label$16
      }
      $158_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
      break label$15;
     }
     label$17 : {
      label$18 : {
       if (!(HEAP32[($5_1 + 56 | 0) >> 2] | 0)) {
        break label$18
       }
       $161_1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
       break label$17;
      }
      $161_1 = 0;
     }
     $158_1 = $161_1;
    }
    $28(6032 | 0, 5910 | 0, 296 | 0, $158_1 | 0) | 0;
    label$19 : {
     label$20 : {
      if (!(HEAP32[($5_1 + 60 | 0) >> 2] | 0)) {
       break label$20
      }
      $170_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
      break label$19;
     }
     label$21 : {
      label$22 : {
       if (!(HEAP32[($5_1 + 56 | 0) >> 2] | 0)) {
        break label$22
       }
       $173_1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
       break label$21;
      }
      $173_1 = 0;
     }
     $170_1 = $173_1;
    }
    HEAP32[($5_1 + 92 | 0) >> 2] = $170_1;
    break label$3;
   }
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $533((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 8 | 0 | 0, (HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 20 | 0 | 0, $5_1 + 40 | 0 | 0, +(+(HEAP32[(HEAP32[($5_1 + 88 | 0) >> 2] | 0) >> 2] | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $533((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 20 | 0 | 0, (HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 8 | 0 | 0, $5_1 + 24 | 0 | 0, +(+(HEAP32[(HEAP32[($5_1 + 88 | 0) >> 2] | 0) >> 2] | 0 | 0))) | 0), HEAP32[(wasm2js_i32$0 + 56 | 0) >> 2] = wasm2js_i32$1;
   label$23 : {
    label$24 : {
     if (HEAP32[($5_1 + 60 | 0) >> 2] | 0) {
      break label$24
     }
     if (!(HEAP32[($5_1 + 56 | 0) >> 2] | 0)) {
      break label$23
     }
    }
    $494((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) | 0;
    $494((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 20 | 0 | 0, HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) | 0;
    $488($5_1 + 40 | 0 | 0);
    $488($5_1 + 24 | 0 | 0);
    $32(HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) | 0;
    label$25 : {
     label$26 : {
      if (!(HEAP32[($5_1 + 60 | 0) >> 2] | 0)) {
       break label$26
      }
      $220_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
      break label$25;
     }
     label$27 : {
      label$28 : {
       if (!(HEAP32[($5_1 + 56 | 0) >> 2] | 0)) {
        break label$28
       }
       $223_1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
       break label$27;
      }
      $223_1 = 0;
     }
     $220_1 = $223_1;
    }
    $28(6032 | 0, 5910 | 0, 306 | 0, $220_1 | 0) | 0;
    label$29 : {
     label$30 : {
      if (!(HEAP32[($5_1 + 60 | 0) >> 2] | 0)) {
       break label$30
      }
      $232_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
      break label$29;
     }
     label$31 : {
      label$32 : {
       if (!(HEAP32[($5_1 + 56 | 0) >> 2] | 0)) {
        break label$32
       }
       $235_1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
       break label$31;
      }
      $235_1 = 0;
     }
     $232_1 = $235_1;
    }
    HEAP32[($5_1 + 92 | 0) >> 2] = $232_1;
    break label$3;
   }
   label$33 : {
    if (!((HEAP32[((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$33
    }
    $32(HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) | 0;
    (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $966(HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 80 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
    $32(15 | 0) | 0;
    label$34 : {
     if (!(HEAP32[($5_1 + 60 | 0) >> 2] | 0)) {
      break label$34
     }
     $494((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) | 0;
     $494((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 20 | 0 | 0, HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) | 0;
     $488($5_1 + 40 | 0 | 0);
     $488($5_1 + 24 | 0 | 0);
     $32(HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) | 0;
     $28(6032 | 0, 5910 | 0, 320 | 0, HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($5_1 + 92 | 0) >> 2] = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
     break label$3;
    }
   }
   $277_1 = $5_1 + 24 | 0;
   $280_1 = $5_1 + 40 | 0;
   $255((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 56 | 0 | 0, (HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 8 | 0 | 0, $280_1 | 0, HEAP32[(HEAP32[($5_1 + 88 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
   $255((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 68 | 0 | 0, (HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 20 | 0 | 0, $277_1 | 0, HEAP32[(HEAP32[($5_1 + 88 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
   $488((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 32 | 0 | 0);
   $488((HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 44 | 0 | 0);
   i64toi32_i32$2 = $280_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $1033_1 = i64toi32_i32$0;
   i64toi32_i32$0 = (HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 32 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $1033_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $306_1 = 8;
   HEAP32[(i64toi32_i32$0 + $306_1 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $306_1 | 0) >> 2] | 0;
   i64toi32_i32$2 = $277_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $1052_1 = i64toi32_i32$1;
   i64toi32_i32$1 = (HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 44 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $1052_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $313_1 = 8;
   HEAP32[(i64toi32_i32$1 + $313_1 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $313_1 | 0) >> 2] | 0;
   $32(HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($5_1 + 92 | 0) >> 2] = 0;
  }
  $318_1 = HEAP32[($5_1 + 92 | 0) >> 2] | 0;
  label$35 : {
   $322_1 = $5_1 + 96 | 0;
   if ($322_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $322_1;
  }
  return $318_1 | 0;
 }
 
 function $253($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $254($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $255($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $203_1 = 0.0, $34_1 = 0, $208_1 = 0.0, $76_1 = 0, $212_1 = 0.0, $95_1 = 0, $215_1 = 0.0, $104_1 = 0, $219_1 = 0.0, $113_1 = 0, $223_1 = 0.0, $153_1 = 0, $226_1 = 0.0, $162_1 = 0, $229_1 = 0.0, $171_1 = 0, $201_1 = 0, $200_1 = 0, $202_1 = 0.0, $28_1 = 0, $64_1 = 0, $66_1 = 0, $211_1 = 0.0, $83_1 = 0, $85_1 = 0, $139_1 = 0, $141_1 = 0, $143_1 = 0, $197_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 48 | 0;
  label$1 : {
   $200_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $200_1;
  }
  HEAP32[($6_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $490(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $494(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!(HEAP32[($6_1 + 4 | 0) >> 2] | 0)) {
     break label$4
    }
    $28(5994 | 0, 5910 | 0, 846 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
    break label$3;
   }
   label$5 : {
    label$6 : {
     if ($490(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0) {
      break label$6
     }
     $497(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0);
     break label$5;
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = -1;
    HEAP32[($6_1 + 16 | 0) >> 2] = 0;
    label$7 : while (1) {
     $202_1 = +(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
     $28_1 = HEAP32[(HEAP32[($6_1 + 36 | 0) >> 2] | 0) >> 2] | 0;
     $203_1 = +HEAPF64[(HEAP32[(HEAP32[($6_1 + 32 | 0) >> 2] | 0) >> 2] | 0) >> 3];
     label$8 : {
      label$9 : {
       if (!(Math_abs($203_1) < 2147483648.0)) {
        break label$9
       }
       $34_1 = ~~$203_1;
       break label$8;
      }
      $34_1 = -2147483648;
     }
     label$10 : {
      if (!($202_1 <= +HEAPF64[($28_1 + ($34_1 << 3 | 0) | 0) >> 3] & 1 | 0)) {
       break label$10
      }
      HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0;
      HEAPF64[((HEAP32[(HEAP32[($6_1 + 40 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
      HEAP32[($6_1 + 16 | 0) >> 2] = (HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 1 | 0;
      continue label$7;
     }
     break label$7;
    };
    HEAP32[($6_1 + 16 | 0) >> 2] = 1;
    label$11 : {
     label$12 : while (1) {
      if (!((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$11
      }
      $64_1 = 0;
      $66_1 = HEAP32[(HEAP32[($6_1 + 36 | 0) >> 2] | 0) >> 2] | 0;
      $208_1 = +HEAPF64[((HEAP32[(HEAP32[($6_1 + 32 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$13 : {
       label$14 : {
        if (!(Math_abs($208_1) < 2147483648.0)) {
         break label$14
        }
        $76_1 = ~~$208_1;
        break label$13;
       }
       $76_1 = -2147483648;
      }
      $211_1 = +HEAPF64[($66_1 + ($76_1 << 3 | 0) | 0) >> 3];
      $83_1 = HEAP32[(HEAP32[($6_1 + 36 | 0) >> 2] | 0) >> 2] | 0;
      $85_1 = HEAP32[(HEAP32[($6_1 + 32 | 0) >> 2] | 0) >> 2] | 0;
      $212_1 = +HEAPF64[((HEAP32[(HEAP32[($6_1 + 40 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$15 : {
       label$16 : {
        if (!(Math_abs($212_1) < 2147483648.0)) {
         break label$16
        }
        $95_1 = ~~$212_1;
        break label$15;
       }
       $95_1 = -2147483648;
      }
      $215_1 = +HEAPF64[($85_1 + ($95_1 << 3 | 0) | 0) >> 3];
      label$17 : {
       label$18 : {
        if (!(Math_abs($215_1) < 2147483648.0)) {
         break label$18
        }
        $104_1 = ~~$215_1;
        break label$17;
       }
       $104_1 = -2147483648;
      }
      $219_1 = $211_1 - +HEAPF64[($83_1 + ($104_1 << 3 | 0) | 0) >> 3];
      label$19 : {
       label$20 : {
        if (!(Math_abs($219_1) < 2147483648.0)) {
         break label$20
        }
        $113_1 = ~~$219_1;
        break label$19;
       }
       $113_1 = -2147483648;
      }
      HEAP32[$6_1 >> 2] = $113_1;
      HEAP32[($6_1 + 12 | 0) >> 2] = $64_1;
      label$21 : {
       label$22 : while (1) {
        if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[$6_1 >> 2] | 0 | 0) & 1 | 0)) {
         break label$21
        }
        HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0;
        HEAPF64[((HEAP32[(HEAP32[($6_1 + 40 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
        HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0;
        continue label$22;
       };
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = (HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 1 | 0;
      continue label$12;
     };
    }
    $139_1 = 0;
    $141_1 = HEAP32[(HEAP32[($6_1 + 36 | 0) >> 2] | 0) >> 2] | 0;
    $143_1 = HEAP32[(HEAP32[($6_1 + 32 | 0) >> 2] | 0) >> 2] | 0;
    $223_1 = +HEAPF64[((HEAP32[(HEAP32[($6_1 + 40 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    label$23 : {
     label$24 : {
      if (!(Math_abs($223_1) < 2147483648.0)) {
       break label$24
      }
      $153_1 = ~~$223_1;
      break label$23;
     }
     $153_1 = -2147483648;
    }
    $226_1 = +HEAPF64[($143_1 + ($153_1 << 3 | 0) | 0) >> 3];
    label$25 : {
     label$26 : {
      if (!(Math_abs($226_1) < 2147483648.0)) {
       break label$26
      }
      $162_1 = ~~$226_1;
      break label$25;
     }
     $162_1 = -2147483648;
    }
    $229_1 = +HEAPF64[($141_1 + ($162_1 << 3 | 0) | 0) >> 3];
    label$27 : {
     label$28 : {
      if (!(Math_abs($229_1) < 2147483648.0)) {
       break label$28
      }
      $171_1 = ~~$229_1;
      break label$27;
     }
     $171_1 = -2147483648;
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = $171_1;
    HEAP32[($6_1 + 16 | 0) >> 2] = $139_1;
    label$29 : {
     label$30 : while (1) {
      if (!((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) < ((HEAP32[($6_1 + 24 | 0) >> 2] | 0) - (HEAP32[($6_1 + 12 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
       break label$29
      }
      HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0;
      HEAPF64[((HEAP32[(HEAP32[($6_1 + 40 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0);
      HEAP32[($6_1 + 16 | 0) >> 2] = (HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 1 | 0;
      continue label$30;
     };
    }
   }
   HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  }
  $197_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
  label$31 : {
   $201_1 = $6_1 + 48 | 0;
   if ($201_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $201_1;
  }
  return $197_1 | 0;
 }
 
 function $256($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $25_1 = 0, $50_1 = 0, $522_1 = 0.0, $78_1 = 0, $529_1 = 0.0, $102_1 = 0, $532_1 = 0.0, $137_1 = 0, $535_1 = 0.0, $149_1 = 0, $538_1 = 0.0, $170_1 = 0, $178_1 = 0, $542_1 = 0.0, $201_1 = 0, $545_1 = 0.0, $213_1 = 0, $548_1 = 0.0, $234_1 = 0, $242_1 = 0, $552_1 = 0.0, $262_1 = 0, $555_1 = 0.0, $276_1 = 0, $558_1 = 0.0, $288_1 = 0, $561_1 = 0.0, $300_1 = 0, $311_1 = 0, $564_1 = 0.0, $331_1 = 0, $567_1 = 0.0, $340_1 = 0, $570_1 = 0.0, $354_1 = 0, $573_1 = 0.0, $363_1 = 0, $376_1 = 0, $395_1 = 0, $407_1 = 0, $416_1 = 0, $580_1 = 0.0, $446_1 = 0, $583_1 = 0.0, $455_1 = 0, $461_1 = 0, $587_1 = 0.0, $488_1 = 0, $590_1 = 0.0, $497_1 = 0, $503_1 = 0, $517_1 = 0, $516_1 = 0, $160_1 = 0, $541_1 = 0.0, $177_1 = 0, $224_1 = 0, $551_1 = 0.0, $241_1 = 0, $321_1 = 0, $344_1 = 0, $576_1 = 0.0, $375_1 = 0, $577_1 = 0.0, $394_1 = 0, $578_1 = 0.0, $406_1 = 0, $579_1 = 0.0, $415_1 = 0, $436_1 = 0, $586_1 = 0.0, $460_1 = 0, $478_1 = 0, $593_1 = 0.0, $502_1 = 0, $513_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 80 | 0;
  label$1 : {
   $516_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $516_1;
  }
  $7_1 = 0;
  HEAP32[($6_1 + 72 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 68 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 64 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 60 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 52 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if ((HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) < ($7_1 | 0) & 1 | 0) {
      break label$5
     }
     if (!((HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) > (($254(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0) | 0) - 1 | 0 | 0) & 1 | 0)) {
      break label$4
     }
    }
    $25_1 = 7;
    $28(6088 | 0, 5910 | 0, 747 | 0, $25_1 | 0) | 0;
    HEAP32[($6_1 + 76 | 0) >> 2] = $25_1;
    break label$3;
   }
   label$6 : {
    if (!((HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$6
    }
    if (!((HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) != (2 | 0) & 1 | 0)) {
     break label$6
    }
    if (!((HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) != (3 | 0) & 1 | 0)) {
     break label$6
    }
    $50_1 = 9;
    $28(6088 | 0, 5910 | 0, 751 | 0, $50_1 | 0) | 0;
    HEAP32[($6_1 + 76 | 0) >> 2] = $50_1;
    break label$3;
   }
   label$7 : {
    if (HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) {
     break label$7
    }
    HEAP32[($6_1 + 60 | 0) >> 2] = 3;
   }
   label$8 : {
    if (!((HEAP32[($6_1 + 60 | 0) >> 2] | 0) & 1 | 0)) {
     break label$8
    }
    $522_1 = +(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) + (+HEAPF64[((HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
    label$9 : {
     label$10 : {
      if (!(Math_abs($522_1) < 2147483648.0)) {
       break label$10
      }
      $78_1 = ~~$522_1;
      break label$9;
     }
     $78_1 = -2147483648;
    }
    HEAP32[($6_1 + 56 | 0) >> 2] = $78_1;
   }
   label$11 : {
    if (!((HEAP32[($6_1 + 60 | 0) >> 2] | 0) & 2 | 0)) {
     break label$11
    }
    $529_1 = +(HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) + (+HEAPF64[((HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
    label$12 : {
     label$13 : {
      if (!(Math_abs($529_1) < 2147483648.0)) {
       break label$13
      }
      $102_1 = ~~$529_1;
      break label$12;
     }
     $102_1 = -2147483648;
    }
    HEAP32[($6_1 + 56 | 0) >> 2] = $102_1;
   }
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $494(HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
   label$14 : {
    if (!(HEAP32[($6_1 + 36 | 0) >> 2] | 0)) {
     break label$14
    }
    $28(5994 | 0, 5910 | 0, 767 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 76 | 0) >> 2] = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
    break label$3;
   }
   label$15 : {
    label$16 : {
     label$17 : {
      if (!($253(HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0) | 0)) {
       break label$17
      }
      if (!((HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) != (3 | 0) & 1 | 0)) {
       break label$16
      }
     }
     label$18 : {
      if (!((HEAP32[($6_1 + 60 | 0) >> 2] | 0) & 1 | 0)) {
       break label$18
      }
      $532_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
      label$19 : {
       label$20 : {
        if (!(Math_abs($532_1) < 2147483648.0)) {
         break label$20
        }
        $137_1 = ~~$532_1;
        break label$19;
       }
       $137_1 = -2147483648;
      }
      HEAP32[($6_1 + 44 | 0) >> 2] = $137_1;
      $535_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$21 : {
       label$22 : {
        if (!(Math_abs($535_1) < 2147483648.0)) {
         break label$22
        }
        $149_1 = ~~$535_1;
        break label$21;
       }
       $149_1 = -2147483648;
      }
      HEAP32[($6_1 + 48 | 0) >> 2] = $149_1;
      label$23 : {
       label$24 : while (1) {
        if (!((HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$23
        }
        $160_1 = HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
        $538_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$25 : {
         label$26 : {
          if (!(Math_abs($538_1) < 2147483648.0)) {
           break label$26
          }
          $170_1 = ~~$538_1;
          break label$25;
         }
         $170_1 = -2147483648;
        }
        $541_1 = +HEAPF64[($160_1 + ($170_1 << 3 | 0) | 0) >> 3];
        $177_1 = HEAP32[(HEAP32[($6_1 + 68 | 0) >> 2] | 0) >> 2] | 0;
        $178_1 = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
        HEAP32[($6_1 + 52 | 0) >> 2] = $178_1 + 1 | 0;
        HEAPF64[($177_1 + ($178_1 << 3 | 0) | 0) >> 3] = $541_1;
        HEAP32[($6_1 + 48 | 0) >> 2] = (HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 1 | 0;
        continue label$24;
       };
      }
     }
     label$27 : {
      if (!((HEAP32[($6_1 + 60 | 0) >> 2] | 0) & 2 | 0)) {
       break label$27
      }
      $542_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
      label$28 : {
       label$29 : {
        if (!(Math_abs($542_1) < 2147483648.0)) {
         break label$29
        }
        $201_1 = ~~$542_1;
        break label$28;
       }
       $201_1 = -2147483648;
      }
      HEAP32[($6_1 + 44 | 0) >> 2] = $201_1;
      $545_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$30 : {
       label$31 : {
        if (!(Math_abs($545_1) < 2147483648.0)) {
         break label$31
        }
        $213_1 = ~~$545_1;
        break label$30;
       }
       $213_1 = -2147483648;
      }
      HEAP32[($6_1 + 48 | 0) >> 2] = $213_1;
      label$32 : {
       label$33 : while (1) {
        if (!((HEAP32[($6_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$32
        }
        $224_1 = HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
        $548_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$34 : {
         label$35 : {
          if (!(Math_abs($548_1) < 2147483648.0)) {
           break label$35
          }
          $234_1 = ~~$548_1;
          break label$34;
         }
         $234_1 = -2147483648;
        }
        $551_1 = +HEAPF64[($224_1 + ($234_1 << 3 | 0) | 0) >> 3];
        $241_1 = HEAP32[(HEAP32[($6_1 + 68 | 0) >> 2] | 0) >> 2] | 0;
        $242_1 = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
        HEAP32[($6_1 + 52 | 0) >> 2] = $242_1 + 1 | 0;
        HEAPF64[($241_1 + ($242_1 << 3 | 0) | 0) >> 3] = $551_1;
        HEAP32[($6_1 + 48 | 0) >> 2] = (HEAP32[($6_1 + 48 | 0) >> 2] | 0) + 1 | 0;
        continue label$33;
       };
      }
     }
     break label$15;
    }
    $552_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
    label$36 : {
     label$37 : {
      if (!(Math_abs($552_1) < 2147483648.0)) {
       break label$37
      }
      $262_1 = ~~$552_1;
      break label$36;
     }
     $262_1 = -2147483648;
    }
    HEAP32[($6_1 + 32 | 0) >> 2] = $262_1;
    $555_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
    label$38 : {
     label$39 : {
      if (!(Math_abs($555_1) < 2147483648.0)) {
       break label$39
      }
      $276_1 = ~~$555_1;
      break label$38;
     }
     $276_1 = -2147483648;
    }
    HEAP32[($6_1 + 28 | 0) >> 2] = $276_1;
    $558_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    label$40 : {
     label$41 : {
      if (!(Math_abs($558_1) < 2147483648.0)) {
       break label$41
      }
      $288_1 = ~~$558_1;
      break label$40;
     }
     $288_1 = -2147483648;
    }
    HEAP32[($6_1 + 24 | 0) >> 2] = $288_1;
    $561_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 40 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    label$42 : {
     label$43 : {
      if (!(Math_abs($561_1) < 2147483648.0)) {
       break label$43
      }
      $300_1 = ~~$561_1;
      break label$42;
     }
     $300_1 = -2147483648;
    }
    HEAP32[($6_1 + 20 | 0) >> 2] = $300_1;
    label$44 : while (1) {
     $311_1 = 0;
     label$45 : {
      if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$45
      }
      $311_1 = (HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0);
     }
     label$46 : {
      if (!($311_1 & 1 | 0)) {
       break label$46
      }
      $321_1 = HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
      $564_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$47 : {
       label$48 : {
        if (!(Math_abs($564_1) < 2147483648.0)) {
         break label$48
        }
        $331_1 = ~~$564_1;
        break label$47;
       }
       $331_1 = -2147483648;
      }
      $567_1 = +HEAPF64[($321_1 + ($331_1 << 3 | 0) | 0) >> 3];
      label$49 : {
       label$50 : {
        if (!(Math_abs($567_1) < 2147483648.0)) {
         break label$50
        }
        $340_1 = ~~$567_1;
        break label$49;
       }
       $340_1 = -2147483648;
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $340_1;
      $344_1 = HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
      $570_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$51 : {
       label$52 : {
        if (!(Math_abs($570_1) < 2147483648.0)) {
         break label$52
        }
        $354_1 = ~~$570_1;
        break label$51;
       }
       $354_1 = -2147483648;
      }
      $573_1 = +HEAPF64[($344_1 + ($354_1 << 3 | 0) | 0) >> 3];
      label$53 : {
       label$54 : {
        if (!(Math_abs($573_1) < 2147483648.0)) {
         break label$54
        }
        $363_1 = ~~$573_1;
        break label$53;
       }
       $363_1 = -2147483648;
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $363_1;
      label$55 : {
       label$56 : {
        if (!((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$56
        }
        $576_1 = +(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
        $375_1 = HEAP32[(HEAP32[($6_1 + 68 | 0) >> 2] | 0) >> 2] | 0;
        $376_1 = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
        HEAP32[($6_1 + 52 | 0) >> 2] = $376_1 + 1 | 0;
        HEAPF64[($375_1 + ($376_1 << 3 | 0) | 0) >> 3] = $576_1;
        HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1 | 0;
        break label$55;
       }
       label$57 : {
        label$58 : {
         if (!((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) > (HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$58
         }
         $577_1 = +(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0);
         $394_1 = HEAP32[(HEAP32[($6_1 + 68 | 0) >> 2] | 0) >> 2] | 0;
         $395_1 = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
         HEAP32[($6_1 + 52 | 0) >> 2] = $395_1 + 1 | 0;
         HEAPF64[($394_1 + ($395_1 << 3 | 0) | 0) >> 3] = $577_1;
         HEAP32[($6_1 + 20 | 0) >> 2] = (HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 1 | 0;
         break label$57;
        }
        $578_1 = +(HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
        $406_1 = HEAP32[(HEAP32[($6_1 + 68 | 0) >> 2] | 0) >> 2] | 0;
        $407_1 = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
        HEAP32[($6_1 + 52 | 0) >> 2] = $407_1 + 1 | 0;
        HEAPF64[($406_1 + ($407_1 << 3 | 0) | 0) >> 3] = $578_1;
        $579_1 = +(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0);
        $415_1 = HEAP32[(HEAP32[($6_1 + 68 | 0) >> 2] | 0) >> 2] | 0;
        $416_1 = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
        HEAP32[($6_1 + 52 | 0) >> 2] = $416_1 + 1 | 0;
        HEAPF64[($415_1 + ($416_1 << 3 | 0) | 0) >> 3] = $579_1;
        HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($6_1 + 20 | 0) >> 2] = (HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 1 | 0;
       }
      }
      continue label$44;
     }
     break label$44;
    };
    label$59 : {
     label$60 : while (1) {
      if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$59
      }
      $436_1 = HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
      $580_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$61 : {
       label$62 : {
        if (!(Math_abs($580_1) < 2147483648.0)) {
         break label$62
        }
        $446_1 = ~~$580_1;
        break label$61;
       }
       $446_1 = -2147483648;
      }
      $583_1 = +HEAPF64[($436_1 + ($446_1 << 3 | 0) | 0) >> 3];
      label$63 : {
       label$64 : {
        if (!(Math_abs($583_1) < 2147483648.0)) {
         break label$64
        }
        $455_1 = ~~$583_1;
        break label$63;
       }
       $455_1 = -2147483648;
      }
      HEAP32[($6_1 + 8 | 0) >> 2] = $455_1;
      $586_1 = +(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0);
      $460_1 = HEAP32[(HEAP32[($6_1 + 68 | 0) >> 2] | 0) >> 2] | 0;
      $461_1 = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
      HEAP32[($6_1 + 52 | 0) >> 2] = $461_1 + 1 | 0;
      HEAPF64[($460_1 + ($461_1 << 3 | 0) | 0) >> 3] = $586_1;
      HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1 | 0;
      continue label$60;
     };
    }
    label$65 : {
     label$66 : while (1) {
      if (!((HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$65
      }
      $478_1 = HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
      $587_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$67 : {
       label$68 : {
        if (!(Math_abs($587_1) < 2147483648.0)) {
         break label$68
        }
        $488_1 = ~~$587_1;
        break label$67;
       }
       $488_1 = -2147483648;
      }
      $590_1 = +HEAPF64[($478_1 + ($488_1 << 3 | 0) | 0) >> 3];
      label$69 : {
       label$70 : {
        if (!(Math_abs($590_1) < 2147483648.0)) {
         break label$70
        }
        $497_1 = ~~$590_1;
        break label$69;
       }
       $497_1 = -2147483648;
      }
      HEAP32[($6_1 + 4 | 0) >> 2] = $497_1;
      $593_1 = +(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0);
      $502_1 = HEAP32[(HEAP32[($6_1 + 68 | 0) >> 2] | 0) >> 2] | 0;
      $503_1 = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
      HEAP32[($6_1 + 52 | 0) >> 2] = $503_1 + 1 | 0;
      HEAPF64[($502_1 + ($503_1 << 3 | 0) | 0) >> 3] = $593_1;
      HEAP32[($6_1 + 20 | 0) >> 2] = (HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 1 | 0;
      continue label$66;
     };
    }
   }
   HEAP32[($6_1 + 76 | 0) >> 2] = 0;
  }
  $513_1 = HEAP32[($6_1 + 76 | 0) >> 2] | 0;
  label$71 : {
   $517_1 = $6_1 + 80 | 0;
   if ($517_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $517_1;
  }
  return $513_1 | 0;
 }
 
 function $257($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $9_1 = 0, $48_1 = 0, $405_1 = 0.0, $407_1 = 0.0, $94_1 = 0, $116_1 = 0, $416_1 = 0.0, $418_1 = 0.0, $148_1 = 0, $170_1 = 0, $427_1 = 0.0, $429_1 = 0.0, $202_1 = 0, $224_1 = 0, $437_1 = 0.0, $234_1 = 0, $442_1 = 0.0, $260_1 = 0, $275_1 = 0, $451_1 = 0.0, $453_1 = 0.0, $310_1 = 0, $332_1 = 0, $461_1 = 0.0, $342_1 = 0, $466_1 = 0.0, $368_1 = 0, $383_1 = 0, $402_1 = 0, $401_1 = 0, $8_1 = 0, i64toi32_i32$1 = 0, $250_1 = 0, $358_1 = 0, $398_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 96 | 0;
  label$1 : {
   $401_1 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $401_1;
  }
  HEAP32[($7_1 + 88 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 84 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 80 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $4_1;
  $8_1 = HEAP32[($7_1 + 88 | 0) >> 2] | 0;
  $9_1 = 8;
  HEAP32[($7_1 + $9_1 | 0) >> 2] = HEAP32[($2_1 + $9_1 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
  HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $536($8_1 | 0, $7_1 | 0, $7_1 + 40 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!(HEAP32[($7_1 + 36 | 0) >> 2] | 0)) {
     break label$4
    }
    $28(5994 | 0, 5910 | 0, 940 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($7_1 + 92 | 0) >> 2] = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
    break label$3;
   }
   $33(16 | 0, $7_1 + 40 | 0 | 0);
   label$5 : {
    if (!((HEAP32[($7_1 + 80 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$5
    }
    if (!((HEAP32[($7_1 + 80 | 0) >> 2] | 0 | 0) != (2 | 0) & 1 | 0)) {
     break label$5
    }
    if (!((HEAP32[($7_1 + 80 | 0) >> 2] | 0 | 0) != (3 | 0) & 1 | 0)) {
     break label$5
    }
    $48_1 = 9;
    $28(6109 | 0, 5910 | 0, 944 | 0, $48_1 | 0) | 0;
    HEAP32[($7_1 + 92 | 0) >> 2] = $48_1;
    break label$3;
   }
   HEAP32[($7_1 + 72 | 0) >> 2] = (HEAP32[($7_1 + 52 | 0) >> 2] | 0) - (HEAP32[($7_1 + 48 | 0) >> 2] | 0) | 0;
   label$6 : {
    if ($253(HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) | 0) {
     break label$6
    }
    HEAP32[($7_1 + 80 | 0) >> 2] = 3;
   }
   (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $494(HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 72 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
   label$7 : {
    if (!(HEAP32[($7_1 + 32 | 0) >> 2] | 0)) {
     break label$7
    }
    $28(5994 | 0, 5910 | 0, 952 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($7_1 + 92 | 0) >> 2] = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
    break label$3;
   }
   $497(HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0);
   label$8 : {
    label$9 : {
     if (!(HEAP32[($7_1 + 76 | 0) >> 2] | 0)) {
      break label$9
     }
     label$10 : {
      if (!((HEAP32[($7_1 + 80 | 0) >> 2] | 0) & 1 | 0)) {
       break label$10
      }
      HEAP32[($7_1 + 44 | 0) >> 2] = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
      HEAP32[($7_1 + 68 | 0) >> 2] = 0;
      label$11 : {
       label$12 : while (1) {
        if (!(((HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) >= (HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) ^ -1 | 0) & 1 | 0)) {
         break label$11
        }
        label$13 : {
         label$14 : {
          if (HEAP32[($7_1 + 40 | 0) >> 2] | 0) {
           break label$14
          }
          $405_1 = +(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0);
          break label$13;
         }
         $405_1 = +HEAPF64[((HEAP32[(HEAP32[($7_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        }
        $407_1 = $405_1;
        label$15 : {
         label$16 : {
          if (!(Math_abs($407_1) < 2147483648.0)) {
           break label$16
          }
          $94_1 = ~~$407_1;
          break label$15;
         }
         $94_1 = -2147483648;
        }
        HEAP32[($7_1 + 28 | 0) >> 2] = $94_1;
        $116_1 = (HEAP32[(HEAP32[($7_1 + 84 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0;
        HEAPF64[$116_1 >> 3] = +HEAPF64[$116_1 >> 3] + (+HEAPF64[((HEAP32[((HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 28 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
        HEAP32[($7_1 + 44 | 0) >> 2] = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($7_1 + 68 | 0) >> 2] = (HEAP32[($7_1 + 68 | 0) >> 2] | 0) + 1 | 0;
        continue label$12;
       };
      }
     }
     label$17 : {
      if (!((HEAP32[($7_1 + 80 | 0) >> 2] | 0) & 2 | 0)) {
       break label$17
      }
      HEAP32[($7_1 + 44 | 0) >> 2] = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
      HEAP32[($7_1 + 68 | 0) >> 2] = 0;
      label$18 : {
       label$19 : while (1) {
        if (!(((HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) >= (HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) ^ -1 | 0) & 1 | 0)) {
         break label$18
        }
        label$20 : {
         label$21 : {
          if (HEAP32[($7_1 + 40 | 0) >> 2] | 0) {
           break label$21
          }
          $416_1 = +(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0);
          break label$20;
         }
         $416_1 = +HEAPF64[((HEAP32[(HEAP32[($7_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        }
        $418_1 = $416_1;
        label$22 : {
         label$23 : {
          if (!(Math_abs($418_1) < 2147483648.0)) {
           break label$23
          }
          $148_1 = ~~$418_1;
          break label$22;
         }
         $148_1 = -2147483648;
        }
        HEAP32[($7_1 + 24 | 0) >> 2] = $148_1;
        $170_1 = (HEAP32[(HEAP32[($7_1 + 84 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0;
        HEAPF64[$170_1 >> 3] = +HEAPF64[$170_1 >> 3] + (+HEAPF64[((HEAP32[((HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
        HEAP32[($7_1 + 44 | 0) >> 2] = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($7_1 + 68 | 0) >> 2] = (HEAP32[($7_1 + 68 | 0) >> 2] | 0) + 1 | 0;
        continue label$19;
       };
      }
     }
     break label$8;
    }
    label$24 : {
     if (!((HEAP32[($7_1 + 80 | 0) >> 2] | 0) & 1 | 0)) {
      break label$24
     }
     HEAP32[($7_1 + 44 | 0) >> 2] = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
     HEAP32[($7_1 + 68 | 0) >> 2] = 0;
     label$25 : {
      label$26 : while (1) {
       if (!(((HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) >= (HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) ^ -1 | 0) & 1 | 0)) {
        break label$25
       }
       label$27 : {
        label$28 : {
         if (HEAP32[($7_1 + 40 | 0) >> 2] | 0) {
          break label$28
         }
         $427_1 = +(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0);
         break label$27;
        }
        $427_1 = +HEAPF64[((HEAP32[(HEAP32[($7_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       }
       $429_1 = $427_1;
       label$29 : {
        label$30 : {
         if (!(Math_abs($429_1) < 2147483648.0)) {
          break label$30
         }
         $202_1 = ~~$429_1;
         break label$29;
        }
        $202_1 = -2147483648;
       }
       HEAP32[($7_1 + 20 | 0) >> 2] = $202_1;
       $224_1 = (HEAP32[(HEAP32[($7_1 + 84 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0;
       HEAPF64[$224_1 >> 3] = +HEAPF64[$224_1 >> 3] + (+HEAPF64[((HEAP32[((HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
       $437_1 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       label$31 : {
        label$32 : {
         if (!(Math_abs($437_1) < 2147483648.0)) {
          break label$32
         }
         $234_1 = ~~$437_1;
         break label$31;
        }
        $234_1 = -2147483648;
       }
       HEAP32[($7_1 + 64 | 0) >> 2] = $234_1;
       label$33 : {
        label$34 : while (1) {
         if (!(+(HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) < +HEAPF64[((HEAP32[((HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
          break label$33
         }
         $250_1 = HEAP32[((HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
         $442_1 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         label$35 : {
          label$36 : {
           if (!(Math_abs($442_1) < 2147483648.0)) {
            break label$36
           }
           $260_1 = ~~$442_1;
           break label$35;
          }
          $260_1 = -2147483648;
         }
         label$37 : {
          if (!(+HEAPF64[($250_1 + ($260_1 << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$37
          }
          $275_1 = (HEAP32[(HEAP32[($7_1 + 84 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0;
          HEAPF64[$275_1 >> 3] = +HEAPF64[$275_1 >> 3] - 1.0;
         }
         HEAP32[($7_1 + 64 | 0) >> 2] = (HEAP32[($7_1 + 64 | 0) >> 2] | 0) + 1 | 0;
         continue label$34;
        };
       }
       HEAP32[($7_1 + 44 | 0) >> 2] = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($7_1 + 68 | 0) >> 2] = (HEAP32[($7_1 + 68 | 0) >> 2] | 0) + 1 | 0;
       continue label$26;
      };
     }
    }
    label$38 : {
     if (!((HEAP32[($7_1 + 80 | 0) >> 2] | 0) & 2 | 0)) {
      break label$38
     }
     HEAP32[($7_1 + 44 | 0) >> 2] = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
     HEAP32[($7_1 + 68 | 0) >> 2] = 0;
     label$39 : {
      label$40 : while (1) {
       if (!(((HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) >= (HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) ^ -1 | 0) & 1 | 0)) {
        break label$39
       }
       label$41 : {
        label$42 : {
         if (HEAP32[($7_1 + 40 | 0) >> 2] | 0) {
          break label$42
         }
         $451_1 = +(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0);
         break label$41;
        }
        $451_1 = +HEAPF64[((HEAP32[(HEAP32[($7_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       }
       $453_1 = $451_1;
       label$43 : {
        label$44 : {
         if (!(Math_abs($453_1) < 2147483648.0)) {
          break label$44
         }
         $310_1 = ~~$453_1;
         break label$43;
        }
        $310_1 = -2147483648;
       }
       HEAP32[($7_1 + 16 | 0) >> 2] = $310_1;
       $332_1 = (HEAP32[(HEAP32[($7_1 + 84 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0;
       HEAPF64[$332_1 >> 3] = +HEAPF64[$332_1 >> 3] + (+HEAPF64[((HEAP32[((HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
       $461_1 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       label$45 : {
        label$46 : {
         if (!(Math_abs($461_1) < 2147483648.0)) {
          break label$46
         }
         $342_1 = ~~$461_1;
         break label$45;
        }
        $342_1 = -2147483648;
       }
       HEAP32[($7_1 + 64 | 0) >> 2] = $342_1;
       label$47 : {
        label$48 : while (1) {
         if (!(+(HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) < +HEAPF64[((HEAP32[((HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
          break label$47
         }
         $358_1 = HEAP32[((HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
         $466_1 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         label$49 : {
          label$50 : {
           if (!(Math_abs($466_1) < 2147483648.0)) {
            break label$50
           }
           $368_1 = ~~$466_1;
           break label$49;
          }
          $368_1 = -2147483648;
         }
         label$51 : {
          if (!(+HEAPF64[($358_1 + ($368_1 << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$51
          }
          $383_1 = (HEAP32[(HEAP32[($7_1 + 84 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0;
          HEAPF64[$383_1 >> 3] = +HEAPF64[$383_1 >> 3] - 1.0;
         }
         HEAP32[($7_1 + 64 | 0) >> 2] = (HEAP32[($7_1 + 64 | 0) >> 2] | 0) + 1 | 0;
         continue label$48;
        };
       }
       HEAP32[($7_1 + 44 | 0) >> 2] = (HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($7_1 + 68 | 0) >> 2] = (HEAP32[($7_1 + 68 | 0) >> 2] | 0) + 1 | 0;
       continue label$40;
      };
     }
    }
   }
   $537($7_1 + 40 | 0 | 0);
   $34(1 | 0);
   HEAP32[($7_1 + 92 | 0) >> 2] = 0;
  }
  $398_1 = HEAP32[($7_1 + 92 | 0) >> 2] | 0;
  label$52 : {
   $402_1 = $7_1 + 96 | 0;
   if ($402_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $402_1;
  }
  return $398_1 | 0;
 }
 
 function $258($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $66_1 = 0.0, $18_1 = 0, $69_1 = 0.0, $31_1 = 0, $72_1 = 0.0, $44_1 = 0, $75_1 = 0.0, $57_1 = 0, $65_1 = 0, $64_1 = 0, $61_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $64_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $64_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  label$3 : {
   label$4 : {
    if (!($253(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0)) {
     break label$4
    }
    $66_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    label$5 : {
     label$6 : {
      if (!(Math_abs($66_1) < 2147483648.0)) {
       break label$6
      }
      $18_1 = ~~$66_1;
      break label$5;
     }
     $18_1 = -2147483648;
    }
    HEAP32[(HEAP32[($6_1 + 4 | 0) >> 2] | 0) >> 2] = $18_1;
    $69_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    label$7 : {
     label$8 : {
      if (!(Math_abs($69_1) < 2147483648.0)) {
       break label$8
      }
      $31_1 = ~~$69_1;
      break label$7;
     }
     $31_1 = -2147483648;
    }
    HEAP32[(HEAP32[$6_1 >> 2] | 0) >> 2] = $31_1;
    break label$3;
   }
   $72_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
   label$9 : {
    label$10 : {
     if (!(Math_abs($72_1) < 2147483648.0)) {
      break label$10
     }
     $44_1 = ~~$72_1;
     break label$9;
    }
    $44_1 = -2147483648;
   }
   HEAP32[(HEAP32[($6_1 + 4 | 0) >> 2] | 0) >> 2] = $44_1;
   $75_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
   label$11 : {
    label$12 : {
     if (!(Math_abs($75_1) < 2147483648.0)) {
      break label$12
     }
     $57_1 = ~~$75_1;
     break label$11;
    }
    $57_1 = -2147483648;
   }
   HEAP32[(HEAP32[$6_1 >> 2] | 0) >> 2] = $57_1;
  }
  $61_1 = 0;
  label$13 : {
   $65_1 = $6_1 + 16 | 0;
   if ($65_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $65_1;
  }
  return $61_1 | 0;
 }
 
 function $259($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $45_1 = 0, $724_1 = 0.0, $62_1 = 0, $727_1 = 0.0, $76_1 = 0, $730_1 = 0.0, $89_1 = 0, $733_1 = 0.0, $103_1 = 0, $736_1 = 0.0, $141_1 = 0, $741_1 = 0.0, $174_1 = 0, $746_1 = 0.0, $212_1 = 0, $751_1 = 0.0, $245_1 = 0, $756_1 = 0.0, $278_1 = 0, $759_1 = 0.0, $292_1 = 0, $762_1 = 0.0, $305_1 = 0, $765_1 = 0.0, $319_1 = 0, $768_1 = 0.0, $357_1 = 0, $773_1 = 0.0, $390_1 = 0, $778_1 = 0.0, $428_1 = 0, $783_1 = 0.0, $461_1 = 0, $484_1 = 0, $495_1 = 0, $788_1 = 0.0, $507_1 = 0, $791_1 = 0.0, $521_1 = 0, $794_1 = 0.0, $534_1 = 0, $797_1 = 0.0, $548_1 = 0, $800_1 = 0.0, $586_1 = 0, $805_1 = 0.0, $619_1 = 0, $810_1 = 0.0, $657_1 = 0, $815_1 = 0.0, $690_1 = 0, $714_1 = 0, $723_1 = 0, $722_1 = 0, $719_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8_1 = global$0 - 192 | 0;
  label$1 : {
   $722_1 = $8_1;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $722_1;
  }
  HEAP32[($8_1 + 184 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 180 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 176 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 172 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 168 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 164 | 0) >> 2] = $5_1;
  HEAP32[($8_1 + 160 | 0) >> 2] = HEAP32[($8_1 + 176 | 0) >> 2] | 0;
  HEAP32[($8_1 + 156 | 0) >> 2] = HEAP32[($8_1 + 172 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $254(HEAP32[($8_1 + 184 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 152 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    label$5 : {
     if ((HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$5
     }
     if ((HEAP32[($8_1 + 156 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$5
     }
     if ((HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) > ((HEAP32[($8_1 + 152 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0) {
      break label$5
     }
     if (!((HEAP32[($8_1 + 156 | 0) >> 2] | 0 | 0) > ((HEAP32[($8_1 + 152 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
      break label$4
     }
    }
    $45_1 = 7;
    $28(6135 | 0, 5910 | 0, 1149 | 0, $45_1 | 0) | 0;
    HEAP32[($8_1 + 188 | 0) >> 2] = $45_1;
    break label$3;
   }
   HEAP32[(HEAP32[($8_1 + 180 | 0) >> 2] | 0) >> 2] = -1;
   label$6 : {
    label$7 : {
     if (!($253(HEAP32[($8_1 + 184 | 0) >> 2] | 0 | 0) | 0)) {
      break label$7
     }
     $724_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 160 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$8 : {
      label$9 : {
       if (!(Math_abs($724_1) < 2147483648.0)) {
        break label$9
       }
       $62_1 = ~~$724_1;
       break label$8;
      }
      $62_1 = -2147483648;
     }
     HEAP32[($8_1 + 148 | 0) >> 2] = $62_1;
     $727_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 160 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
     label$10 : {
      label$11 : {
       if (!(Math_abs($727_1) < 2147483648.0)) {
        break label$11
       }
       $76_1 = ~~$727_1;
       break label$10;
      }
      $76_1 = -2147483648;
     }
     HEAP32[($8_1 + 144 | 0) >> 2] = $76_1;
     HEAP32[($8_1 + 140 | 0) >> 2] = HEAP32[($8_1 + 144 | 0) >> 2] | 0;
     $730_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 156 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$12 : {
      label$13 : {
       if (!(Math_abs($730_1) < 2147483648.0)) {
        break label$13
       }
       $89_1 = ~~$730_1;
       break label$12;
      }
      $89_1 = -2147483648;
     }
     HEAP32[($8_1 + 136 | 0) >> 2] = $89_1;
     $733_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
     label$14 : {
      label$15 : {
       if (!(Math_abs($733_1) < 2147483648.0)) {
        break label$15
       }
       $103_1 = ~~$733_1;
       break label$14;
      }
      $103_1 = -2147483648;
     }
     HEAP32[($8_1 + 132 | 0) >> 2] = $103_1;
     HEAP32[($8_1 + 128 | 0) >> 2] = HEAP32[($8_1 + 132 | 0) >> 2] | 0;
     label$16 : {
      label$17 : {
       if (!(((HEAP32[($8_1 + 144 | 0) >> 2] | 0) - (HEAP32[($8_1 + 148 | 0) >> 2] | 0) | 0 | 0) < ((HEAP32[($8_1 + 132 | 0) >> 2] | 0) - (HEAP32[($8_1 + 136 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
        break label$17
       }
       label$18 : {
        label$19 : while (1) {
         if (!((HEAP32[($8_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 144 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$18
         }
         HEAP32[($8_1 + 124 | 0) >> 2] = (HEAP32[($8_1 + 148 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 144 | 0) >> 2] | 0) - (HEAP32[($8_1 + 148 | 0) >> 2] | 0) | 0 | 0) / (2 | 0) | 0) | 0;
         $736_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         label$20 : {
          label$21 : {
           if (!(Math_abs($736_1) < 2147483648.0)) {
            break label$21
           }
           $141_1 = ~~$736_1;
           break label$20;
          }
          $141_1 = -2147483648;
         }
         HEAP32[($8_1 + 120 | 0) >> 2] = $141_1;
         label$22 : {
          label$23 : {
           if (!(+HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(HEAP32[($8_1 + 156 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$23
           }
           HEAP32[($8_1 + 148 | 0) >> 2] = (HEAP32[($8_1 + 124 | 0) >> 2] | 0) + 1 | 0;
           break label$22;
          }
          HEAP32[($8_1 + 144 | 0) >> 2] = HEAP32[($8_1 + 124 | 0) >> 2] | 0;
         }
         continue label$19;
        };
       }
       label$24 : {
        if (!((HEAP32[($8_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$24
        }
        $741_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$25 : {
         label$26 : {
          if (!(Math_abs($741_1) < 2147483648.0)) {
           break label$26
          }
          $174_1 = ~~$741_1;
          break label$25;
         }
         $174_1 = -2147483648;
        }
        HEAP32[($8_1 + 116 | 0) >> 2] = $174_1;
        label$27 : {
         if (!(+HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($8_1 + 156 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$27
         }
         HEAP32[(HEAP32[($8_1 + 180 | 0) >> 2] | 0) >> 2] = HEAP32[($8_1 + 116 | 0) >> 2] | 0;
        }
       }
       break label$16;
      }
      label$28 : {
       label$29 : while (1) {
        if (!((HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$28
        }
        HEAP32[($8_1 + 112 | 0) >> 2] = (HEAP32[($8_1 + 136 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 132 | 0) >> 2] | 0) - (HEAP32[($8_1 + 136 | 0) >> 2] | 0) | 0 | 0) / (2 | 0) | 0) | 0;
        $746_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$30 : {
         label$31 : {
          if (!(Math_abs($746_1) < 2147483648.0)) {
           break label$31
          }
          $212_1 = ~~$746_1;
          break label$30;
         }
         $212_1 = -2147483648;
        }
        HEAP32[($8_1 + 108 | 0) >> 2] = $212_1;
        label$32 : {
         label$33 : {
          if (!(+HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 108 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$33
          }
          HEAP32[($8_1 + 136 | 0) >> 2] = (HEAP32[($8_1 + 112 | 0) >> 2] | 0) + 1 | 0;
          break label$32;
         }
         HEAP32[($8_1 + 132 | 0) >> 2] = HEAP32[($8_1 + 112 | 0) >> 2] | 0;
        }
        continue label$29;
       };
      }
      label$34 : {
       if (!((HEAP32[($8_1 + 136 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 128 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$34
       }
       $751_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       label$35 : {
        label$36 : {
         if (!(Math_abs($751_1) < 2147483648.0)) {
          break label$36
         }
         $245_1 = ~~$751_1;
         break label$35;
        }
        $245_1 = -2147483648;
       }
       HEAP32[($8_1 + 104 | 0) >> 2] = $245_1;
       label$37 : {
        if (!(+HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 104 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$37
        }
        HEAP32[(HEAP32[($8_1 + 180 | 0) >> 2] | 0) >> 2] = HEAP32[($8_1 + 104 | 0) >> 2] | 0;
       }
      }
     }
     label$38 : {
      if (HEAP32[($8_1 + 168 | 0) >> 2] | 0) {
       break label$38
      }
      if (!((HEAP32[(HEAP32[($8_1 + 180 | 0) >> 2] | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
       break label$38
      }
      $756_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 156 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$39 : {
       label$40 : {
        if (!(Math_abs($756_1) < 2147483648.0)) {
         break label$40
        }
        $278_1 = ~~$756_1;
        break label$39;
       }
       $278_1 = -2147483648;
      }
      HEAP32[($8_1 + 100 | 0) >> 2] = $278_1;
      $759_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 156 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
      label$41 : {
       label$42 : {
        if (!(Math_abs($759_1) < 2147483648.0)) {
         break label$42
        }
        $292_1 = ~~$759_1;
        break label$41;
       }
       $292_1 = -2147483648;
      }
      HEAP32[($8_1 + 96 | 0) >> 2] = $292_1;
      HEAP32[($8_1 + 92 | 0) >> 2] = HEAP32[($8_1 + 96 | 0) >> 2] | 0;
      $762_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 160 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$43 : {
       label$44 : {
        if (!(Math_abs($762_1) < 2147483648.0)) {
         break label$44
        }
        $305_1 = ~~$762_1;
        break label$43;
       }
       $305_1 = -2147483648;
      }
      HEAP32[($8_1 + 88 | 0) >> 2] = $305_1;
      $765_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 160 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
      label$45 : {
       label$46 : {
        if (!(Math_abs($765_1) < 2147483648.0)) {
         break label$46
        }
        $319_1 = ~~$765_1;
        break label$45;
       }
       $319_1 = -2147483648;
      }
      HEAP32[($8_1 + 84 | 0) >> 2] = $319_1;
      HEAP32[($8_1 + 80 | 0) >> 2] = HEAP32[($8_1 + 84 | 0) >> 2] | 0;
      label$47 : {
       label$48 : {
        if (!(((HEAP32[($8_1 + 96 | 0) >> 2] | 0) - (HEAP32[($8_1 + 100 | 0) >> 2] | 0) | 0 | 0) < ((HEAP32[($8_1 + 84 | 0) >> 2] | 0) - (HEAP32[($8_1 + 88 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
         break label$48
        }
        label$49 : {
         label$50 : while (1) {
          if (!((HEAP32[($8_1 + 100 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 96 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$49
          }
          HEAP32[($8_1 + 76 | 0) >> 2] = (HEAP32[($8_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 96 | 0) >> 2] | 0) - (HEAP32[($8_1 + 100 | 0) >> 2] | 0) | 0 | 0) / (2 | 0) | 0) | 0;
          $768_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          label$51 : {
           label$52 : {
            if (!(Math_abs($768_1) < 2147483648.0)) {
             break label$52
            }
            $357_1 = ~~$768_1;
            break label$51;
           }
           $357_1 = -2147483648;
          }
          HEAP32[($8_1 + 72 | 0) >> 2] = $357_1;
          label$53 : {
           label$54 : {
            if (!(+HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 72 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$54
            }
            HEAP32[($8_1 + 100 | 0) >> 2] = (HEAP32[($8_1 + 76 | 0) >> 2] | 0) + 1 | 0;
            break label$53;
           }
           HEAP32[($8_1 + 96 | 0) >> 2] = HEAP32[($8_1 + 76 | 0) >> 2] | 0;
          }
          continue label$50;
         };
        }
        label$55 : {
         if (!((HEAP32[($8_1 + 100 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$55
         }
         $773_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         label$56 : {
          label$57 : {
           if (!(Math_abs($773_1) < 2147483648.0)) {
            break label$57
           }
           $390_1 = ~~$773_1;
           break label$56;
          }
          $390_1 = -2147483648;
         }
         HEAP32[($8_1 + 68 | 0) >> 2] = $390_1;
         label$58 : {
          if (!(+HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$58
          }
          HEAP32[(HEAP32[($8_1 + 180 | 0) >> 2] | 0) >> 2] = HEAP32[($8_1 + 68 | 0) >> 2] | 0;
         }
        }
        break label$47;
       }
       label$59 : {
        label$60 : while (1) {
         if (!((HEAP32[($8_1 + 88 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$59
         }
         HEAP32[($8_1 + 64 | 0) >> 2] = (HEAP32[($8_1 + 88 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 84 | 0) >> 2] | 0) - (HEAP32[($8_1 + 88 | 0) >> 2] | 0) | 0 | 0) / (2 | 0) | 0) | 0;
         $778_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 64 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         label$61 : {
          label$62 : {
           if (!(Math_abs($778_1) < 2147483648.0)) {
            break label$62
           }
           $428_1 = ~~$778_1;
           break label$61;
          }
          $428_1 = -2147483648;
         }
         HEAP32[($8_1 + 60 | 0) >> 2] = $428_1;
         label$63 : {
          label$64 : {
           if (!(+HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 60 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(HEAP32[($8_1 + 156 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$64
           }
           HEAP32[($8_1 + 88 | 0) >> 2] = (HEAP32[($8_1 + 64 | 0) >> 2] | 0) + 1 | 0;
           break label$63;
          }
          HEAP32[($8_1 + 84 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
         }
         continue label$60;
        };
       }
       label$65 : {
        if (!((HEAP32[($8_1 + 88 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 80 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$65
        }
        $783_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$66 : {
         label$67 : {
          if (!(Math_abs($783_1) < 2147483648.0)) {
           break label$67
          }
          $461_1 = ~~$783_1;
          break label$66;
         }
         $461_1 = -2147483648;
        }
        HEAP32[($8_1 + 56 | 0) >> 2] = $461_1;
        label$68 : {
         if (!(+HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($8_1 + 156 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$68
         }
         HEAP32[(HEAP32[($8_1 + 180 | 0) >> 2] | 0) >> 2] = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
        }
       }
      }
     }
     break label$6;
    }
    label$69 : {
     label$70 : {
      if (!((HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) > (HEAP32[($8_1 + 156 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$70
      }
      $484_1 = HEAP32[($8_1 + 160 | 0) >> 2] | 0;
      break label$69;
     }
     $484_1 = HEAP32[($8_1 + 156 | 0) >> 2] | 0;
    }
    HEAP32[($8_1 + 52 | 0) >> 2] = $484_1;
    label$71 : {
     label$72 : {
      if (!((HEAP32[($8_1 + 160 | 0) >> 2] | 0 | 0) > (HEAP32[($8_1 + 156 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$72
      }
      $495_1 = HEAP32[($8_1 + 156 | 0) >> 2] | 0;
      break label$71;
     }
     $495_1 = HEAP32[($8_1 + 160 | 0) >> 2] | 0;
    }
    HEAP32[($8_1 + 48 | 0) >> 2] = $495_1;
    $788_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    label$73 : {
     label$74 : {
      if (!(Math_abs($788_1) < 2147483648.0)) {
       break label$74
      }
      $507_1 = ~~$788_1;
      break label$73;
     }
     $507_1 = -2147483648;
    }
    HEAP32[($8_1 + 44 | 0) >> 2] = $507_1;
    $791_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 52 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
    label$75 : {
     label$76 : {
      if (!(Math_abs($791_1) < 2147483648.0)) {
       break label$76
      }
      $521_1 = ~~$791_1;
      break label$75;
     }
     $521_1 = -2147483648;
    }
    HEAP32[($8_1 + 40 | 0) >> 2] = $521_1;
    HEAP32[($8_1 + 36 | 0) >> 2] = HEAP32[($8_1 + 40 | 0) >> 2] | 0;
    $794_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    label$77 : {
     label$78 : {
      if (!(Math_abs($794_1) < 2147483648.0)) {
       break label$78
      }
      $534_1 = ~~$794_1;
      break label$77;
     }
     $534_1 = -2147483648;
    }
    HEAP32[($8_1 + 32 | 0) >> 2] = $534_1;
    $797_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 48 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
    label$79 : {
     label$80 : {
      if (!(Math_abs($797_1) < 2147483648.0)) {
       break label$80
      }
      $548_1 = ~~$797_1;
      break label$79;
     }
     $548_1 = -2147483648;
    }
    HEAP32[($8_1 + 28 | 0) >> 2] = $548_1;
    HEAP32[($8_1 + 24 | 0) >> 2] = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
    label$81 : {
     label$82 : {
      if (!(((HEAP32[($8_1 + 40 | 0) >> 2] | 0) - (HEAP32[($8_1 + 44 | 0) >> 2] | 0) | 0 | 0) < ((HEAP32[($8_1 + 28 | 0) >> 2] | 0) - (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
       break label$82
      }
      label$83 : {
       label$84 : while (1) {
        if (!((HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$83
        }
        HEAP32[($8_1 + 20 | 0) >> 2] = (HEAP32[($8_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 40 | 0) >> 2] | 0) - (HEAP32[($8_1 + 44 | 0) >> 2] | 0) | 0 | 0) / (2 | 0) | 0) | 0;
        $800_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$85 : {
         label$86 : {
          if (!(Math_abs($800_1) < 2147483648.0)) {
           break label$86
          }
          $586_1 = ~~$800_1;
          break label$85;
         }
         $586_1 = -2147483648;
        }
        HEAP32[($8_1 + 16 | 0) >> 2] = $586_1;
        label$87 : {
         label$88 : {
          if (!(+HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$88
          }
          HEAP32[($8_1 + 44 | 0) >> 2] = (HEAP32[($8_1 + 20 | 0) >> 2] | 0) + 1 | 0;
          break label$87;
         }
         HEAP32[($8_1 + 40 | 0) >> 2] = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
        }
        continue label$84;
       };
      }
      label$89 : {
       if (!((HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$89
       }
       $805_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       label$90 : {
        label$91 : {
         if (!(Math_abs($805_1) < 2147483648.0)) {
          break label$91
         }
         $619_1 = ~~$805_1;
         break label$90;
        }
        $619_1 = -2147483648;
       }
       HEAP32[($8_1 + 12 | 0) >> 2] = $619_1;
       label$92 : {
        if (!(+HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$92
        }
        HEAP32[(HEAP32[($8_1 + 180 | 0) >> 2] | 0) >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
       }
      }
      break label$81;
     }
     label$93 : {
      label$94 : while (1) {
       if (!((HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$93
       }
       HEAP32[($8_1 + 8 | 0) >> 2] = (HEAP32[($8_1 + 32 | 0) >> 2] | 0) + (((HEAP32[($8_1 + 28 | 0) >> 2] | 0) - (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0 | 0) / (2 | 0) | 0) | 0;
       $810_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       label$95 : {
        label$96 : {
         if (!(Math_abs($810_1) < 2147483648.0)) {
          break label$96
         }
         $657_1 = ~~$810_1;
         break label$95;
        }
        $657_1 = -2147483648;
       }
       HEAP32[($8_1 + 4 | 0) >> 2] = $657_1;
       label$97 : {
        label$98 : {
         if (!(+HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$98
         }
         HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 8 | 0) >> 2] | 0) + 1 | 0;
         break label$97;
        }
        HEAP32[($8_1 + 28 | 0) >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
       }
       continue label$94;
      };
     }
     label$99 : {
      if (!((HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$99
      }
      $815_1 = +HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($8_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$100 : {
       label$101 : {
        if (!(Math_abs($815_1) < 2147483648.0)) {
         break label$101
        }
        $690_1 = ~~$815_1;
        break label$100;
       }
       $690_1 = -2147483648;
      }
      HEAP32[$8_1 >> 2] = $690_1;
      label$102 : {
       if (!(+HEAPF64[((HEAP32[((HEAP32[($8_1 + 184 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[$8_1 >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$102
       }
       HEAP32[(HEAP32[($8_1 + 180 | 0) >> 2] | 0) >> 2] = HEAP32[$8_1 >> 2] | 0;
      }
     }
    }
   }
   label$103 : {
    if (!((HEAP32[(HEAP32[($8_1 + 180 | 0) >> 2] | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
     break label$103
    }
    label$104 : {
     if (!(HEAP32[($8_1 + 164 | 0) >> 2] | 0)) {
      break label$104
     }
     $714_1 = 4;
     $28(6154 | 0, 5910 | 0, 1170 | 0, $714_1 | 0) | 0;
     HEAP32[($8_1 + 188 | 0) >> 2] = $714_1;
     break label$3;
    }
   }
   HEAP32[($8_1 + 188 | 0) >> 2] = 0;
  }
  $719_1 = HEAP32[($8_1 + 188 | 0) >> 2] | 0;
  label$105 : {
   $723_1 = $8_1 + 192 | 0;
   if ($723_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $723_1;
  }
  return $719_1 | 0;
 }
 
 function $260($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $235_1 = 0, $360_1 = 0, $558_1 = 0, $683_1 = 0, $964_1 = 0, $1089_1 = 0, $18_1 = 0, $28_1 = 0, $42_1 = 0, $1185 = 0.0, $84_1 = 0, $1188 = 0.0, $100_1 = 0, $1191 = 0.0, $112_1 = 0, $1194 = 0.0, $126_1 = 0, $1197 = 0.0, $139_1 = 0, $1200 = 0.0, $153_1 = 0, $1203 = 0.0, $191_1 = 0, $1208 = 0.0, $224_1 = 0, $1213 = 0.0, $266_1 = 0, $1218 = 0.0, $316_1 = 0, $1223 = 0.0, $349_1 = 0, $1228 = 0.0, $391_1 = 0, $1233 = 0.0, $435_1 = 0, $1236 = 0.0, $449_1 = 0, $1239 = 0.0, $462_1 = 0, $1242 = 0.0, $476_1 = 0, $1245 = 0.0, $514_1 = 0, $1250 = 0.0, $547_1 = 0, $1255 = 0.0, $589_1 = 0, $1260 = 0.0, $639_1 = 0, $1265 = 0.0, $672_1 = 0, $1270 = 0.0, $714_1 = 0, $762_1 = 0, $1276 = 0.0, $791_1 = 0, $1279 = 0.0, $807_1 = 0, $818_1 = 0, $829_1 = 0, $1282 = 0.0, $841_1 = 0, $1285 = 0.0, $855_1 = 0, $1288 = 0.0, $868_1 = 0, $1291 = 0.0, $882_1 = 0, $1294 = 0.0, $920_1 = 0, $1299 = 0.0, $953_1 = 0, $1304 = 0.0, $995_1 = 0, $1309 = 0.0, $1045_1 = 0, $1314 = 0.0, $1078_1 = 0, $1319 = 0.0, $1120 = 0, $1168 = 0, $1175 = 0, $1182 = 0, $1181 = 0, $72_1 = 0, $779_1 = 0, $1178 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 224 | 0;
  label$1 : {
   $1181 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $1181;
  }
  HEAP32[($7_1 + 216 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 212 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 208 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 204 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 200 | 0) >> 2] = $4_1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $490(HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 196 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $254(HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 192 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $249(HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 188 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($7_1 + 176 | 0) >> 2] = -1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($7_1 + 196 | 0) >> 2] | 0 | 0) % (2 | 0) | 0)) {
     break label$4
    }
    $18_1 = 4;
    $28(6187 | 0, 5910 | 0, 1437 | 0, $18_1 | 0) | 0;
    HEAP32[($7_1 + 220 | 0) >> 2] = $18_1;
    break label$3;
   }
   label$5 : {
    if ($509(HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, +(+(0 | 0)), +(+((HEAP32[($7_1 + 192 | 0) >> 2] | 0) - 1 | 0 | 0))) | 0) {
     break label$5
    }
    $28_1 = 7;
    $28(6235 | 0, 5910 | 0, 1440 | 0, $28_1 | 0) | 0;
    HEAP32[($7_1 + 220 | 0) >> 2] = $28_1;
    break label$3;
   }
   (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $1068(HEAP32[($7_1 + 188 | 0) >> 2] | 0 | 0, 4 | 0) | 0), HEAP32[(wasm2js_i32$0 + 184 | 0) >> 2] = wasm2js_i32$1;
   label$6 : {
    if (!((HEAP32[($7_1 + 184 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$6
    }
    $42_1 = 2;
    $28(6274 | 0, 5910 | 0, 1445 | 0, $42_1 | 0) | 0;
    HEAP32[($7_1 + 220 | 0) >> 2] = $42_1;
    break label$3;
   }
   $33(2 | 0, HEAP32[($7_1 + 184 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $494(HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 196 | 0) >> 2] | 0 | 0) / (2 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 172 | 0) >> 2] = wasm2js_i32$1;
   label$7 : {
    if (!(HEAP32[($7_1 + 172 | 0) >> 2] | 0)) {
     break label$7
    }
    $28(5994 | 0, 5910 | 0, 1448 | 0, HEAP32[($7_1 + 172 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($7_1 + 220 | 0) >> 2] = HEAP32[($7_1 + 172 | 0) >> 2] | 0;
    break label$3;
   }
   label$8 : {
    label$9 : {
     if (!($253(HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) | 0)) {
      break label$9
     }
     HEAP32[($7_1 + 180 | 0) >> 2] = 0;
     label$10 : {
      label$11 : while (1) {
       if (!((HEAP32[($7_1 + 180 | 0) >> 2] | 0 | 0) < ((HEAP32[($7_1 + 196 | 0) >> 2] | 0 | 0) / (2 | 0) | 0 | 0) & 1 | 0)) {
        break label$10
       }
       $72_1 = -1;
       $1185 = +HEAPF64[((HEAP32[(HEAP32[($7_1 + 208 | 0) >> 2] | 0) >> 2] | 0) + (((HEAP32[($7_1 + 180 | 0) >> 2] | 0) << 1 | 0) << 3 | 0) | 0) >> 3];
       label$12 : {
        label$13 : {
         if (!(Math_abs($1185) < 2147483648.0)) {
          break label$13
         }
         $84_1 = ~~$1185;
         break label$12;
        }
        $84_1 = -2147483648;
       }
       HEAP32[($7_1 + 168 | 0) >> 2] = $84_1;
       $1188 = +HEAPF64[((HEAP32[(HEAP32[($7_1 + 208 | 0) >> 2] | 0) >> 2] | 0) + ((((HEAP32[($7_1 + 180 | 0) >> 2] | 0) << 1 | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
       label$14 : {
        label$15 : {
         if (!(Math_abs($1188) < 2147483648.0)) {
          break label$15
         }
         $100_1 = ~~$1188;
         break label$14;
        }
        $100_1 = -2147483648;
       }
       HEAP32[($7_1 + 164 | 0) >> 2] = $100_1;
       HEAP32[($7_1 + 176 | 0) >> 2] = $72_1;
       $1191 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 168 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       label$16 : {
        label$17 : {
         if (!(Math_abs($1191) < 2147483648.0)) {
          break label$17
         }
         $112_1 = ~~$1191;
         break label$16;
        }
        $112_1 = -2147483648;
       }
       HEAP32[($7_1 + 160 | 0) >> 2] = $112_1;
       $1194 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
       label$18 : {
        label$19 : {
         if (!(Math_abs($1194) < 2147483648.0)) {
          break label$19
         }
         $126_1 = ~~$1194;
         break label$18;
        }
        $126_1 = -2147483648;
       }
       HEAP32[($7_1 + 156 | 0) >> 2] = $126_1;
       HEAP32[($7_1 + 152 | 0) >> 2] = HEAP32[($7_1 + 156 | 0) >> 2] | 0;
       $1197 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 164 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       label$20 : {
        label$21 : {
         if (!(Math_abs($1197) < 2147483648.0)) {
          break label$21
         }
         $139_1 = ~~$1197;
         break label$20;
        }
        $139_1 = -2147483648;
       }
       HEAP32[($7_1 + 148 | 0) >> 2] = $139_1;
       $1200 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 164 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
       label$22 : {
        label$23 : {
         if (!(Math_abs($1200) < 2147483648.0)) {
          break label$23
         }
         $153_1 = ~~$1200;
         break label$22;
        }
        $153_1 = -2147483648;
       }
       HEAP32[($7_1 + 144 | 0) >> 2] = $153_1;
       HEAP32[($7_1 + 140 | 0) >> 2] = HEAP32[($7_1 + 144 | 0) >> 2] | 0;
       label$24 : {
        label$25 : {
         if (!(((HEAP32[($7_1 + 156 | 0) >> 2] | 0) - (HEAP32[($7_1 + 160 | 0) >> 2] | 0) | 0 | 0) < ((HEAP32[($7_1 + 144 | 0) >> 2] | 0) - (HEAP32[($7_1 + 148 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
          break label$25
         }
         label$26 : {
          label$27 : while (1) {
           if (!((HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 156 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$26
           }
           HEAP32[($7_1 + 136 | 0) >> 2] = (HEAP32[($7_1 + 160 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 156 | 0) >> 2] | 0) - (HEAP32[($7_1 + 160 | 0) >> 2] | 0) | 0 | 0) / (2 | 0) | 0) | 0;
           $1203 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           label$28 : {
            label$29 : {
             if (!(Math_abs($1203) < 2147483648.0)) {
              break label$29
             }
             $191_1 = ~~$1203;
             break label$28;
            }
            $191_1 = -2147483648;
           }
           HEAP32[($7_1 + 132 | 0) >> 2] = $191_1;
           label$30 : {
            label$31 : {
             if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(HEAP32[($7_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$31
             }
             HEAP32[($7_1 + 160 | 0) >> 2] = (HEAP32[($7_1 + 136 | 0) >> 2] | 0) + 1 | 0;
             break label$30;
            }
            HEAP32[($7_1 + 156 | 0) >> 2] = HEAP32[($7_1 + 136 | 0) >> 2] | 0;
           }
           continue label$27;
          };
         }
         label$32 : {
          if (!((HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$32
          }
          $1208 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 160 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          label$33 : {
           label$34 : {
            if (!(Math_abs($1208) < 2147483648.0)) {
             break label$34
            }
            $224_1 = ~~$1208;
            break label$33;
           }
           $224_1 = -2147483648;
          }
          HEAP32[($7_1 + 128 | 0) >> 2] = $224_1;
          label$35 : while (1) {
           $235_1 = 0;
           label$36 : {
            if (!((HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$36
            }
            $235_1 = 0;
            if (!(HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 128 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0)) {
             break label$36
            }
            $235_1 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 164 | 0) >> 2] | 0 | 0);
           }
           label$37 : {
            if (!($235_1 & 1 | 0)) {
             break label$37
            }
            HEAP32[($7_1 + 160 | 0) >> 2] = (HEAP32[($7_1 + 160 | 0) >> 2] | 0) + 1 | 0;
            $1213 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 160 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            label$38 : {
             label$39 : {
              if (!(Math_abs($1213) < 2147483648.0)) {
               break label$39
              }
              $266_1 = ~~$1213;
              break label$38;
             }
             $266_1 = -2147483648;
            }
            HEAP32[($7_1 + 128 | 0) >> 2] = $266_1;
            continue label$35;
           }
           break label$35;
          };
          label$40 : {
           if (!((HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$40
           }
           if (HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 128 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) {
            break label$40
           }
           if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$40
           }
           HEAP32[($7_1 + 176 | 0) >> 2] = HEAP32[($7_1 + 128 | 0) >> 2] | 0;
          }
         }
         break label$24;
        }
        label$41 : {
         label$42 : while (1) {
          if (!((HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 144 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$41
          }
          HEAP32[($7_1 + 124 | 0) >> 2] = (HEAP32[($7_1 + 148 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 144 | 0) >> 2] | 0) - (HEAP32[($7_1 + 148 | 0) >> 2] | 0) | 0 | 0) / (2 | 0) | 0) | 0;
          $1218 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          label$43 : {
           label$44 : {
            if (!(Math_abs($1218) < 2147483648.0)) {
             break label$44
            }
            $316_1 = ~~$1218;
            break label$43;
           }
           $316_1 = -2147483648;
          }
          HEAP32[($7_1 + 120 | 0) >> 2] = $316_1;
          label$45 : {
           label$46 : {
            if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(HEAP32[($7_1 + 168 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$46
            }
            HEAP32[($7_1 + 148 | 0) >> 2] = (HEAP32[($7_1 + 124 | 0) >> 2] | 0) + 1 | 0;
            break label$45;
           }
           HEAP32[($7_1 + 144 | 0) >> 2] = HEAP32[($7_1 + 124 | 0) >> 2] | 0;
          }
          continue label$42;
         };
        }
        label$47 : {
         if (!((HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$47
         }
         $1223 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         label$48 : {
          label$49 : {
           if (!(Math_abs($1223) < 2147483648.0)) {
            break label$49
           }
           $349_1 = ~~$1223;
           break label$48;
          }
          $349_1 = -2147483648;
         }
         HEAP32[($7_1 + 116 | 0) >> 2] = $349_1;
         label$50 : while (1) {
          $360_1 = 0;
          label$51 : {
           if (!((HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$51
           }
           $360_1 = 0;
           if (!(HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 116 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0)) {
            break label$51
           }
           $360_1 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 168 | 0) >> 2] | 0 | 0);
          }
          label$52 : {
           if (!($360_1 & 1 | 0)) {
            break label$52
           }
           HEAP32[($7_1 + 148 | 0) >> 2] = (HEAP32[($7_1 + 148 | 0) >> 2] | 0) + 1 | 0;
           $1228 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           label$53 : {
            label$54 : {
             if (!(Math_abs($1228) < 2147483648.0)) {
              break label$54
             }
             $391_1 = ~~$1228;
             break label$53;
            }
            $391_1 = -2147483648;
           }
           HEAP32[($7_1 + 116 | 0) >> 2] = $391_1;
           continue label$50;
          }
          break label$50;
         };
         label$55 : {
          if (!((HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$55
          }
          if (HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 116 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) {
           break label$55
          }
          if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 168 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$55
          }
          HEAP32[($7_1 + 176 | 0) >> 2] = HEAP32[($7_1 + 116 | 0) >> 2] | 0;
         }
        }
       }
       label$56 : {
        if (HEAP32[($7_1 + 204 | 0) >> 2] | 0) {
         break label$56
        }
        if (!((HEAP32[($7_1 + 176 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
         break label$56
        }
        $1233 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 164 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$57 : {
         label$58 : {
          if (!(Math_abs($1233) < 2147483648.0)) {
           break label$58
          }
          $435_1 = ~~$1233;
          break label$57;
         }
         $435_1 = -2147483648;
        }
        HEAP32[($7_1 + 112 | 0) >> 2] = $435_1;
        $1236 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 164 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
        label$59 : {
         label$60 : {
          if (!(Math_abs($1236) < 2147483648.0)) {
           break label$60
          }
          $449_1 = ~~$1236;
          break label$59;
         }
         $449_1 = -2147483648;
        }
        HEAP32[($7_1 + 108 | 0) >> 2] = $449_1;
        HEAP32[($7_1 + 104 | 0) >> 2] = HEAP32[($7_1 + 108 | 0) >> 2] | 0;
        $1239 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 168 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$61 : {
         label$62 : {
          if (!(Math_abs($1239) < 2147483648.0)) {
           break label$62
          }
          $462_1 = ~~$1239;
          break label$61;
         }
         $462_1 = -2147483648;
        }
        HEAP32[($7_1 + 100 | 0) >> 2] = $462_1;
        $1242 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
        label$63 : {
         label$64 : {
          if (!(Math_abs($1242) < 2147483648.0)) {
           break label$64
          }
          $476_1 = ~~$1242;
          break label$63;
         }
         $476_1 = -2147483648;
        }
        HEAP32[($7_1 + 96 | 0) >> 2] = $476_1;
        HEAP32[($7_1 + 92 | 0) >> 2] = HEAP32[($7_1 + 96 | 0) >> 2] | 0;
        label$65 : {
         label$66 : {
          if (!(((HEAP32[($7_1 + 108 | 0) >> 2] | 0) - (HEAP32[($7_1 + 112 | 0) >> 2] | 0) | 0 | 0) < ((HEAP32[($7_1 + 96 | 0) >> 2] | 0) - (HEAP32[($7_1 + 100 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
           break label$66
          }
          label$67 : {
           label$68 : while (1) {
            if (!((HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 108 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$67
            }
            HEAP32[($7_1 + 88 | 0) >> 2] = (HEAP32[($7_1 + 112 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 108 | 0) >> 2] | 0) - (HEAP32[($7_1 + 112 | 0) >> 2] | 0) | 0 | 0) / (2 | 0) | 0) | 0;
            $1245 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            label$69 : {
             label$70 : {
              if (!(Math_abs($1245) < 2147483648.0)) {
               break label$70
              }
              $514_1 = ~~$1245;
              break label$69;
             }
             $514_1 = -2147483648;
            }
            HEAP32[($7_1 + 84 | 0) >> 2] = $514_1;
            label$71 : {
             label$72 : {
              if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(HEAP32[($7_1 + 168 | 0) >> 2] | 0 | 0) & 1 | 0)) {
               break label$72
              }
              HEAP32[($7_1 + 112 | 0) >> 2] = (HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 1 | 0;
              break label$71;
             }
             HEAP32[($7_1 + 108 | 0) >> 2] = HEAP32[($7_1 + 88 | 0) >> 2] | 0;
            }
            continue label$68;
           };
          }
          label$73 : {
           if (!((HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$73
           }
           $1250 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           label$74 : {
            label$75 : {
             if (!(Math_abs($1250) < 2147483648.0)) {
              break label$75
             }
             $547_1 = ~~$1250;
             break label$74;
            }
            $547_1 = -2147483648;
           }
           HEAP32[($7_1 + 80 | 0) >> 2] = $547_1;
           label$76 : while (1) {
            $558_1 = 0;
            label$77 : {
             if (!((HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$77
             }
             $558_1 = 0;
             if (!(HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0)) {
              break label$77
             }
             $558_1 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 80 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 168 | 0) >> 2] | 0 | 0);
            }
            label$78 : {
             if (!($558_1 & 1 | 0)) {
              break label$78
             }
             HEAP32[($7_1 + 112 | 0) >> 2] = (HEAP32[($7_1 + 112 | 0) >> 2] | 0) + 1 | 0;
             $1255 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
             label$79 : {
              label$80 : {
               if (!(Math_abs($1255) < 2147483648.0)) {
                break label$80
               }
               $589_1 = ~~$1255;
               break label$79;
              }
              $589_1 = -2147483648;
             }
             HEAP32[($7_1 + 80 | 0) >> 2] = $589_1;
             continue label$76;
            }
            break label$76;
           };
           label$81 : {
            if (!((HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$81
            }
            if (HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) {
             break label$81
            }
            if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 80 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 168 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$81
            }
            HEAP32[($7_1 + 176 | 0) >> 2] = HEAP32[($7_1 + 80 | 0) >> 2] | 0;
           }
          }
          break label$65;
         }
         label$82 : {
          label$83 : while (1) {
           if (!((HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 96 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$82
           }
           HEAP32[($7_1 + 76 | 0) >> 2] = (HEAP32[($7_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 96 | 0) >> 2] | 0) - (HEAP32[($7_1 + 100 | 0) >> 2] | 0) | 0 | 0) / (2 | 0) | 0) | 0;
           $1260 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           label$84 : {
            label$85 : {
             if (!(Math_abs($1260) < 2147483648.0)) {
              break label$85
             }
             $639_1 = ~~$1260;
             break label$84;
            }
            $639_1 = -2147483648;
           }
           HEAP32[($7_1 + 72 | 0) >> 2] = $639_1;
           label$86 : {
            label$87 : {
             if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 72 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(HEAP32[($7_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$87
             }
             HEAP32[($7_1 + 100 | 0) >> 2] = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0;
             break label$86;
            }
            HEAP32[($7_1 + 96 | 0) >> 2] = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           }
           continue label$83;
          };
         }
         label$88 : {
          if (!((HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$88
          }
          $1265 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          label$89 : {
           label$90 : {
            if (!(Math_abs($1265) < 2147483648.0)) {
             break label$90
            }
            $672_1 = ~~$1265;
            break label$89;
           }
           $672_1 = -2147483648;
          }
          HEAP32[($7_1 + 68 | 0) >> 2] = $672_1;
          label$91 : while (1) {
           $683_1 = 0;
           label$92 : {
            if (!((HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$92
            }
            $683_1 = 0;
            if (!(HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 68 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0)) {
             break label$92
            }
            $683_1 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 164 | 0) >> 2] | 0 | 0);
           }
           label$93 : {
            if (!($683_1 & 1 | 0)) {
             break label$93
            }
            HEAP32[($7_1 + 100 | 0) >> 2] = (HEAP32[($7_1 + 100 | 0) >> 2] | 0) + 1 | 0;
            $1270 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            label$94 : {
             label$95 : {
              if (!(Math_abs($1270) < 2147483648.0)) {
               break label$95
              }
              $714_1 = ~~$1270;
              break label$94;
             }
             $714_1 = -2147483648;
            }
            HEAP32[($7_1 + 68 | 0) >> 2] = $714_1;
            continue label$91;
           }
           break label$91;
          };
          label$96 : {
           if (!((HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$96
           }
           if (HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 68 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) {
            break label$96
           }
           if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$96
           }
           HEAP32[($7_1 + 176 | 0) >> 2] = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
          }
         }
        }
       }
       HEAPF64[((HEAP32[(HEAP32[($7_1 + 212 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 180 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($7_1 + 176 | 0) >> 2] | 0 | 0);
       label$97 : {
        label$98 : {
         if (!((HEAP32[($7_1 + 176 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
          break label$98
         }
         HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 176 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 1;
         break label$97;
        }
        label$99 : {
         if (!(HEAP32[($7_1 + 200 | 0) >> 2] | 0)) {
          break label$99
         }
         $762_1 = 4;
         $28(6154 | 0, 5910 | 0, 1465 | 0, $762_1 | 0) | 0;
         HEAP32[($7_1 + 220 | 0) >> 2] = $762_1;
         break label$3;
        }
       }
       HEAP32[($7_1 + 180 | 0) >> 2] = (HEAP32[($7_1 + 180 | 0) >> 2] | 0) + 1 | 0;
       continue label$11;
      };
     }
     break label$8;
    }
    HEAP32[($7_1 + 180 | 0) >> 2] = 0;
    label$100 : {
     label$101 : while (1) {
      if (!((HEAP32[($7_1 + 180 | 0) >> 2] | 0 | 0) < ((HEAP32[($7_1 + 196 | 0) >> 2] | 0 | 0) / (2 | 0) | 0 | 0) & 1 | 0)) {
       break label$100
      }
      $779_1 = -1;
      $1276 = +HEAPF64[((HEAP32[(HEAP32[($7_1 + 208 | 0) >> 2] | 0) >> 2] | 0) + (((HEAP32[($7_1 + 180 | 0) >> 2] | 0) << 1 | 0) << 3 | 0) | 0) >> 3];
      label$102 : {
       label$103 : {
        if (!(Math_abs($1276) < 2147483648.0)) {
         break label$103
        }
        $791_1 = ~~$1276;
        break label$102;
       }
       $791_1 = -2147483648;
      }
      HEAP32[($7_1 + 64 | 0) >> 2] = $791_1;
      $1279 = +HEAPF64[((HEAP32[(HEAP32[($7_1 + 208 | 0) >> 2] | 0) >> 2] | 0) + ((((HEAP32[($7_1 + 180 | 0) >> 2] | 0) << 1 | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
      label$104 : {
       label$105 : {
        if (!(Math_abs($1279) < 2147483648.0)) {
         break label$105
        }
        $807_1 = ~~$1279;
        break label$104;
       }
       $807_1 = -2147483648;
      }
      HEAP32[($7_1 + 60 | 0) >> 2] = $807_1;
      HEAP32[($7_1 + 176 | 0) >> 2] = $779_1;
      label$106 : {
       label$107 : {
        if (!((HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) > (HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$107
        }
        $818_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
        break label$106;
       }
       $818_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
      }
      HEAP32[($7_1 + 56 | 0) >> 2] = $818_1;
      label$108 : {
       label$109 : {
        if (!((HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) > (HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$109
        }
        $829_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
        break label$108;
       }
       $829_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
      }
      HEAP32[($7_1 + 52 | 0) >> 2] = $829_1;
      $1282 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$110 : {
       label$111 : {
        if (!(Math_abs($1282) < 2147483648.0)) {
         break label$111
        }
        $841_1 = ~~$1282;
        break label$110;
       }
       $841_1 = -2147483648;
      }
      HEAP32[($7_1 + 48 | 0) >> 2] = $841_1;
      $1285 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
      label$112 : {
       label$113 : {
        if (!(Math_abs($1285) < 2147483648.0)) {
         break label$113
        }
        $855_1 = ~~$1285;
        break label$112;
       }
       $855_1 = -2147483648;
      }
      HEAP32[($7_1 + 44 | 0) >> 2] = $855_1;
      HEAP32[($7_1 + 40 | 0) >> 2] = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
      $1288 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$114 : {
       label$115 : {
        if (!(Math_abs($1288) < 2147483648.0)) {
         break label$115
        }
        $868_1 = ~~$1288;
        break label$114;
       }
       $868_1 = -2147483648;
      }
      HEAP32[($7_1 + 36 | 0) >> 2] = $868_1;
      $1291 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
      label$116 : {
       label$117 : {
        if (!(Math_abs($1291) < 2147483648.0)) {
         break label$117
        }
        $882_1 = ~~$1291;
        break label$116;
       }
       $882_1 = -2147483648;
      }
      HEAP32[($7_1 + 32 | 0) >> 2] = $882_1;
      HEAP32[($7_1 + 28 | 0) >> 2] = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
      label$118 : {
       label$119 : {
        if (!(((HEAP32[($7_1 + 44 | 0) >> 2] | 0) - (HEAP32[($7_1 + 48 | 0) >> 2] | 0) | 0 | 0) < ((HEAP32[($7_1 + 32 | 0) >> 2] | 0) - (HEAP32[($7_1 + 36 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
         break label$119
        }
        label$120 : {
         label$121 : while (1) {
          if (!((HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$120
          }
          HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 48 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 44 | 0) >> 2] | 0) - (HEAP32[($7_1 + 48 | 0) >> 2] | 0) | 0 | 0) / (2 | 0) | 0) | 0;
          $1294 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          label$122 : {
           label$123 : {
            if (!(Math_abs($1294) < 2147483648.0)) {
             break label$123
            }
            $920_1 = ~~$1294;
            break label$122;
           }
           $920_1 = -2147483648;
          }
          HEAP32[($7_1 + 20 | 0) >> 2] = $920_1;
          label$124 : {
           label$125 : {
            if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$125
            }
            HEAP32[($7_1 + 48 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 1 | 0;
            break label$124;
           }
           HEAP32[($7_1 + 44 | 0) >> 2] = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
          }
          continue label$121;
         };
        }
        label$126 : {
         if (!((HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$126
         }
         $1299 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         label$127 : {
          label$128 : {
           if (!(Math_abs($1299) < 2147483648.0)) {
            break label$128
           }
           $953_1 = ~~$1299;
           break label$127;
          }
          $953_1 = -2147483648;
         }
         HEAP32[($7_1 + 16 | 0) >> 2] = $953_1;
         label$129 : while (1) {
          $964_1 = 0;
          label$130 : {
           if (!((HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$130
           }
           $964_1 = 0;
           if (!(HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0)) {
            break label$130
           }
           $964_1 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0);
          }
          label$131 : {
           if (!($964_1 & 1 | 0)) {
            break label$131
           }
           HEAP32[($7_1 + 48 | 0) >> 2] = (HEAP32[($7_1 + 48 | 0) >> 2] | 0) + 1 | 0;
           $1304 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           label$132 : {
            label$133 : {
             if (!(Math_abs($1304) < 2147483648.0)) {
              break label$133
             }
             $995_1 = ~~$1304;
             break label$132;
            }
            $995_1 = -2147483648;
           }
           HEAP32[($7_1 + 16 | 0) >> 2] = $995_1;
           continue label$129;
          }
          break label$129;
         };
         label$134 : {
          if (!((HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$134
          }
          if (HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) {
           break label$134
          }
          if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$134
          }
          HEAP32[($7_1 + 176 | 0) >> 2] = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
         }
        }
        break label$118;
       }
       label$135 : {
        label$136 : while (1) {
         if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$135
         }
         HEAP32[($7_1 + 12 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 32 | 0) >> 2] | 0) - (HEAP32[($7_1 + 36 | 0) >> 2] | 0) | 0 | 0) / (2 | 0) | 0) | 0;
         $1309 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         label$137 : {
          label$138 : {
           if (!(Math_abs($1309) < 2147483648.0)) {
            break label$138
           }
           $1045_1 = ~~$1309;
           break label$137;
          }
          $1045_1 = -2147483648;
         }
         HEAP32[($7_1 + 8 | 0) >> 2] = $1045_1;
         label$139 : {
          label$140 : {
           if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$140
           }
           HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 1 | 0;
           break label$139;
          }
          HEAP32[($7_1 + 32 | 0) >> 2] = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
         }
         continue label$136;
        };
       }
       label$141 : {
        if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$141
        }
        $1314 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$142 : {
         label$143 : {
          if (!(Math_abs($1314) < 2147483648.0)) {
           break label$143
          }
          $1078_1 = ~~$1314;
          break label$142;
         }
         $1078_1 = -2147483648;
        }
        HEAP32[($7_1 + 4 | 0) >> 2] = $1078_1;
        label$144 : while (1) {
         $1089_1 = 0;
         label$145 : {
          if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$145
          }
          $1089_1 = 0;
          if (!(HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0)) {
           break label$145
          }
          $1089_1 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0);
         }
         label$146 : {
          if (!($1089_1 & 1 | 0)) {
           break label$146
          }
          HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 1 | 0;
          $1319 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          label$147 : {
           label$148 : {
            if (!(Math_abs($1319) < 2147483648.0)) {
             break label$148
            }
            $1120 = ~~$1319;
            break label$147;
           }
           $1120 = -2147483648;
          }
          HEAP32[($7_1 + 4 | 0) >> 2] = $1120;
          continue label$144;
         }
         break label$144;
        };
        label$149 : {
         if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$149
         }
         if (HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) {
          break label$149
         }
         if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$149
         }
         HEAP32[($7_1 + 176 | 0) >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
        }
       }
      }
      HEAPF64[((HEAP32[(HEAP32[($7_1 + 212 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 180 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($7_1 + 176 | 0) >> 2] | 0 | 0);
      label$150 : {
       label$151 : {
        if (!((HEAP32[($7_1 + 176 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
         break label$151
        }
        HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 176 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 1;
        break label$150;
       }
       label$152 : {
        if (!(HEAP32[($7_1 + 200 | 0) >> 2] | 0)) {
         break label$152
        }
        $1168 = 4;
        $28(6154 | 0, 5910 | 0, 1479 | 0, $1168 | 0) | 0;
        HEAP32[($7_1 + 220 | 0) >> 2] = $1168;
        break label$3;
       }
      }
      HEAP32[($7_1 + 180 | 0) >> 2] = (HEAP32[($7_1 + 180 | 0) >> 2] | 0) + 1 | 0;
      continue label$101;
     };
    }
   }
   $1175 = 0;
   $1064(HEAP32[($7_1 + 184 | 0) >> 2] | 0 | 0);
   HEAP32[($7_1 + 184 | 0) >> 2] = $1175;
   $34(1 | 0);
   HEAP32[($7_1 + 220 | 0) >> 2] = $1175;
  }
  $1178 = HEAP32[($7_1 + 220 | 0) >> 2] | 0;
  label$153 : {
   $1182 = $7_1 + 224 | 0;
   if ($1182 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $1182;
  }
  return $1178 | 0;
 }
 
 function $261($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $228_1 = 0, $353_1 = 0, $551_1 = 0, $676_1 = 0, $953_1 = 0, $1078_1 = 0, $21_1 = 0, $35_1 = 0, $45_1 = 0, $1174 = 0.0, $79_1 = 0, $1177 = 0.0, $93_1 = 0, $1180 = 0.0, $105_1 = 0, $1183 = 0.0, $119_1 = 0, $1186 = 0.0, $132_1 = 0, $1189 = 0.0, $146_1 = 0, $1192 = 0.0, $184_1 = 0, $1197 = 0.0, $217_1 = 0, $1202 = 0.0, $259_1 = 0, $1207 = 0.0, $309_1 = 0, $1212 = 0.0, $342_1 = 0, $1217 = 0.0, $384_1 = 0, $1222 = 0.0, $428_1 = 0, $1225 = 0.0, $442_1 = 0, $1228 = 0.0, $455_1 = 0, $1231 = 0.0, $469_1 = 0, $1234 = 0.0, $507_1 = 0, $1239 = 0.0, $540_1 = 0, $1244 = 0.0, $582_1 = 0, $1249 = 0.0, $632_1 = 0, $1254 = 0.0, $665_1 = 0, $1259 = 0.0, $707_1 = 0, $755_1 = 0, $1265 = 0.0, $782_1 = 0, $1268 = 0.0, $796_1 = 0, $807_1 = 0, $818_1 = 0, $1271 = 0.0, $830_1 = 0, $1274 = 0.0, $844_1 = 0, $1277 = 0.0, $857_1 = 0, $1280 = 0.0, $871_1 = 0, $1283 = 0.0, $909_1 = 0, $1288 = 0.0, $942_1 = 0, $1293 = 0.0, $984_1 = 0, $1298 = 0.0, $1034_1 = 0, $1303 = 0.0, $1067_1 = 0, $1308 = 0.0, $1109 = 0, $1157 = 0, $1164 = 0, $1171 = 0, $1170 = 0, $42_1 = 0, $69_1 = 0, $772_1 = 0, $1167 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 224 | 0;
  label$1 : {
   $1170 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $1170;
  }
  HEAP32[($7_1 + 216 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 212 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 208 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 204 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 200 | 0) >> 2] = $4_1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $490(HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 196 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $254(HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 192 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $249(HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 188 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($7_1 + 176 | 0) >> 2] = -1;
  label$3 : {
   label$4 : {
    if ($509(HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, +(+(0 | 0)), +(+((HEAP32[($7_1 + 192 | 0) >> 2] | 0) - 1 | 0 | 0))) | 0) {
     break label$4
    }
    $21_1 = 7;
    $28(6235 | 0, 5910 | 0, 1501 | 0, $21_1 | 0) | 0;
    HEAP32[($7_1 + 220 | 0) >> 2] = $21_1;
    break label$3;
   }
   (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $1068(HEAP32[($7_1 + 188 | 0) >> 2] | 0 | 0, 4 | 0) | 0), HEAP32[(wasm2js_i32$0 + 184 | 0) >> 2] = wasm2js_i32$1;
   label$5 : {
    if ((HEAP32[($7_1 + 184 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$5
    }
    $35_1 = 2;
    $28(6274 | 0, 5910 | 0, 1506 | 0, $35_1 | 0) | 0;
    HEAP32[($7_1 + 220 | 0) >> 2] = $35_1;
    break label$3;
   }
   $33(2 | 0, HEAP32[($7_1 + 184 | 0) >> 2] | 0 | 0);
   $42_1 = HEAP32[($7_1 + 212 | 0) >> 2] | 0;
   label$6 : {
    label$7 : {
     if (HEAP32[($7_1 + 196 | 0) >> 2] | 0) {
      break label$7
     }
     $45_1 = 0;
     break label$6;
    }
    $45_1 = (HEAP32[($7_1 + 196 | 0) >> 2] | 0) - 1 | 0;
   }
   (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $494($42_1 | 0, $45_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 172 | 0) >> 2] = wasm2js_i32$1;
   label$8 : {
    if (!(HEAP32[($7_1 + 172 | 0) >> 2] | 0)) {
     break label$8
    }
    $28(5994 | 0, 5910 | 0, 1509 | 0, HEAP32[($7_1 + 172 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($7_1 + 220 | 0) >> 2] = HEAP32[($7_1 + 172 | 0) >> 2] | 0;
    break label$3;
   }
   label$9 : {
    label$10 : {
     if (!($253(HEAP32[($7_1 + 216 | 0) >> 2] | 0 | 0) | 0)) {
      break label$10
     }
     HEAP32[($7_1 + 180 | 0) >> 2] = 0;
     label$11 : {
      label$12 : while (1) {
       if (!((HEAP32[($7_1 + 180 | 0) >> 2] | 0 | 0) < ((HEAP32[($7_1 + 196 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
        break label$11
       }
       $69_1 = -1;
       $1174 = +HEAPF64[((HEAP32[(HEAP32[($7_1 + 208 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 180 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       label$13 : {
        label$14 : {
         if (!(Math_abs($1174) < 2147483648.0)) {
          break label$14
         }
         $79_1 = ~~$1174;
         break label$13;
        }
        $79_1 = -2147483648;
       }
       HEAP32[($7_1 + 168 | 0) >> 2] = $79_1;
       $1177 = +HEAPF64[((HEAP32[(HEAP32[($7_1 + 208 | 0) >> 2] | 0) >> 2] | 0) + (((HEAP32[($7_1 + 180 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
       label$15 : {
        label$16 : {
         if (!(Math_abs($1177) < 2147483648.0)) {
          break label$16
         }
         $93_1 = ~~$1177;
         break label$15;
        }
        $93_1 = -2147483648;
       }
       HEAP32[($7_1 + 164 | 0) >> 2] = $93_1;
       HEAP32[($7_1 + 176 | 0) >> 2] = $69_1;
       $1180 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 168 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       label$17 : {
        label$18 : {
         if (!(Math_abs($1180) < 2147483648.0)) {
          break label$18
         }
         $105_1 = ~~$1180;
         break label$17;
        }
        $105_1 = -2147483648;
       }
       HEAP32[($7_1 + 160 | 0) >> 2] = $105_1;
       $1183 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
       label$19 : {
        label$20 : {
         if (!(Math_abs($1183) < 2147483648.0)) {
          break label$20
         }
         $119_1 = ~~$1183;
         break label$19;
        }
        $119_1 = -2147483648;
       }
       HEAP32[($7_1 + 156 | 0) >> 2] = $119_1;
       HEAP32[($7_1 + 152 | 0) >> 2] = HEAP32[($7_1 + 156 | 0) >> 2] | 0;
       $1186 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 164 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       label$21 : {
        label$22 : {
         if (!(Math_abs($1186) < 2147483648.0)) {
          break label$22
         }
         $132_1 = ~~$1186;
         break label$21;
        }
        $132_1 = -2147483648;
       }
       HEAP32[($7_1 + 148 | 0) >> 2] = $132_1;
       $1189 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 164 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
       label$23 : {
        label$24 : {
         if (!(Math_abs($1189) < 2147483648.0)) {
          break label$24
         }
         $146_1 = ~~$1189;
         break label$23;
        }
        $146_1 = -2147483648;
       }
       HEAP32[($7_1 + 144 | 0) >> 2] = $146_1;
       HEAP32[($7_1 + 140 | 0) >> 2] = HEAP32[($7_1 + 144 | 0) >> 2] | 0;
       label$25 : {
        label$26 : {
         if (!(((HEAP32[($7_1 + 156 | 0) >> 2] | 0) - (HEAP32[($7_1 + 160 | 0) >> 2] | 0) | 0 | 0) < ((HEAP32[($7_1 + 144 | 0) >> 2] | 0) - (HEAP32[($7_1 + 148 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
          break label$26
         }
         label$27 : {
          label$28 : while (1) {
           if (!((HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 156 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$27
           }
           HEAP32[($7_1 + 136 | 0) >> 2] = (HEAP32[($7_1 + 160 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 156 | 0) >> 2] | 0) - (HEAP32[($7_1 + 160 | 0) >> 2] | 0) | 0 | 0) / (2 | 0) | 0) | 0;
           $1192 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 136 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           label$29 : {
            label$30 : {
             if (!(Math_abs($1192) < 2147483648.0)) {
              break label$30
             }
             $184_1 = ~~$1192;
             break label$29;
            }
            $184_1 = -2147483648;
           }
           HEAP32[($7_1 + 132 | 0) >> 2] = $184_1;
           label$31 : {
            label$32 : {
             if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 132 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(HEAP32[($7_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$32
             }
             HEAP32[($7_1 + 160 | 0) >> 2] = (HEAP32[($7_1 + 136 | 0) >> 2] | 0) + 1 | 0;
             break label$31;
            }
            HEAP32[($7_1 + 156 | 0) >> 2] = HEAP32[($7_1 + 136 | 0) >> 2] | 0;
           }
           continue label$28;
          };
         }
         label$33 : {
          if (!((HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$33
          }
          $1197 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 160 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          label$34 : {
           label$35 : {
            if (!(Math_abs($1197) < 2147483648.0)) {
             break label$35
            }
            $217_1 = ~~$1197;
            break label$34;
           }
           $217_1 = -2147483648;
          }
          HEAP32[($7_1 + 128 | 0) >> 2] = $217_1;
          label$36 : while (1) {
           $228_1 = 0;
           label$37 : {
            if (!((HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$37
            }
            $228_1 = 0;
            if (!(HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 128 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0)) {
             break label$37
            }
            $228_1 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 164 | 0) >> 2] | 0 | 0);
           }
           label$38 : {
            if (!($228_1 & 1 | 0)) {
             break label$38
            }
            HEAP32[($7_1 + 160 | 0) >> 2] = (HEAP32[($7_1 + 160 | 0) >> 2] | 0) + 1 | 0;
            $1202 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 160 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            label$39 : {
             label$40 : {
              if (!(Math_abs($1202) < 2147483648.0)) {
               break label$40
              }
              $259_1 = ~~$1202;
              break label$39;
             }
             $259_1 = -2147483648;
            }
            HEAP32[($7_1 + 128 | 0) >> 2] = $259_1;
            continue label$36;
           }
           break label$36;
          };
          label$41 : {
           if (!((HEAP32[($7_1 + 160 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 152 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$41
           }
           if (HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 128 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) {
            break label$41
           }
           if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 128 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$41
           }
           HEAP32[($7_1 + 176 | 0) >> 2] = HEAP32[($7_1 + 128 | 0) >> 2] | 0;
          }
         }
         break label$25;
        }
        label$42 : {
         label$43 : while (1) {
          if (!((HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 144 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$42
          }
          HEAP32[($7_1 + 124 | 0) >> 2] = (HEAP32[($7_1 + 148 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 144 | 0) >> 2] | 0) - (HEAP32[($7_1 + 148 | 0) >> 2] | 0) | 0 | 0) / (2 | 0) | 0) | 0;
          $1207 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 124 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          label$44 : {
           label$45 : {
            if (!(Math_abs($1207) < 2147483648.0)) {
             break label$45
            }
            $309_1 = ~~$1207;
            break label$44;
           }
           $309_1 = -2147483648;
          }
          HEAP32[($7_1 + 120 | 0) >> 2] = $309_1;
          label$46 : {
           label$47 : {
            if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 120 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(HEAP32[($7_1 + 168 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$47
            }
            HEAP32[($7_1 + 148 | 0) >> 2] = (HEAP32[($7_1 + 124 | 0) >> 2] | 0) + 1 | 0;
            break label$46;
           }
           HEAP32[($7_1 + 144 | 0) >> 2] = HEAP32[($7_1 + 124 | 0) >> 2] | 0;
          }
          continue label$43;
         };
        }
        label$48 : {
         if (!((HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$48
         }
         $1212 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         label$49 : {
          label$50 : {
           if (!(Math_abs($1212) < 2147483648.0)) {
            break label$50
           }
           $342_1 = ~~$1212;
           break label$49;
          }
          $342_1 = -2147483648;
         }
         HEAP32[($7_1 + 116 | 0) >> 2] = $342_1;
         label$51 : while (1) {
          $353_1 = 0;
          label$52 : {
           if (!((HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$52
           }
           $353_1 = 0;
           if (!(HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 116 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0)) {
            break label$52
           }
           $353_1 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 168 | 0) >> 2] | 0 | 0);
          }
          label$53 : {
           if (!($353_1 & 1 | 0)) {
            break label$53
           }
           HEAP32[($7_1 + 148 | 0) >> 2] = (HEAP32[($7_1 + 148 | 0) >> 2] | 0) + 1 | 0;
           $1217 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 148 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           label$54 : {
            label$55 : {
             if (!(Math_abs($1217) < 2147483648.0)) {
              break label$55
             }
             $384_1 = ~~$1217;
             break label$54;
            }
            $384_1 = -2147483648;
           }
           HEAP32[($7_1 + 116 | 0) >> 2] = $384_1;
           continue label$51;
          }
          break label$51;
         };
         label$56 : {
          if (!((HEAP32[($7_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$56
          }
          if (HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 116 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) {
           break label$56
          }
          if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 116 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 168 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$56
          }
          HEAP32[($7_1 + 176 | 0) >> 2] = HEAP32[($7_1 + 116 | 0) >> 2] | 0;
         }
        }
       }
       label$57 : {
        if (HEAP32[($7_1 + 204 | 0) >> 2] | 0) {
         break label$57
        }
        if (!((HEAP32[($7_1 + 176 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
         break label$57
        }
        $1222 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 164 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$58 : {
         label$59 : {
          if (!(Math_abs($1222) < 2147483648.0)) {
           break label$59
          }
          $428_1 = ~~$1222;
          break label$58;
         }
         $428_1 = -2147483648;
        }
        HEAP32[($7_1 + 112 | 0) >> 2] = $428_1;
        $1225 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 164 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
        label$60 : {
         label$61 : {
          if (!(Math_abs($1225) < 2147483648.0)) {
           break label$61
          }
          $442_1 = ~~$1225;
          break label$60;
         }
         $442_1 = -2147483648;
        }
        HEAP32[($7_1 + 108 | 0) >> 2] = $442_1;
        HEAP32[($7_1 + 104 | 0) >> 2] = HEAP32[($7_1 + 108 | 0) >> 2] | 0;
        $1228 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 168 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$62 : {
         label$63 : {
          if (!(Math_abs($1228) < 2147483648.0)) {
           break label$63
          }
          $455_1 = ~~$1228;
          break label$62;
         }
         $455_1 = -2147483648;
        }
        HEAP32[($7_1 + 100 | 0) >> 2] = $455_1;
        $1231 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
        label$64 : {
         label$65 : {
          if (!(Math_abs($1231) < 2147483648.0)) {
           break label$65
          }
          $469_1 = ~~$1231;
          break label$64;
         }
         $469_1 = -2147483648;
        }
        HEAP32[($7_1 + 96 | 0) >> 2] = $469_1;
        HEAP32[($7_1 + 92 | 0) >> 2] = HEAP32[($7_1 + 96 | 0) >> 2] | 0;
        label$66 : {
         label$67 : {
          if (!(((HEAP32[($7_1 + 108 | 0) >> 2] | 0) - (HEAP32[($7_1 + 112 | 0) >> 2] | 0) | 0 | 0) < ((HEAP32[($7_1 + 96 | 0) >> 2] | 0) - (HEAP32[($7_1 + 100 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
           break label$67
          }
          label$68 : {
           label$69 : while (1) {
            if (!((HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 108 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$68
            }
            HEAP32[($7_1 + 88 | 0) >> 2] = (HEAP32[($7_1 + 112 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 108 | 0) >> 2] | 0) - (HEAP32[($7_1 + 112 | 0) >> 2] | 0) | 0 | 0) / (2 | 0) | 0) | 0;
            $1234 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 88 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            label$70 : {
             label$71 : {
              if (!(Math_abs($1234) < 2147483648.0)) {
               break label$71
              }
              $507_1 = ~~$1234;
              break label$70;
             }
             $507_1 = -2147483648;
            }
            HEAP32[($7_1 + 84 | 0) >> 2] = $507_1;
            label$72 : {
             label$73 : {
              if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 84 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(HEAP32[($7_1 + 168 | 0) >> 2] | 0 | 0) & 1 | 0)) {
               break label$73
              }
              HEAP32[($7_1 + 112 | 0) >> 2] = (HEAP32[($7_1 + 88 | 0) >> 2] | 0) + 1 | 0;
              break label$72;
             }
             HEAP32[($7_1 + 108 | 0) >> 2] = HEAP32[($7_1 + 88 | 0) >> 2] | 0;
            }
            continue label$69;
           };
          }
          label$74 : {
           if (!((HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$74
           }
           $1239 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           label$75 : {
            label$76 : {
             if (!(Math_abs($1239) < 2147483648.0)) {
              break label$76
             }
             $540_1 = ~~$1239;
             break label$75;
            }
            $540_1 = -2147483648;
           }
           HEAP32[($7_1 + 80 | 0) >> 2] = $540_1;
           label$77 : while (1) {
            $551_1 = 0;
            label$78 : {
             if (!((HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$78
             }
             $551_1 = 0;
             if (!(HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0)) {
              break label$78
             }
             $551_1 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 80 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 168 | 0) >> 2] | 0 | 0);
            }
            label$79 : {
             if (!($551_1 & 1 | 0)) {
              break label$79
             }
             HEAP32[($7_1 + 112 | 0) >> 2] = (HEAP32[($7_1 + 112 | 0) >> 2] | 0) + 1 | 0;
             $1244 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 112 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
             label$80 : {
              label$81 : {
               if (!(Math_abs($1244) < 2147483648.0)) {
                break label$81
               }
               $582_1 = ~~$1244;
               break label$80;
              }
              $582_1 = -2147483648;
             }
             HEAP32[($7_1 + 80 | 0) >> 2] = $582_1;
             continue label$77;
            }
            break label$77;
           };
           label$82 : {
            if (!((HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 104 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$82
            }
            if (HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) {
             break label$82
            }
            if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 80 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 168 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$82
            }
            HEAP32[($7_1 + 176 | 0) >> 2] = HEAP32[($7_1 + 80 | 0) >> 2] | 0;
           }
          }
          break label$66;
         }
         label$83 : {
          label$84 : while (1) {
           if (!((HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 96 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$83
           }
           HEAP32[($7_1 + 76 | 0) >> 2] = (HEAP32[($7_1 + 100 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 96 | 0) >> 2] | 0) - (HEAP32[($7_1 + 100 | 0) >> 2] | 0) | 0 | 0) / (2 | 0) | 0) | 0;
           $1249 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 76 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           label$85 : {
            label$86 : {
             if (!(Math_abs($1249) < 2147483648.0)) {
              break label$86
             }
             $632_1 = ~~$1249;
             break label$85;
            }
            $632_1 = -2147483648;
           }
           HEAP32[($7_1 + 72 | 0) >> 2] = $632_1;
           label$87 : {
            label$88 : {
             if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 72 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(HEAP32[($7_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$88
             }
             HEAP32[($7_1 + 100 | 0) >> 2] = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0;
             break label$87;
            }
            HEAP32[($7_1 + 96 | 0) >> 2] = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           }
           continue label$84;
          };
         }
         label$89 : {
          if (!((HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$89
          }
          $1254 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          label$90 : {
           label$91 : {
            if (!(Math_abs($1254) < 2147483648.0)) {
             break label$91
            }
            $665_1 = ~~$1254;
            break label$90;
           }
           $665_1 = -2147483648;
          }
          HEAP32[($7_1 + 68 | 0) >> 2] = $665_1;
          label$92 : while (1) {
           $676_1 = 0;
           label$93 : {
            if (!((HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$93
            }
            $676_1 = 0;
            if (!(HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 68 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0)) {
             break label$93
            }
            $676_1 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 164 | 0) >> 2] | 0 | 0);
           }
           label$94 : {
            if (!($676_1 & 1 | 0)) {
             break label$94
            }
            HEAP32[($7_1 + 100 | 0) >> 2] = (HEAP32[($7_1 + 100 | 0) >> 2] | 0) + 1 | 0;
            $1259 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 100 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
            label$95 : {
             label$96 : {
              if (!(Math_abs($1259) < 2147483648.0)) {
               break label$96
              }
              $707_1 = ~~$1259;
              break label$95;
             }
             $707_1 = -2147483648;
            }
            HEAP32[($7_1 + 68 | 0) >> 2] = $707_1;
            continue label$92;
           }
           break label$92;
          };
          label$97 : {
           if (!((HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$97
           }
           if (HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 68 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) {
            break label$97
           }
           if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 68 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 164 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$97
           }
           HEAP32[($7_1 + 176 | 0) >> 2] = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
          }
         }
        }
       }
       HEAPF64[((HEAP32[(HEAP32[($7_1 + 212 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 180 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($7_1 + 176 | 0) >> 2] | 0 | 0);
       label$98 : {
        label$99 : {
         if (!((HEAP32[($7_1 + 176 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
          break label$99
         }
         HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 176 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 1;
         break label$98;
        }
        label$100 : {
         if (!(HEAP32[($7_1 + 200 | 0) >> 2] | 0)) {
          break label$100
         }
         $755_1 = 4;
         $28(6154 | 0, 5910 | 0, 1526 | 0, $755_1 | 0) | 0;
         HEAP32[($7_1 + 220 | 0) >> 2] = $755_1;
         break label$3;
        }
       }
       HEAP32[($7_1 + 180 | 0) >> 2] = (HEAP32[($7_1 + 180 | 0) >> 2] | 0) + 1 | 0;
       continue label$12;
      };
     }
     break label$9;
    }
    HEAP32[($7_1 + 180 | 0) >> 2] = 0;
    label$101 : {
     label$102 : while (1) {
      if (!((HEAP32[($7_1 + 180 | 0) >> 2] | 0 | 0) < ((HEAP32[($7_1 + 196 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
       break label$101
      }
      $772_1 = -1;
      $1265 = +HEAPF64[((HEAP32[(HEAP32[($7_1 + 208 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 180 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$103 : {
       label$104 : {
        if (!(Math_abs($1265) < 2147483648.0)) {
         break label$104
        }
        $782_1 = ~~$1265;
        break label$103;
       }
       $782_1 = -2147483648;
      }
      HEAP32[($7_1 + 64 | 0) >> 2] = $782_1;
      $1268 = +HEAPF64[((HEAP32[(HEAP32[($7_1 + 208 | 0) >> 2] | 0) >> 2] | 0) + (((HEAP32[($7_1 + 180 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
      label$105 : {
       label$106 : {
        if (!(Math_abs($1268) < 2147483648.0)) {
         break label$106
        }
        $796_1 = ~~$1268;
        break label$105;
       }
       $796_1 = -2147483648;
      }
      HEAP32[($7_1 + 60 | 0) >> 2] = $796_1;
      HEAP32[($7_1 + 176 | 0) >> 2] = $772_1;
      label$107 : {
       label$108 : {
        if (!((HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) > (HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$108
        }
        $807_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
        break label$107;
       }
       $807_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
      }
      HEAP32[($7_1 + 56 | 0) >> 2] = $807_1;
      label$109 : {
       label$110 : {
        if (!((HEAP32[($7_1 + 64 | 0) >> 2] | 0 | 0) > (HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$110
        }
        $818_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
        break label$109;
       }
       $818_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
      }
      HEAP32[($7_1 + 52 | 0) >> 2] = $818_1;
      $1271 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$111 : {
       label$112 : {
        if (!(Math_abs($1271) < 2147483648.0)) {
         break label$112
        }
        $830_1 = ~~$1271;
        break label$111;
       }
       $830_1 = -2147483648;
      }
      HEAP32[($7_1 + 48 | 0) >> 2] = $830_1;
      $1274 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 56 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
      label$113 : {
       label$114 : {
        if (!(Math_abs($1274) < 2147483648.0)) {
         break label$114
        }
        $844_1 = ~~$1274;
        break label$113;
       }
       $844_1 = -2147483648;
      }
      HEAP32[($7_1 + 44 | 0) >> 2] = $844_1;
      HEAP32[($7_1 + 40 | 0) >> 2] = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
      $1277 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 52 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$115 : {
       label$116 : {
        if (!(Math_abs($1277) < 2147483648.0)) {
         break label$116
        }
        $857_1 = ~~$1277;
        break label$115;
       }
       $857_1 = -2147483648;
      }
      HEAP32[($7_1 + 36 | 0) >> 2] = $857_1;
      $1280 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 52 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
      label$117 : {
       label$118 : {
        if (!(Math_abs($1280) < 2147483648.0)) {
         break label$118
        }
        $871_1 = ~~$1280;
        break label$117;
       }
       $871_1 = -2147483648;
      }
      HEAP32[($7_1 + 32 | 0) >> 2] = $871_1;
      HEAP32[($7_1 + 28 | 0) >> 2] = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
      label$119 : {
       label$120 : {
        if (!(((HEAP32[($7_1 + 44 | 0) >> 2] | 0) - (HEAP32[($7_1 + 48 | 0) >> 2] | 0) | 0 | 0) < ((HEAP32[($7_1 + 32 | 0) >> 2] | 0) - (HEAP32[($7_1 + 36 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
         break label$120
        }
        label$121 : {
         label$122 : while (1) {
          if (!((HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$121
          }
          HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 48 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 44 | 0) >> 2] | 0) - (HEAP32[($7_1 + 48 | 0) >> 2] | 0) | 0 | 0) / (2 | 0) | 0) | 0;
          $1283 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          label$123 : {
           label$124 : {
            if (!(Math_abs($1283) < 2147483648.0)) {
             break label$124
            }
            $909_1 = ~~$1283;
            break label$123;
           }
           $909_1 = -2147483648;
          }
          HEAP32[($7_1 + 20 | 0) >> 2] = $909_1;
          label$125 : {
           label$126 : {
            if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$126
            }
            HEAP32[($7_1 + 48 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 1 | 0;
            break label$125;
           }
           HEAP32[($7_1 + 44 | 0) >> 2] = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
          }
          continue label$122;
         };
        }
        label$127 : {
         if (!((HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$127
         }
         $1288 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         label$128 : {
          label$129 : {
           if (!(Math_abs($1288) < 2147483648.0)) {
            break label$129
           }
           $942_1 = ~~$1288;
           break label$128;
          }
          $942_1 = -2147483648;
         }
         HEAP32[($7_1 + 16 | 0) >> 2] = $942_1;
         label$130 : while (1) {
          $953_1 = 0;
          label$131 : {
           if (!((HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$131
           }
           $953_1 = 0;
           if (!(HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0)) {
            break label$131
           }
           $953_1 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0);
          }
          label$132 : {
           if (!($953_1 & 1 | 0)) {
            break label$132
           }
           HEAP32[($7_1 + 48 | 0) >> 2] = (HEAP32[($7_1 + 48 | 0) >> 2] | 0) + 1 | 0;
           $1293 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 48 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
           label$133 : {
            label$134 : {
             if (!(Math_abs($1293) < 2147483648.0)) {
              break label$134
             }
             $984_1 = ~~$1293;
             break label$133;
            }
            $984_1 = -2147483648;
           }
           HEAP32[($7_1 + 16 | 0) >> 2] = $984_1;
           continue label$130;
          }
          break label$130;
         };
         label$135 : {
          if (!((HEAP32[($7_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$135
          }
          if (HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) {
           break label$135
          }
          if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$135
          }
          HEAP32[($7_1 + 176 | 0) >> 2] = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
         }
        }
        break label$119;
       }
       label$136 : {
        label$137 : while (1) {
         if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$136
         }
         HEAP32[($7_1 + 12 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 32 | 0) >> 2] | 0) - (HEAP32[($7_1 + 36 | 0) >> 2] | 0) | 0 | 0) / (2 | 0) | 0) | 0;
         $1298 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         label$138 : {
          label$139 : {
           if (!(Math_abs($1298) < 2147483648.0)) {
            break label$139
           }
           $1034_1 = ~~$1298;
           break label$138;
          }
          $1034_1 = -2147483648;
         }
         HEAP32[($7_1 + 8 | 0) >> 2] = $1034_1;
         label$140 : {
          label$141 : {
           if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$141
           }
           HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 1 | 0;
           break label$140;
          }
          HEAP32[($7_1 + 32 | 0) >> 2] = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
         }
         continue label$137;
        };
       }
       label$142 : {
        if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$142
        }
        $1303 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$143 : {
         label$144 : {
          if (!(Math_abs($1303) < 2147483648.0)) {
           break label$144
          }
          $1067_1 = ~~$1303;
          break label$143;
         }
         $1067_1 = -2147483648;
        }
        HEAP32[($7_1 + 4 | 0) >> 2] = $1067_1;
        label$145 : while (1) {
         $1078_1 = 0;
         label$146 : {
          if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$146
          }
          $1078_1 = 0;
          if (!(HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0)) {
           break label$146
          }
          $1078_1 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0);
         }
         label$147 : {
          if (!($1078_1 & 1 | 0)) {
           break label$147
          }
          HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 1 | 0;
          $1308 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          label$148 : {
           label$149 : {
            if (!(Math_abs($1308) < 2147483648.0)) {
             break label$149
            }
            $1109 = ~~$1308;
            break label$148;
           }
           $1109 = -2147483648;
          }
          HEAP32[($7_1 + 4 | 0) >> 2] = $1109;
          continue label$145;
         }
         break label$145;
        };
        label$150 : {
         if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$150
         }
         if (HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) {
          break label$150
         }
         if (!(+HEAPF64[((HEAP32[((HEAP32[($7_1 + 216 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] == +(HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$150
         }
         HEAP32[($7_1 + 176 | 0) >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
        }
       }
      }
      HEAPF64[((HEAP32[(HEAP32[($7_1 + 212 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 180 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($7_1 + 176 | 0) >> 2] | 0 | 0);
      label$151 : {
       label$152 : {
        if (!((HEAP32[($7_1 + 176 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
         break label$152
        }
        HEAP32[((HEAP32[($7_1 + 184 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 176 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 1;
        break label$151;
       }
       label$153 : {
        if (!(HEAP32[($7_1 + 200 | 0) >> 2] | 0)) {
         break label$153
        }
        $1157 = 4;
        $28(6154 | 0, 5910 | 0, 1540 | 0, $1157 | 0) | 0;
        HEAP32[($7_1 + 220 | 0) >> 2] = $1157;
        break label$3;
       }
      }
      HEAP32[($7_1 + 180 | 0) >> 2] = (HEAP32[($7_1 + 180 | 0) >> 2] | 0) + 1 | 0;
      continue label$102;
     };
    }
   }
   $1164 = 0;
   $1064(HEAP32[($7_1 + 184 | 0) >> 2] | 0 | 0);
   HEAP32[($7_1 + 184 | 0) >> 2] = $1164;
   $34(1 | 0);
   HEAP32[($7_1 + 220 | 0) >> 2] = $1164;
  }
  $1167 = HEAP32[($7_1 + 220 | 0) >> 2] | 0;
  label$154 : {
   $1171 = $7_1 + 224 | 0;
   if ($1171 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $1171;
  }
  return $1167 | 0;
 }
 
 function $262($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $65_1 = 0, $73_1 = 0, $72_1 = 0, $69_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8_1 = global$0 - 32 | 0;
  label$1 : {
   $72_1 = $8_1;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $72_1;
  }
  HEAP32[($8_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 4 | 0) >> 2] = $5_1;
  label$3 : {
   label$4 : {
    if ((HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$4
    }
    if ((HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$4
    }
    $492(HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0);
    HEAP32[($8_1 + 28 | 0) >> 2] = 0;
    break label$3;
   }
   label$5 : {
    if (!((HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$5
    }
    if ((HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$5
    }
    (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $260(HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
    break label$3;
   }
   label$6 : {
    if ((HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$6
    }
    if (!((HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$6
    }
    (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $261(HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
    break label$3;
   }
   $65_1 = 4;
   $28(6294 | 0, 5910 | 0, 1621 | 0, $65_1 | 0) | 0;
   HEAP32[($8_1 + 28 | 0) >> 2] = $65_1;
  }
  $69_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
  label$7 : {
   $73_1 = $8_1 + 32 | 0;
   if ($73_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $73_1;
  }
  return $69_1 | 0;
 }
 
 function $263($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $25_1 = 0, $50_1 = 0, $230_1 = 0.0, $78_1 = 0, $237_1 = 0.0, $102_1 = 0, $240_1 = 0.0, $128_1 = 0, $243_1 = 0.0, $140_1 = 0, $158_1 = 0, $247_1 = 0.0, $181_1 = 0, $250_1 = 0.0, $193_1 = 0, $211_1 = 0, $225_1 = 0, $224_1 = 0, $246_1 = 0.0, $157_1 = 0, $253_1 = 0.0, $210_1 = 0, $221_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 48 | 0;
  label$1 : {
   $224_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $224_1;
  }
  $7_1 = 0;
  HEAP32[($6_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if ((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) < ($7_1 | 0) & 1 | 0) {
      break label$5
     }
     if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) > (($254(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) | 0) - 1 | 0 | 0) & 1 | 0)) {
      break label$4
     }
    }
    $25_1 = 7;
    $28(6088 | 0, 5910 | 0, 1670 | 0, $25_1 | 0) | 0;
    HEAP32[($6_1 + 44 | 0) >> 2] = $25_1;
    break label$3;
   }
   label$6 : {
    if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$6
    }
    if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) != (2 | 0) & 1 | 0)) {
     break label$6
    }
    if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) != (3 | 0) & 1 | 0)) {
     break label$6
    }
    $50_1 = 9;
    $28(6088 | 0, 5910 | 0, 1674 | 0, $50_1 | 0) | 0;
    HEAP32[($6_1 + 44 | 0) >> 2] = $50_1;
    break label$3;
   }
   label$7 : {
    if (HEAP32[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) {
     break label$7
    }
    HEAP32[($6_1 + 28 | 0) >> 2] = 3;
   }
   label$8 : {
    if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0) & 1 | 0)) {
     break label$8
    }
    $230_1 = +(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) + (+HEAPF64[((HEAP32[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
    label$9 : {
     label$10 : {
      if (!(Math_abs($230_1) < 2147483648.0)) {
       break label$10
      }
      $78_1 = ~~$230_1;
      break label$9;
     }
     $78_1 = -2147483648;
    }
    HEAP32[($6_1 + 24 | 0) >> 2] = $78_1;
   }
   label$11 : {
    if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0) & 2 | 0)) {
     break label$11
    }
    $237_1 = +(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) + (+HEAPF64[((HEAP32[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3]);
    label$12 : {
     label$13 : {
      if (!(Math_abs($237_1) < 2147483648.0)) {
       break label$13
      }
      $102_1 = ~~$237_1;
      break label$12;
     }
     $102_1 = -2147483648;
    }
    HEAP32[($6_1 + 24 | 0) >> 2] = $102_1;
   }
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $494(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
   label$14 : {
    if (!(HEAP32[($6_1 + 4 | 0) >> 2] | 0)) {
     break label$14
    }
    $28(5994 | 0, 5910 | 0, 1690 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
    break label$3;
   }
   label$15 : {
    if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0) & 1 | 0)) {
     break label$15
    }
    $240_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
    label$16 : {
     label$17 : {
      if (!(Math_abs($240_1) < 2147483648.0)) {
       break label$17
      }
      $128_1 = ~~$240_1;
      break label$16;
     }
     $128_1 = -2147483648;
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = $128_1;
    $243_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    label$18 : {
     label$19 : {
      if (!(Math_abs($243_1) < 2147483648.0)) {
       break label$19
      }
      $140_1 = ~~$243_1;
      break label$18;
     }
     $140_1 = -2147483648;
    }
    HEAP32[($6_1 + 16 | 0) >> 2] = $140_1;
    label$20 : {
     label$21 : while (1) {
      if (!((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$20
      }
      $246_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      $157_1 = HEAP32[(HEAP32[($6_1 + 36 | 0) >> 2] | 0) >> 2] | 0;
      $158_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
      HEAP32[($6_1 + 20 | 0) >> 2] = $158_1 + 1 | 0;
      HEAPF64[($157_1 + ($158_1 << 3 | 0) | 0) >> 3] = $246_1;
      HEAP32[($6_1 + 16 | 0) >> 2] = (HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 1 | 0;
      continue label$21;
     };
    }
   }
   label$22 : {
    if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0) & 2 | 0)) {
     break label$22
    }
    $247_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
    label$23 : {
     label$24 : {
      if (!(Math_abs($247_1) < 2147483648.0)) {
       break label$24
      }
      $181_1 = ~~$247_1;
      break label$23;
     }
     $181_1 = -2147483648;
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = $181_1;
    $250_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    label$25 : {
     label$26 : {
      if (!(Math_abs($250_1) < 2147483648.0)) {
       break label$26
      }
      $193_1 = ~~$250_1;
      break label$25;
     }
     $193_1 = -2147483648;
    }
    HEAP32[($6_1 + 16 | 0) >> 2] = $193_1;
    label$27 : {
     label$28 : while (1) {
      if (!((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$27
      }
      $253_1 = +HEAPF64[((HEAP32[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      $210_1 = HEAP32[(HEAP32[($6_1 + 36 | 0) >> 2] | 0) >> 2] | 0;
      $211_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
      HEAP32[($6_1 + 20 | 0) >> 2] = $211_1 + 1 | 0;
      HEAPF64[($210_1 + ($211_1 << 3 | 0) | 0) >> 3] = $253_1;
      HEAP32[($6_1 + 16 | 0) >> 2] = (HEAP32[($6_1 + 16 | 0) >> 2] | 0) + 1 | 0;
      continue label$28;
     };
    }
   }
   HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  }
  $221_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
  label$29 : {
   $225_1 = $6_1 + 48 | 0;
   if ($225_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $225_1;
  }
  return $221_1 | 0;
 }
 
 function $264($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  $4_1 = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $1064(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $4_1 | 0;
 }
 
 function $265($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $21_1 = 0, $20_1 = 0, $17_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[(0 + 11876 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[(0 + 11876 | 0) >> 2] | 0](HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
    break label$3;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  }
  $17_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$5 : {
   $21_1 = $3_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $21_1;
  }
  return $17_1 | 0;
 }
 
 function $266($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $57_1 = 0, $56_1 = 0, $53_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 48 | 0;
  label$1 : {
   $56_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $56_1;
  }
  HEAP32[($3_1 + 40 | 0) >> 2] = $0_1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $221((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 8 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (HEAP32[($3_1 + 32 | 0) >> 2] | 0) {
     break label$4
    }
    HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 24 | 0) >> 2] = 0;
    HEAP32[($3_1 + 44 | 0) >> 2] = 1;
    break label$3;
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = HEAP32[(HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 2] | 0;
   HEAPF64[($3_1 + 16 | 0) >> 3] = +HEAPF64[(HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3];
   HEAP32[($3_1 + 36 | 0) >> 2] = 1;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 36 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAPF64[($3_1 + 8 | 0) >> 3] = +HEAPF64[(HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3];
     label$7 : {
      if (!(+HEAPF64[($3_1 + 8 | 0) >> 3] > +HEAPF64[($3_1 + 16 | 0) >> 3] & 1 | 0)) {
       break label$7
      }
      HEAP32[($3_1 + 24 | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
      HEAPF64[($3_1 + 16 | 0) >> 3] = +HEAPF64[($3_1 + 8 | 0) >> 3];
     }
     HEAP32[($3_1 + 36 | 0) >> 2] = (HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
   label$8 : {
    if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$8
    }
    HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
    HEAP32[($3_1 + 44 | 0) >> 2] = 1;
    break label$3;
   }
   HEAP32[($3_1 + 44 | 0) >> 2] = 0;
  }
  $53_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
  label$9 : {
   $57_1 = $3_1 + 48 | 0;
   if ($57_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $57_1;
  }
  return $53_1 | 0;
 }
 
 function $267($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $49_1 = 0, $48_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $48_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $48_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $219(((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 28) | 0) + 8 | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  $1064(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
  label$5 : {
   if (!((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$5
   }
   $1064(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
  }
  label$6 : {
   if (!((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$6
   }
   $1064(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
  }
  label$7 : {
   $49_1 = $3_1 + 16 | 0;
   if ($49_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $49_1;
  }
  return;
 }
 
 function $268($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 48 | 0;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((((HEAP32[($4_1 + 36 | 0) >> 2] | 0) << 1 | 0) + 1 | 0 | 0) < (HEAP32[(HEAP32[($4_1 + 44 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($4_1 + 32 | 0) >> 2] = ((HEAP32[($4_1 + 36 | 0) >> 2] | 0) << 1 | 0) + 1 | 0;
    label$3 : {
     if (!(((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0 | 0) < (HEAP32[(HEAP32[($4_1 + 44 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     if (!(+HEAPF64[(HEAP32[((HEAP32[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] < +HEAPF64[(HEAP32[((HEAP32[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
    }
    label$4 : {
     label$5 : {
      if (!(+HEAPF64[(HEAP32[((HEAP32[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 36 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] < +HEAPF64[(HEAP32[((HEAP32[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[(HEAP32[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 36 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) >> 2] | 0;
      HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[(HEAP32[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) >> 2] | 0;
      HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 36 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 36 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
      HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
      HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
      break label$4;
     }
     break label$1;
    }
    continue label$2;
   };
  }
  return;
 }
 
 function $269($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 48 | 0;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($4_1 + 32 | 0) >> 2] = ((HEAP32[($4_1 + 36 | 0) >> 2] | 0) - 1 | 0 | 0) / (2 | 0) | 0;
    label$3 : {
     label$4 : {
      if (!(+HEAPF64[(HEAP32[((HEAP32[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] < +HEAPF64[(HEAP32[((HEAP32[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 36 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
       break label$4
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[(HEAP32[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 36 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) >> 2] | 0;
      HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[(HEAP32[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) >> 2] | 0;
      HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 36 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 36 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
      HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
      HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
      break label$3;
     }
     break label$1;
    }
    continue label$2;
   };
  }
  return;
 }
 
 function $270($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $25_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $24_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $24_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = ((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) / (2 | 0) | 0) - 1 | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$3
    }
    $268(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    continue label$4;
   };
  }
  label$5 : {
   $25_1 = $3_1 + 16 | 0;
   if ($25_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  return;
 }
 
 function $271($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $65_1 = 0, $88_1 = 0, $87_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $87_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $87_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[((HEAP32[((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[((HEAP32[((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = -1;
  HEAPF64[($4_1 + 16 | 0) >> 3] = +HEAPF64[(HEAP32[((HEAP32[((HEAP32[((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3];
  HEAP32[((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0;
  $65_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  HEAP32[$65_1 >> 2] = (HEAP32[$65_1 >> 2] | 0) + -1 | 0;
  label$3 : {
   label$4 : {
    if (!(+HEAPF64[($4_1 + 16 | 0) >> 3] > +HEAPF64[(HEAP32[((HEAP32[((HEAP32[((HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
     break label$4
    }
    $268(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
    break label$3;
   }
   $269(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  }
  label$5 : {
   $88_1 = $4_1 + 32 | 0;
   if ($88_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $88_1;
  }
  return;
 }
 
 function $272($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $23_1 = 0, $69_1 = 0, $94_1 = 0, $93_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $93_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $93_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) == ((HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = -1;
    $23_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    HEAP32[$23_1 >> 2] = (HEAP32[$23_1 >> 2] | 0) + -1 | 0;
    break label$3;
   }
   HEAP32[$5_1 >> 2] = HEAP32[(HEAP32[((HEAP32[((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[$5_1 >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
   HEAP32[((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = -1;
   HEAP32[((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0;
   $69_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   HEAP32[$69_1 >> 2] = (HEAP32[$69_1 >> 2] | 0) + -1 | 0;
   HEAP32[$5_1 >> 2] = ((HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) / (2 | 0) | 0) - 1 | 0;
   label$5 : while (1) {
    if (!((HEAP32[$5_1 >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$3
    }
    $268(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
    continue label$5;
   };
  }
  label$6 : {
   $94_1 = $5_1 + 16 | 0;
   if ($94_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $94_1;
  }
  return;
 }
 
 function $273($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $98_1 = 0, $97_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 48 | 0;
  label$1 : {
   $97_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $97_1;
  }
  $6_1 = 0;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $6_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 40 | 0) >> 2] | 0, 28) | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $221((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 8 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $6_1;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    label$5 : {
     if (!((HEAP32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     label$6 : {
      if (!((HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[($5_1 + 24 | 0) >> 2] = 1;
     }
     break label$3;
    }
    HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  label$7 : {
   if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$7
   }
   HEAPF64[($5_1 + 8 | 0) >> 3] = +HEAPF64[(HEAP32[((HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3];
   $225((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
   label$8 : {
    if (!(HEAP32[($5_1 + 24 | 0) >> 2] | 0)) {
     break label$8
    }
    $266(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    label$9 : {
     label$10 : {
      if (!((HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$10
      }
      label$11 : {
       label$12 : {
        if (!(+HEAPF64[(HEAP32[((HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] > +HEAPF64[($5_1 + 8 | 0) >> 3] & 1 | 0)) {
         break label$12
        }
        $269(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
        break label$11;
       }
       $268(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
      }
      break label$9;
     }
     $272(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0);
    }
   }
  }
  label$13 : {
   $98_1 = $5_1 + 48 | 0;
   if ($98_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $98_1;
  }
  return;
 }
 
 function $274($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return (HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) - (HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] | 0) | 0 | 0;
 }
 
 function $275($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $151_1 = 0, $150_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $150_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $150_1;
  }
  $6_1 = 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $6_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = ((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 24 | 0) >> 2] | 0, 28) | 0) + 8 | 0;
  label$3 : {
   if (!((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) != ($6_1 | 0) & 1 | 0)) {
    break label$3
   }
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $221(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
   HEAP32[($5_1 + 12 | 0) >> 2] = 0;
   label$4 : {
    label$5 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     label$6 : {
      if (!((HEAP32[((HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      break label$4;
     }
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$5;
    };
   }
   label$7 : {
    label$8 : {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) >= (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$8
     }
     $36(6358 | 0, 6330 | 0, 409 | 0, -1 | 0) | 0;
     break label$7;
    }
    label$9 : {
     label$10 : while (1) {
      if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$9
      }
      HEAP32[$5_1 >> 2] = HEAP32[((HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0) + (((HEAP32[($5_1 + 12 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0;
      label$11 : {
       label$12 : {
        if (!((HEAP32[((HEAP32[$5_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) > (HEAP32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$12
        }
        HEAP32[((HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
        HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + -1 | 0;
        break label$11;
       }
       break label$9;
      }
      continue label$10;
     };
    }
    HEAP32[((HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    label$13 : {
     label$14 : while (1) {
      if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
       break label$13
      }
      HEAP32[$5_1 >> 2] = HEAP32[((HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0) + (((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0;
      label$15 : {
       label$16 : {
        if (!((HEAP32[((HEAP32[$5_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$16
        }
        HEAP32[((HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
        HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
        break label$15;
       }
       break label$13;
      }
      continue label$14;
     };
    }
    HEAP32[((HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = 1;
   }
  }
  label$17 : {
   if (HEAP32[($5_1 + 4 | 0) >> 2] | 0) {
    break label$17
   }
   $226(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, 17 | 0);
  }
  label$18 : {
   $151_1 = $5_1 + 32 | 0;
   if ($151_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $151_1;
  }
  return;
 }
 
 function $276($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  var $5_1 = 0, $224_1 = 0, $223_1 = 0, $220_1 = 0;
  $5_1 = global$0 - 64 | 0;
  label$1 : {
   $223_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $223_1;
  }
  HEAP32[($5_1 + 56 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $1_1;
  HEAPF64[($5_1 + 40 | 0) >> 3] = $2_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 28 | 0) >> 2] | 0, 28) | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 24 | 0) >> 2] | 0, 28) | 0;
  label$3 : {
   label$4 : {
    if (!((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    if (!(+HEAPF64[($5_1 + 40 | 0) >> 3] >= +HEAPF64[(HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
     break label$4
    }
    HEAPF64[(HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] = +HEAPF64[($5_1 + 40 | 0) >> 3];
    HEAP32[($5_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    $269(HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0);
    label$5 : {
     label$6 : {
      if (!((HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      label$7 : {
       label$8 : {
        if (!(+HEAPF64[(HEAP32[((HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] < +HEAPF64[($5_1 + 40 | 0) >> 3] & 1 | 0)) {
         break label$8
        }
        HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
        HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
        $269(HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
        break label$7;
       }
      }
      break label$5;
     }
     HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     $269(HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($5_1 + 60 | 0) >> 2] = 1;
    break label$3;
   }
   label$9 : {
    if (!((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$9
    }
    if (!(+HEAPF64[($5_1 + 40 | 0) >> 3] <= +HEAPF64[(HEAP32[((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
     break label$9
    }
    HEAPF64[($5_1 + 16 | 0) >> 3] = +HEAPF64[(HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3];
    HEAPF64[(HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] = +HEAPF64[($5_1 + 40 | 0) >> 3];
    label$10 : {
     if (!((HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$10
     }
     label$11 : {
      label$12 : {
       if (!(+HEAPF64[($5_1 + 16 | 0) >> 3] > +HEAPF64[($5_1 + 40 | 0) >> 3] & 1 | 0)) {
        break label$12
       }
       $266(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
       $268(HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
       break label$11;
      }
      HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      $269(HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
     }
    }
    HEAP32[($5_1 + 60 | 0) >> 2] = 0;
    break label$3;
   }
   HEAPF64[(HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] = +HEAPF64[($5_1 + 40 | 0) >> 3];
   label$13 : {
    label$14 : {
     if (!((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$14
     }
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
     HEAP32[($5_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     $269(HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0);
     label$15 : {
      label$16 : {
       if (!((HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$16
       }
       label$17 : {
        label$18 : {
         if (!(+HEAPF64[(HEAP32[((HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] < +HEAPF64[($5_1 + 40 | 0) >> 3] & 1 | 0)) {
          break label$18
         }
         HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
         HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
         $269(HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
         break label$17;
        }
       }
       break label$15;
      }
      HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      $269(HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
     }
     break label$13;
    }
    $266(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    $268(HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0);
    label$19 : {
     label$20 : {
      if (!((HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$20
      }
      break label$19;
     }
     $266(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     $268(HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
    }
   }
   HEAP32[($5_1 + 60 | 0) >> 2] = 1;
  }
  $220_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
  label$21 : {
   $224_1 = $5_1 + 64 | 0;
   if ($224_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $224_1;
  }
  return $220_1 | 0;
 }
 
 function $277($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $380_1 = 0, $1296 = 0, $14_1 = 0, $37_1 = 0, $44_1 = 0, $62_1 = 0, $94_1 = 0, $1518 = 0.0, $180_1 = 0, $185_1 = 0, $1524 = 0.0, $202_1 = 0, $207_1 = 0, $215_1 = 0, $250_1 = 0, $266_1 = 0, $282_1 = 0, $333_1 = 0, $344_1 = 0, $376_1 = 0, $1531 = 0.0, $1533 = 0.0, $409_1 = 0, $1539 = 0.0, $1544 = 0.0, $1560 = 0.0, $682_1 = 0, $694_1 = 0, $1581 = 0.0, $775_1 = 0, $906_1 = 0, $943_1 = 0, $1022_1 = 0, $1286 = 0, $1312 = 0, $1385 = 0, $1412 = 0, $1511 = 0, $1510 = 0, $1517 = 0.0, $170_1 = 0, $1523 = 0.0, $192_1 = 0, $214_1 = 0, $2153 = 0, $343_1 = 0, $2408 = 0, $402_1 = 0, $405_1 = 0, $1507 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $7_1 = global$0 - 320 | 0;
  label$1 : {
   $1510 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $1510;
  }
  HEAP32[($7_1 + 312 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 308 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 304 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 300 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 296 | 0) >> 2] = $4_1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $254(HEAP32[($7_1 + 312 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 288 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $249(HEAP32[($7_1 + 312 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 292 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!($253(HEAP32[($7_1 + 312 | 0) >> 2] | 0 | 0) | 0)) {
     break label$4
    }
    $14_1 = 12;
    $28(6506 | 0, 6330 | 0, 641 | 0, $14_1 | 0) | 0;
    HEAP32[($7_1 + 316 | 0) >> 2] = $14_1;
    break label$3;
   }
   HEAP32[($7_1 + 280 | 0) >> 2] = (HEAP32[($7_1 + 288 | 0) >> 2] | 0) - 1 | 0;
   label$5 : {
    label$6 : {
     if (!((HEAP32[($7_1 + 308 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$6
     }
     label$7 : {
      if (!(($490(HEAP32[($7_1 + 308 | 0) >> 2] | 0 | 0) | 0 | 0) < ($249(HEAP32[($7_1 + 312 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
       break label$7
      }
      $37_1 = 4;
      $28(6571 | 0, 6330 | 0, 648 | 0, $37_1 | 0) | 0;
      HEAP32[($7_1 + 316 | 0) >> 2] = $37_1;
      break label$3;
     }
     label$8 : {
      if (!($510(HEAP32[($7_1 + 308 | 0) >> 2] | 0 | 0, +(+(0 | 0))) | 0)) {
       break label$8
      }
      $44_1 = 4;
      $28(6628 | 0, 6330 | 0, 651 | 0, $44_1 | 0) | 0;
      HEAP32[($7_1 + 316 | 0) >> 2] = $44_1;
      break label$3;
     }
     (wasm2js_i32$0 = $7_1, wasm2js_f64$0 = +$505(HEAP32[($7_1 + 308 | 0) >> 2] | 0 | 0)), HEAPF64[(wasm2js_i32$0 + 136 | 0) >> 3] = wasm2js_f64$0;
     break label$5;
    }
    HEAPF64[($7_1 + 136 | 0) >> 3] = +(HEAP32[($7_1 + 292 | 0) >> 2] | 0 | 0);
   }
   (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $26(HEAP32[($7_1 + 312 | 0) >> 2] | 0 | 0, $7_1 + 124 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 100 | 0) >> 2] = wasm2js_i32$1;
   label$9 : {
    if (!(HEAP32[($7_1 + 100 | 0) >> 2] | 0)) {
     break label$9
    }
    $28(6653 | 0, 6330 | 0, 658 | 0, HEAP32[($7_1 + 100 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($7_1 + 316 | 0) >> 2] = HEAP32[($7_1 + 100 | 0) >> 2] | 0;
    break label$3;
   }
   label$10 : {
    if (!(HEAP32[($7_1 + 124 | 0) >> 2] | 0)) {
     break label$10
    }
    $62_1 = 4;
    $28(6654 | 0, 6330 | 0, 660 | 0, $62_1 | 0) | 0;
    HEAP32[($7_1 + 316 | 0) >> 2] = $62_1;
    break label$3;
   }
   label$11 : {
    if (!((HEAP32[($7_1 + 296 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$11
    }
    if (!((HEAP32[($7_1 + 304 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$11
    }
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $18($7_1 + 104 | 0 | 0, HEAP32[($7_1 + 280 | 0) >> 2] | 0 | 0, 2 | 0) | 0), HEAP32[(wasm2js_i32$0 + 96 | 0) >> 2] = wasm2js_i32$1;
    label$12 : {
     if (!(HEAP32[($7_1 + 96 | 0) >> 2] | 0)) {
      break label$12
     }
     $28(6653 | 0, 6330 | 0, 666 | 0, HEAP32[($7_1 + 96 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 316 | 0) >> 2] = HEAP32[($7_1 + 96 | 0) >> 2] | 0;
     break label$3;
    }
    $94_1 = $7_1 + 104 | 0;
    $33(18 | 0, $94_1 | 0);
    HEAP32[($7_1 + 304 | 0) >> 2] = $94_1;
   }
   label$13 : {
    if (!((HEAP32[($7_1 + 304 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$13
    }
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $20(HEAP32[($7_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 280 | 0) >> 2] | 0 | 0, 2 | 0) | 0), HEAP32[(wasm2js_i32$0 + 92 | 0) >> 2] = wasm2js_i32$1;
    label$14 : {
     if (!(HEAP32[($7_1 + 92 | 0) >> 2] | 0)) {
      break label$14
     }
     $28(6653 | 0, 6330 | 0, 672 | 0, HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 316 | 0) >> 2] = HEAP32[($7_1 + 92 | 0) >> 2] | 0;
     break label$3;
    }
    $22(HEAP32[($7_1 + 304 | 0) >> 2] | 0 | 0);
   }
   label$15 : {
    if (!((HEAP32[($7_1 + 300 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$15
    }
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $494(HEAP32[($7_1 + 300 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 280 | 0) >> 2] | 0) + 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 88 | 0) >> 2] = wasm2js_i32$1;
    label$16 : {
     if (!(HEAP32[($7_1 + 88 | 0) >> 2] | 0)) {
      break label$16
     }
     $28(6653 | 0, 6330 | 0, 677 | 0, HEAP32[($7_1 + 88 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 316 | 0) >> 2] = HEAP32[($7_1 + 88 | 0) >> 2] | 0;
     break label$3;
    }
   }
   (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $486($7_1 + 168 | 0 | 0, HEAP32[($7_1 + 288 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 84 | 0) >> 2] = wasm2js_i32$1;
   label$17 : {
    if (!(HEAP32[($7_1 + 84 | 0) >> 2] | 0)) {
     break label$17
    }
    $28(6653 | 0, 6330 | 0, 681 | 0, HEAP32[($7_1 + 84 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($7_1 + 316 | 0) >> 2] = HEAP32[($7_1 + 84 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, $7_1 + 168 | 0 | 0);
   label$18 : {
    label$19 : {
     if (!((HEAP32[($7_1 + 308 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$19
     }
     HEAP32[($7_1 + 276 | 0) >> 2] = 0;
     label$20 : {
      label$21 : while (1) {
       if (!((HEAP32[($7_1 + 276 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 292 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$20
       }
       $1517 = +HEAPF64[((HEAP32[(HEAP32[($7_1 + 308 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 276 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       $170_1 = HEAP32[($7_1 + 168 | 0) >> 2] | 0;
       $1518 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 312 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 276 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       label$22 : {
        label$23 : {
         if (!(Math_abs($1518) < 2147483648.0)) {
          break label$23
         }
         $180_1 = ~~$1518;
         break label$22;
        }
        $180_1 = -2147483648;
       }
       $185_1 = $170_1 + ($180_1 << 3 | 0) | 0;
       HEAPF64[$185_1 >> 3] = +HEAPF64[$185_1 >> 3] + $1517;
       $1523 = +HEAPF64[((HEAP32[(HEAP32[($7_1 + 308 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 276 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       $192_1 = HEAP32[($7_1 + 168 | 0) >> 2] | 0;
       $1524 = +HEAPF64[((HEAP32[((HEAP32[($7_1 + 312 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 276 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       label$24 : {
        label$25 : {
         if (!(Math_abs($1524) < 2147483648.0)) {
          break label$25
         }
         $202_1 = ~~$1524;
         break label$24;
        }
        $202_1 = -2147483648;
       }
       $207_1 = $192_1 + ($202_1 << 3 | 0) | 0;
       HEAPF64[$207_1 >> 3] = +HEAPF64[$207_1 >> 3] + $1523;
       HEAP32[($7_1 + 276 | 0) >> 2] = (HEAP32[($7_1 + 276 | 0) >> 2] | 0) + 1 | 0;
       continue label$21;
      };
     }
     break label$18;
    }
    $214_1 = HEAP32[($7_1 + 312 | 0) >> 2] | 0;
    $535($7_1 + 64 | 0 | 0);
    $215_1 = 8;
    HEAP32[(($7_1 + 16 | 0) + $215_1 | 0) >> 2] = HEAP32[(($7_1 + 64 | 0) + $215_1 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
    $2153 = i64toi32_i32$0;
    i64toi32_i32$0 = $7_1;
    HEAP32[($7_1 + 16 | 0) >> 2] = $2153;
    HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$1;
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $257($214_1 | 0, $7_1 + 168 | 0 | 0, $7_1 + 16 | 0 | 0, 3 | 0, 1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 80 | 0) >> 2] = wasm2js_i32$1;
    label$26 : {
     if (!(HEAP32[($7_1 + 80 | 0) >> 2] | 0)) {
      break label$26
     }
     $28(6653 | 0, 6330 | 0, 690 | 0, HEAP32[($7_1 + 80 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 316 | 0) >> 2] = HEAP32[($7_1 + 80 | 0) >> 2] | 0;
     break label$3;
    }
   }
   HEAP32[($7_1 + 188 | 0) >> 2] = HEAP32[($7_1 + 288 | 0) >> 2] | 0;
   HEAP32[($7_1 + 184 | 0) >> 2] = HEAP32[($7_1 + 288 | 0) >> 2] | 0;
   (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $1068(HEAP32[($7_1 + 288 | 0) >> 2] | 0 | 0, 28 | 0) | 0), HEAP32[(wasm2js_i32$0 + 192 | 0) >> 2] = wasm2js_i32$1;
   label$27 : {
    if (!((HEAP32[($7_1 + 192 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$27
    }
    $250_1 = 2;
    $28(6728 | 0, 6330 | 0, 699 | 0, $250_1 | 0) | 0;
    HEAP32[($7_1 + 316 | 0) >> 2] = $250_1;
    break label$3;
   }
   $33(12 | 0, HEAP32[($7_1 + 192 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $1068(HEAP32[($7_1 + 288 | 0) >> 2] | 0 | 0, 4 | 0) | 0), HEAP32[(wasm2js_i32$0 + 196 | 0) >> 2] = wasm2js_i32$1;
   label$28 : {
    if (!((HEAP32[($7_1 + 196 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$28
    }
    $266_1 = 2;
    $28(6728 | 0, 6330 | 0, 704 | 0, $266_1 | 0) | 0;
    HEAP32[($7_1 + 316 | 0) >> 2] = $266_1;
    break label$3;
   }
   $33(12 | 0, HEAP32[($7_1 + 196 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $1068(HEAP32[($7_1 + 288 | 0) >> 2] | 0 | 0, 4 | 0) | 0), HEAP32[(wasm2js_i32$0 + 200 | 0) >> 2] = wasm2js_i32$1;
   label$29 : {
    if (!((HEAP32[($7_1 + 200 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$29
    }
    $282_1 = 2;
    $28(6728 | 0, 6330 | 0, 709 | 0, $282_1 | 0) | 0;
    HEAP32[($7_1 + 316 | 0) >> 2] = $282_1;
    break label$3;
   }
   $34(2 | 0);
   $33(19 | 0, $7_1 + 184 | 0 | 0);
   HEAP32[($7_1 + 276 | 0) >> 2] = 0;
   label$30 : {
    label$31 : while (1) {
     if (!((HEAP32[($7_1 + 276 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 288 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$30
     }
     $218(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 276 | 0) >> 2] | 0, 28) | 0) + 8 | 0 | 0, 0 | 0) | 0;
     HEAP32[((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 276 | 0) >> 2] | 0, 28) | 0) >> 2] = HEAP32[($7_1 + 276 | 0) >> 2] | 0;
     HEAP32[(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 276 | 0) >> 2] | 0, 28) | 0) + 4 | 0) >> 2] = 1;
     HEAP32[($7_1 + 276 | 0) >> 2] = (HEAP32[($7_1 + 276 | 0) >> 2] | 0) + 1 | 0;
     continue label$31;
    };
   }
   (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $1068(HEAP32[($7_1 + 292 | 0) >> 2] | 0 | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 156 | 0) >> 2] = wasm2js_i32$1;
   label$32 : {
    if (!((HEAP32[($7_1 + 156 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$32
    }
    $333_1 = 2;
    $28(6728 | 0, 6330 | 0, 723 | 0, $333_1 | 0) | 0;
    HEAP32[($7_1 + 316 | 0) >> 2] = $333_1;
    break label$3;
   }
   $33(12 | 0, HEAP32[($7_1 + 156 | 0) >> 2] | 0 | 0);
   $343_1 = HEAP32[($7_1 + 312 | 0) >> 2] | 0;
   $539($7_1 + 48 | 0 | 0, 0 | 0);
   $344_1 = 8;
   HEAP32[($7_1 + $344_1 | 0) >> 2] = HEAP32[(($7_1 + 48 | 0) + $344_1 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
   $2408 = i64toi32_i32$1;
   i64toi32_i32$1 = $7_1;
   HEAP32[$7_1 >> 2] = $2408;
   HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $541($343_1 | 0, $7_1 | 0, $7_1 + 216 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
   label$33 : {
    if (!(HEAP32[($7_1 + 60 | 0) >> 2] | 0)) {
     break label$33
    }
    $28(6653 | 0, 6330 | 0, 727 | 0, HEAP32[($7_1 + 60 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($7_1 + 316 | 0) >> 2] = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
    break label$3;
   }
   $33(11 | 0, $7_1 + 216 | 0 | 0);
   (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $1068((HEAP32[($7_1 + 292 | 0) >> 2] | 0) << 1 | 0 | 0, 16 | 0) | 0), HEAP32[(wasm2js_i32$0 + 212 | 0) >> 2] = wasm2js_i32$1;
   label$34 : {
    if (!((HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$34
    }
    $376_1 = 2;
    $28(6728 | 0, 6330 | 0, 731 | 0, $376_1 | 0) | 0;
    HEAP32[($7_1 + 316 | 0) >> 2] = $376_1;
    break label$3;
   }
   $380_1 = 0;
   $33(12 | 0, HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0);
   HEAPF64[($7_1 + 128 | 0) >> 3] = +($380_1 | 0);
   HEAP32[($7_1 + 276 | 0) >> 2] = $380_1;
   HEAP32[($7_1 + 272 | 0) >> 2] = $380_1;
   label$35 : {
    label$36 : while (1) {
     if (!(((HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0) >= (HEAP32[($7_1 + 228 | 0) >> 2] | 0 | 0) ^ -1 | 0) & 1 | 0)) {
      break label$35
     }
     label$37 : {
      label$38 : {
       if (HEAP32[($7_1 + 216 | 0) >> 2] | 0) {
        break label$38
       }
       $1531 = +(HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0);
       break label$37;
      }
      $1531 = +HEAPF64[((HEAP32[(HEAP32[($7_1 + 232 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 220 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     }
     $1533 = $1531;
     $402_1 = $7_1 + 240 | 0;
     $405_1 = $7_1 + 236 | 0;
     label$39 : {
      label$40 : {
       if (!(Math_abs($1533) < 2147483648.0)) {
        break label$40
       }
       $409_1 = ~~$1533;
       break label$39;
      }
      $409_1 = -2147483648;
     }
     HEAP32[($7_1 + 44 | 0) >> 2] = $409_1;
     $258(HEAP32[($7_1 + 312 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, $402_1 | 0, $405_1 | 0) | 0;
     HEAP32[($7_1 + 256 | 0) >> 2] = HEAP32[($7_1 + 240 | 0) >> 2] | 0;
     HEAP32[($7_1 + 252 | 0) >> 2] = HEAP32[($7_1 + 236 | 0) >> 2] | 0;
     label$41 : {
      label$42 : {
       if (!((HEAP32[($7_1 + 256 | 0) >> 2] | 0 | 0) == (HEAP32[($7_1 + 252 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$42
       }
       label$43 : {
        label$44 : {
         if (!((HEAP32[($7_1 + 308 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$44
         }
         $1539 = 2.0 * +HEAPF64[((HEAP32[(HEAP32[($7_1 + 308 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         break label$43;
        }
        $1539 = 2.0;
       }
       HEAPF64[($7_1 + 128 | 0) >> 3] = +HEAPF64[($7_1 + 128 | 0) >> 3] + $1539;
       break label$41;
      }
      label$45 : {
       if (!((HEAP32[($7_1 + 256 | 0) >> 2] | 0 | 0) > (HEAP32[($7_1 + 252 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$45
       }
       HEAP32[($7_1 + 248 | 0) >> 2] = HEAP32[($7_1 + 256 | 0) >> 2] | 0;
       HEAP32[($7_1 + 256 | 0) >> 2] = HEAP32[($7_1 + 252 | 0) >> 2] | 0;
       HEAP32[($7_1 + 252 | 0) >> 2] = HEAP32[($7_1 + 248 | 0) >> 2] | 0;
      }
      label$46 : {
       label$47 : {
        if (!((HEAP32[($7_1 + 308 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$47
        }
        $1544 = 2.0;
        HEAPF64[((HEAP32[($7_1 + 156 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 272 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $1544 * (+HEAPF64[((HEAP32[(HEAP32[($7_1 + 308 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / (+HEAPF64[($7_1 + 136 | 0) >> 3] * $1544) - +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 256 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 252 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / (4.0 * +HEAPF64[($7_1 + 136 | 0) >> 3] * +HEAPF64[($7_1 + 136 | 0) >> 3]));
        break label$46;
       }
       $1560 = 2.0;
       HEAPF64[((HEAP32[($7_1 + 156 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 272 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = $1560 * (1.0 / (+(HEAP32[($7_1 + 292 | 0) >> 2] | 0 | 0) * $1560) - +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 256 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 252 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] / (4.0 * +(HEAP32[($7_1 + 292 | 0) >> 2] | 0 | 0) * +(HEAP32[($7_1 + 292 | 0) >> 2] | 0 | 0)));
      }
      HEAP32[((HEAP32[($7_1 + 212 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 276 | 0) >> 2] | 0) << 4 | 0) | 0) >> 2] = HEAP32[($7_1 + 256 | 0) >> 2] | 0;
      HEAP32[(((HEAP32[($7_1 + 212 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 276 | 0) >> 2] | 0) << 4 | 0) | 0) + 4 | 0) >> 2] = HEAP32[($7_1 + 252 | 0) >> 2] | 0;
      HEAP32[(((HEAP32[($7_1 + 212 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 276 | 0) >> 2] | 0) << 4 | 0) | 0) + 8 | 0) >> 2] = (HEAP32[($7_1 + 156 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 272 | 0) >> 2] | 0) << 3 | 0) | 0;
      HEAP32[(((HEAP32[($7_1 + 212 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 276 | 0) >> 2] | 0) << 4 | 0) | 0) + 12 | 0) >> 2] = (HEAP32[($7_1 + 212 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 276 | 0) >> 2] | 0) + 1 | 0) << 4 | 0) | 0;
      HEAP32[((HEAP32[($7_1 + 212 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 276 | 0) >> 2] | 0) + 1 | 0) << 4 | 0) | 0) >> 2] = HEAP32[($7_1 + 252 | 0) >> 2] | 0;
      HEAP32[(((HEAP32[($7_1 + 212 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 276 | 0) >> 2] | 0) + 1 | 0) << 4 | 0) | 0) + 4 | 0) >> 2] = HEAP32[($7_1 + 256 | 0) >> 2] | 0;
      HEAP32[(((HEAP32[($7_1 + 212 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 276 | 0) >> 2] | 0) + 1 | 0) << 4 | 0) | 0) + 8 | 0) >> 2] = HEAP32[(((HEAP32[($7_1 + 212 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 276 | 0) >> 2] | 0) << 4 | 0) | 0) + 8 | 0) >> 2] | 0;
      HEAP32[(((HEAP32[($7_1 + 212 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 276 | 0) >> 2] | 0) + 1 | 0) << 4 | 0) | 0) + 12 | 0) >> 2] = (HEAP32[($7_1 + 212 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 276 | 0) >> 2] | 0) << 4 | 0) | 0;
      $222(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 256 | 0) >> 2] | 0, 28) | 0) + 8 | 0 | 0, (HEAP32[($7_1 + 212 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 276 | 0) >> 2] | 0) << 4 | 0) | 0 | 0) | 0;
      $222(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 252 | 0) >> 2] | 0, 28) | 0) + 8 | 0 | 0, (HEAP32[($7_1 + 212 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 276 | 0) >> 2] | 0) + 1 | 0) << 4 | 0) | 0 | 0) | 0;
      label$48 : {
       label$49 : {
        if ((HEAP32[(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 256 | 0) >> 2] | 0, 28) | 0) + 24 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
         break label$49
        }
        if (!(+HEAPF64[(HEAP32[((HEAP32[(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 256 | 0) >> 2] | 0, 28) | 0) + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] < +HEAPF64[(HEAP32[(((HEAP32[($7_1 + 212 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 276 | 0) >> 2] | 0) << 4 | 0) | 0) + 8 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
         break label$48
        }
       }
       HEAP32[(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 256 | 0) >> 2] | 0, 28) | 0) + 24 | 0) >> 2] = (HEAP32[($7_1 + 212 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 276 | 0) >> 2] | 0) << 4 | 0) | 0;
      }
      label$50 : {
       label$51 : {
        if ((HEAP32[(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 252 | 0) >> 2] | 0, 28) | 0) + 24 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
         break label$51
        }
        if (!(+HEAPF64[(HEAP32[((HEAP32[(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 252 | 0) >> 2] | 0, 28) | 0) + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] < +HEAPF64[(HEAP32[(((HEAP32[($7_1 + 212 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 276 | 0) >> 2] | 0) + 1 | 0) << 4 | 0) | 0) + 8 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
         break label$50
        }
       }
       HEAP32[(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 252 | 0) >> 2] | 0, 28) | 0) + 24 | 0) >> 2] = (HEAP32[($7_1 + 212 | 0) >> 2] | 0) + (((HEAP32[($7_1 + 276 | 0) >> 2] | 0) + 1 | 0) << 4 | 0) | 0;
      }
     }
     HEAP32[($7_1 + 276 | 0) >> 2] = (HEAP32[($7_1 + 276 | 0) >> 2] | 0) + 2 | 0;
     HEAP32[($7_1 + 272 | 0) >> 2] = (HEAP32[($7_1 + 272 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($7_1 + 220 | 0) >> 2] = (HEAP32[($7_1 + 220 | 0) >> 2] | 0) + 1 | 0;
     continue label$36;
    };
   }
   $682_1 = 0;
   $542($7_1 + 216 | 0 | 0);
   $34(1 | 0);
   HEAP32[($7_1 + 276 | 0) >> 2] = $682_1;
   HEAP32[($7_1 + 272 | 0) >> 2] = $682_1;
   label$52 : {
    label$53 : while (1) {
     if (!((HEAP32[($7_1 + 276 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 288 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$52
     }
     $694_1 = 0;
     $275($7_1 + 184 | 0 | 0, HEAP32[($7_1 + 276 | 0) >> 2] | 0 | 0, $694_1 | 0);
     label$54 : {
      label$55 : {
       if (!((HEAP32[(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 276 | 0) >> 2] | 0, 28) | 0) + 24 | 0) >> 2] | 0 | 0) != ($694_1 | 0) & 1 | 0)) {
        break label$55
       }
       HEAP32[((HEAP32[($7_1 + 196 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 272 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 276 | 0) >> 2] | 0, 28) | 0;
       HEAP32[((HEAP32[($7_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 276 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($7_1 + 272 | 0) >> 2] | 0;
       HEAP32[($7_1 + 272 | 0) >> 2] = (HEAP32[($7_1 + 272 | 0) >> 2] | 0) + 1 | 0;
       break label$54;
      }
      HEAP32[((HEAP32[($7_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 276 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = -1;
     }
     HEAP32[($7_1 + 276 | 0) >> 2] = (HEAP32[($7_1 + 276 | 0) >> 2] | 0) + 1 | 0;
     continue label$53;
    };
   }
   HEAP32[($7_1 + 184 | 0) >> 2] = HEAP32[($7_1 + 272 | 0) >> 2] | 0;
   label$56 : {
    label$57 : {
     if (!((HEAP32[($7_1 + 308 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$57
     }
     $1581 = +HEAPF64[($7_1 + 136 | 0) >> 3];
     break label$56;
    }
    $1581 = +(HEAP32[($7_1 + 292 | 0) >> 2] | 0 | 0);
   }
   HEAPF64[($7_1 + 160 | 0) >> 3] = 2.0 * $1581;
   label$58 : {
    label$59 : {
     if (!(+HEAPF64[($7_1 + 160 | 0) >> 3] == +(0 | 0) & 1 | 0)) {
      break label$59
     }
     break label$58;
    }
    $511($7_1 + 168 | 0 | 0, +(1.0 / +HEAPF64[($7_1 + 160 | 0) >> 3]));
    HEAPF64[($7_1 + 160 | 0) >> 3] = +HEAPF64[($7_1 + 128 | 0) >> 3] / +HEAPF64[($7_1 + 160 | 0) >> 3];
    HEAP32[($7_1 + 276 | 0) >> 2] = 0;
    label$60 : {
     label$61 : while (1) {
      if (!((HEAP32[($7_1 + 276 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 288 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$60
      }
      HEAPF64[($7_1 + 160 | 0) >> 3] = +HEAPF64[($7_1 + 160 | 0) >> 3] - +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 276 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 276 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      HEAP32[($7_1 + 276 | 0) >> 2] = (HEAP32[($7_1 + 276 | 0) >> 2] | 0) + 1 | 0;
      continue label$61;
     };
    }
   }
   $775_1 = 0;
   HEAPF64[($7_1 + 144 | 0) >> 3] = +HEAPF64[($7_1 + 160 | 0) >> 3];
   HEAP32[($7_1 + 244 | 0) >> 2] = $775_1;
   $270($7_1 + 184 | 0 | 0);
   HEAP32[($7_1 + 284 | 0) >> 2] = $775_1;
   label$62 : {
    label$63 : while (1) {
     if (!((HEAP32[($7_1 + 284 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 280 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$62
     }
     label$64 : {
      if (!((HEAP32[(0 + 11876 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$64
      }
      label$65 : {
       if (!($265(0 | 0) | 0)) {
        break label$65
       }
       HEAP32[($7_1 + 316 | 0) >> 2] = 13;
       break label$3;
      }
     }
     label$66 : {
      if (!($534(6770 | 0, +(+(HEAP32[($7_1 + 284 | 0) >> 2] | 0 | 0) * 100.0 / +(HEAP32[($7_1 + 280 | 0) >> 2] | 0 | 0)), 0 | 0) | 0)) {
       break label$66
      }
      $31();
      HEAP32[($7_1 + 316 | 0) >> 2] = 13;
      break label$3;
     }
     label$67 : {
      if (!((HEAP32[($7_1 + 300 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$67
      }
      HEAPF64[((HEAP32[(HEAP32[($7_1 + 300 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 284 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($7_1 + 160 | 0) >> 3];
     }
     label$68 : {
      if (!(+HEAPF64[($7_1 + 160 | 0) >> 3] >= +HEAPF64[($7_1 + 144 | 0) >> 3] & 1 | 0)) {
       break label$68
      }
      HEAPF64[($7_1 + 144 | 0) >> 3] = +HEAPF64[($7_1 + 160 | 0) >> 3];
      HEAP32[($7_1 + 244 | 0) >> 2] = HEAP32[($7_1 + 284 | 0) >> 2] | 0;
     }
     HEAP32[($7_1 + 276 | 0) >> 2] = 0;
     label$69 : {
      label$70 : while (1) {
       if (!((HEAP32[($7_1 + 276 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 188 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$69
       }
       label$71 : {
        label$72 : {
         if (!((HEAP32[(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 276 | 0) >> 2] | 0, 28) | 0) + 24 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
          break label$72
         }
         break label$71;
        }
        HEAP32[($7_1 + 272 | 0) >> 2] = 0;
        label$73 : {
         label$74 : while (1) {
          if (!((HEAP32[($7_1 + 272 | 0) >> 2] | 0 | 0) < ($221(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 276 | 0) >> 2] | 0, 28) | 0) + 8 | 0 | 0) | 0 | 0) & 1 | 0)) {
           break label$73
          }
          HEAP32[($7_1 + 208 | 0) >> 2] = HEAP32[((HEAP32[(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 276 | 0) >> 2] | 0, 28) | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 272 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
          HEAP32[($7_1 + 272 | 0) >> 2] = (HEAP32[($7_1 + 272 | 0) >> 2] | 0) + 1 | 0;
          continue label$74;
         };
        }
        HEAP32[($7_1 + 208 | 0) >> 2] = HEAP32[(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 276 | 0) >> 2] | 0, 28) | 0) + 24 | 0) >> 2] | 0;
       }
       HEAP32[($7_1 + 276 | 0) >> 2] = (HEAP32[($7_1 + 276 | 0) >> 2] | 0) + 1 | 0;
       continue label$70;
      };
     }
     HEAP32[($7_1 + 276 | 0) >> 2] = 0;
     label$75 : {
      label$76 : while (1) {
       if (!((HEAP32[($7_1 + 276 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 184 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$75
       }
       HEAP32[($7_1 + 276 | 0) >> 2] = (HEAP32[($7_1 + 276 | 0) >> 2] | 0) + 1 | 0;
       continue label$76;
      };
     }
     label$77 : {
      if (!((HEAP32[(HEAP32[($7_1 + 196 | 0) >> 2] | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
       break label$77
      }
      break label$62;
     }
     label$78 : {
      if (!((HEAP32[((HEAP32[(HEAP32[($7_1 + 196 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
       break label$78
      }
      break label$62;
     }
     $906_1 = 0;
     HEAP32[($7_1 + 252 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[(HEAP32[($7_1 + 196 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     HEAP32[($7_1 + 256 | 0) >> 2] = HEAP32[(HEAP32[((HEAP32[(HEAP32[($7_1 + 196 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) >> 2] | 0;
     (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $221(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 252 | 0) >> 2] | 0, 28) | 0) + 8 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 264 | 0) >> 2] = wasm2js_i32$1;
     (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $221(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 256 | 0) >> 2] | 0, 28) | 0) + 8 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 260 | 0) >> 2] = wasm2js_i32$1;
     HEAPF64[($7_1 + 160 | 0) >> 3] = +HEAPF64[($7_1 + 160 | 0) >> 3] + +HEAPF64[(HEAP32[((HEAP32[((HEAP32[(HEAP32[($7_1 + 196 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3];
     HEAP32[($7_1 + 272 | 0) >> 2] = $906_1;
     HEAP32[($7_1 + 276 | 0) >> 2] = $906_1;
     label$79 : while (1) {
      $943_1 = 0;
      label$80 : {
       if (!((HEAP32[($7_1 + 276 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 264 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$80
       }
       $943_1 = (HEAP32[($7_1 + 272 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 260 | 0) >> 2] | 0 | 0);
      }
      label$81 : {
       if (!($943_1 & 1 | 0)) {
        break label$81
       }
       HEAP32[($7_1 + 208 | 0) >> 2] = HEAP32[((HEAP32[(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 252 | 0) >> 2] | 0, 28) | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 276 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
       HEAP32[($7_1 + 204 | 0) >> 2] = HEAP32[((HEAP32[(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 256 | 0) >> 2] | 0, 28) | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 272 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
       label$82 : {
        label$83 : {
         if (!((HEAP32[((HEAP32[($7_1 + 208 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$83
         }
         label$84 : {
          label$85 : {
           if (!((HEAP32[((HEAP32[($7_1 + 208 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($7_1 + 256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$85
           }
           break label$84;
          }
          $276($7_1 + 184 | 0 | 0, HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, +(+HEAPF64[(HEAP32[((HEAP32[($7_1 + 208 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] - 2.0 * +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 256 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($7_1 + 208 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3])) | 0;
         }
         HEAP32[($7_1 + 276 | 0) >> 2] = (HEAP32[($7_1 + 276 | 0) >> 2] | 0) + 1 | 0;
         break label$82;
        }
        label$86 : {
         label$87 : {
          if (!((HEAP32[((HEAP32[($7_1 + 208 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$87
          }
          $1022_1 = $7_1 + 184 | 0;
          $276($1022_1 | 0, HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, +(+HEAPF64[(HEAP32[((HEAP32[($7_1 + 208 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] + +HEAPF64[(HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3])) | 0;
          $273($1022_1 | 0, HEAP32[((HEAP32[($7_1 + 208 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 256 | 0) >> 2] | 0 | 0);
          HEAP32[($7_1 + 276 | 0) >> 2] = (HEAP32[($7_1 + 276 | 0) >> 2] | 0) + 1 | 0;
          HEAP32[($7_1 + 272 | 0) >> 2] = (HEAP32[($7_1 + 272 | 0) >> 2] | 0) + 1 | 0;
          break label$86;
         }
         label$88 : {
          label$89 : {
           if (!((HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($7_1 + 252 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$89
           }
           break label$88;
          }
          HEAP32[((HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($7_1 + 252 | 0) >> 2] | 0;
          $275($7_1 + 184 | 0 | 0, HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
          HEAP32[(HEAP32[($7_1 + 204 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 252 | 0) >> 2] | 0;
          (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $223(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 252 | 0) >> 2] | 0, 28) | 0) + 8 | 0 | 0, HEAP32[($7_1 + 276 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 40 | 0) >> 2] = wasm2js_i32$1;
          label$90 : {
           if (!(HEAP32[($7_1 + 40 | 0) >> 2] | 0)) {
            break label$90
           }
           $28(6653 | 0, 6330 | 0, 935 | 0, HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) | 0;
           HEAP32[($7_1 + 316 | 0) >> 2] = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
           break label$3;
          }
          HEAP32[($7_1 + 264 | 0) >> 2] = (HEAP32[($7_1 + 264 | 0) >> 2] | 0) + 1 | 0;
          HEAP32[($7_1 + 276 | 0) >> 2] = (HEAP32[($7_1 + 276 | 0) >> 2] | 0) + 1 | 0;
          label$91 : {
           if (!(+HEAPF64[(HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] > +HEAPF64[(HEAP32[((HEAP32[(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 252 | 0) >> 2] | 0, 28) | 0) + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
            break label$91
           }
           HEAP32[(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 252 | 0) >> 2] | 0, 28) | 0) + 24 | 0) >> 2] = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
           HEAP32[($7_1 + 268 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 252 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
           $269($7_1 + 184 | 0 | 0, HEAP32[($7_1 + 268 | 0) >> 2] | 0 | 0);
          }
          $276($7_1 + 184 | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0, +(+HEAPF64[(HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] - 2.0 * +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 252 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3])) | 0;
         }
         HEAP32[($7_1 + 272 | 0) >> 2] = (HEAP32[($7_1 + 272 | 0) >> 2] | 0) + 1 | 0;
        }
       }
       continue label$79;
      }
      break label$79;
     };
     label$92 : {
      label$93 : while (1) {
       if (!((HEAP32[($7_1 + 276 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 264 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$92
       }
       HEAP32[($7_1 + 208 | 0) >> 2] = HEAP32[((HEAP32[(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 252 | 0) >> 2] | 0, 28) | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 276 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
       label$94 : {
        label$95 : {
         if (!((HEAP32[((HEAP32[($7_1 + 208 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($7_1 + 256 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$95
         }
         break label$94;
        }
        $276($7_1 + 184 | 0 | 0, HEAP32[($7_1 + 208 | 0) >> 2] | 0 | 0, +(+HEAPF64[(HEAP32[((HEAP32[($7_1 + 208 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] - 2.0 * +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 256 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($7_1 + 208 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3])) | 0;
       }
       HEAP32[($7_1 + 276 | 0) >> 2] = (HEAP32[($7_1 + 276 | 0) >> 2] | 0) + 1 | 0;
       continue label$93;
      };
     }
     label$96 : {
      label$97 : while (1) {
       if (!((HEAP32[($7_1 + 272 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 260 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$96
       }
       HEAP32[($7_1 + 204 | 0) >> 2] = HEAP32[((HEAP32[(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 256 | 0) >> 2] | 0, 28) | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 272 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
       label$98 : {
        if (!((HEAP32[($7_1 + 252 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$98
        }
        HEAP32[($7_1 + 272 | 0) >> 2] = (HEAP32[($7_1 + 272 | 0) >> 2] | 0) + 1 | 0;
        continue label$97;
       }
       HEAP32[((HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($7_1 + 252 | 0) >> 2] | 0;
       $275($7_1 + 184 | 0 | 0, HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0);
       HEAP32[(HEAP32[($7_1 + 204 | 0) >> 2] | 0) >> 2] = HEAP32[($7_1 + 252 | 0) >> 2] | 0;
       (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $222(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 252 | 0) >> 2] | 0, 28) | 0) + 8 | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
       label$99 : {
        if (!(HEAP32[($7_1 + 36 | 0) >> 2] | 0)) {
         break label$99
        }
        $28(6653 | 0, 6330 | 0, 975 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($7_1 + 316 | 0) >> 2] = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
        break label$3;
       }
       label$100 : {
        if (!(+HEAPF64[(HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] > +HEAPF64[(HEAP32[((HEAP32[(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 252 | 0) >> 2] | 0, 28) | 0) + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] & 1 | 0)) {
         break label$100
        }
        HEAP32[(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 252 | 0) >> 2] | 0, 28) | 0) + 24 | 0) >> 2] = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
        HEAP32[($7_1 + 268 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 252 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
        $269($7_1 + 184 | 0 | 0, HEAP32[($7_1 + 268 | 0) >> 2] | 0 | 0);
       }
       $276($7_1 + 184 | 0 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0, +(+HEAPF64[(HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] - 2.0 * +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 252 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] * +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($7_1 + 204 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3])) | 0;
       HEAP32[($7_1 + 272 | 0) >> 2] = (HEAP32[($7_1 + 272 | 0) >> 2] | 0) + 1 | 0;
       continue label$97;
      };
     }
     label$101 : {
      if (!((HEAP32[($7_1 + 184 | 0) >> 2] | 0 | 0) > (2 | 0) & 1 | 0)) {
       break label$101
      }
      $1286 = $7_1 + 184 | 0;
      $273($1286 | 0, HEAP32[($7_1 + 252 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 256 | 0) >> 2] | 0 | 0);
      HEAP32[($7_1 + 276 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 200 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 256 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      $271($1286 | 0, HEAP32[($7_1 + 276 | 0) >> 2] | 0 | 0);
     }
     $1296 = 0;
     HEAP32[(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 256 | 0) >> 2] | 0, 28) | 0) + 24 | 0) >> 2] = $1296;
     $1312 = (HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 252 | 0) >> 2] | 0, 28) | 0;
     HEAP32[($1312 + 4 | 0) >> 2] = (HEAP32[($1312 + 4 | 0) >> 2] | 0) + (HEAP32[(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 256 | 0) >> 2] | 0, 28) | 0) + 4 | 0) >> 2] | 0) | 0;
     HEAP32[(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 256 | 0) >> 2] | 0, 28) | 0) + 4 | 0) >> 2] = $1296;
     $219(((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 256 | 0) >> 2] | 0, 28) | 0) + 8 | 0 | 0);
     label$102 : {
      if (!((HEAP32[($7_1 + 304 | 0) >> 2] | 0 | 0) != ($1296 | 0) & 1 | 0)) {
       break label$102
      }
      HEAPF64[((HEAP32[(HEAP32[($7_1 + 304 | 0) >> 2] | 0) >> 2] | 0) + ((Math_imul(HEAP32[((HEAP32[($7_1 + 304 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0, 0) + (HEAP32[($7_1 + 284 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 252 | 0) >> 2] | 0, 28) | 0) >> 2] | 0 | 0);
      HEAPF64[((HEAP32[(HEAP32[($7_1 + 304 | 0) >> 2] | 0) >> 2] | 0) + ((((HEAP32[((HEAP32[($7_1 + 304 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) << 0 | 0) + (HEAP32[($7_1 + 284 | 0) >> 2] | 0) | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 256 | 0) >> 2] | 0, 28) | 0) >> 2] | 0 | 0);
      HEAP32[((HEAP32[($7_1 + 192 | 0) >> 2] | 0) + Math_imul(HEAP32[($7_1 + 252 | 0) >> 2] | 0, 28) | 0) >> 2] = (HEAP32[($7_1 + 288 | 0) >> 2] | 0) + (HEAP32[($7_1 + 284 | 0) >> 2] | 0) | 0;
     }
     $1385 = (HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 252 | 0) >> 2] | 0) << 3 | 0) | 0;
     HEAPF64[$1385 >> 3] = +HEAPF64[$1385 >> 3] + +HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 256 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     HEAPF64[((HEAP32[($7_1 + 168 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 256 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(0 | 0);
     HEAP32[($7_1 + 284 | 0) >> 2] = (HEAP32[($7_1 + 284 | 0) >> 2] | 0) + 1 | 0;
     continue label$63;
    };
   }
   label$103 : {
    if (!((HEAP32[($7_1 + 284 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 280 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$103
    }
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $1068($21(HEAP32[($7_1 + 304 | 0) >> 2] | 0 | 0) | 0 | 0, 4 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
    label$104 : {
     if (!((HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$104
     }
     $1412 = 2;
     $28(6728 | 0, 6330 | 0, 1023 | 0, $1412 | 0) | 0;
     HEAP32[($7_1 + 316 | 0) >> 2] = $1412;
     break label$3;
    }
    $33(12 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0);
    HEAP32[($7_1 + 276 | 0) >> 2] = 0;
    label$105 : {
     label$106 : while (1) {
      if (!((HEAP32[($7_1 + 276 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 284 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$105
      }
      HEAP32[((HEAP32[($7_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($7_1 + 276 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[($7_1 + 276 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($7_1 + 276 | 0) >> 2] = (HEAP32[($7_1 + 276 | 0) >> 2] | 0) + 1 | 0;
      continue label$106;
     };
    }
    $24(HEAP32[($7_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 280 | 0) >> 2] | 0) - (HEAP32[($7_1 + 284 | 0) >> 2] | 0) | 0 | 0) | 0;
    $1064(HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0);
    $34(1 | 0);
   }
   label$107 : {
    if (!($534(6770 | 0, +(100.0), 0 | 0) | 0)) {
     break label$107
    }
    $31();
    HEAP32[($7_1 + 316 | 0) >> 2] = 13;
    break label$3;
   }
   label$108 : {
    if (!((HEAP32[($7_1 + 300 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$108
    }
    HEAPF64[((HEAP32[(HEAP32[($7_1 + 300 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($7_1 + 284 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($7_1 + 160 | 0) >> 3];
    $494(HEAP32[($7_1 + 300 | 0) >> 2] | 0 | 0, (HEAP32[($7_1 + 284 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
   }
   $1064(HEAP32[($7_1 + 212 | 0) >> 2] | 0 | 0);
   $1064(HEAP32[($7_1 + 156 | 0) >> 2] | 0 | 0);
   $267($7_1 + 184 | 0 | 0);
   $488($7_1 + 168 | 0 | 0);
   $34(4 | 0);
   label$109 : {
    if (!((HEAP32[($7_1 + 296 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$109
    }
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $234(HEAP32[($7_1 + 304 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 288 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 244 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 296 | 0) >> 2] | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
    label$110 : {
     if (!(HEAP32[($7_1 + 28 | 0) >> 2] | 0)) {
      break label$110
     }
     $28(6653 | 0, 6330 | 0, 1052 | 0, HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7_1 + 316 | 0) >> 2] = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
     break label$3;
    }
   }
   label$111 : {
    if (!((HEAP32[($7_1 + 304 | 0) >> 2] | 0 | 0) == ($7_1 + 104 | 0 | 0) & 1 | 0)) {
     break label$111
    }
    $19($7_1 + 104 | 0 | 0);
    $34(1 | 0);
   }
   HEAP32[($7_1 + 316 | 0) >> 2] = 0;
  }
  $1507 = HEAP32[($7_1 + 316 | 0) >> 2] | 0;
  label$112 : {
   $1511 = $7_1 + 320 | 0;
   if ($1511 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $1511;
  }
  return $1507 | 0;
 }
 
 function $278($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $8_1 = 0, $10_1 = 0, $35_1 = 0, $60_1 = 0, $73_1 = 0, $72_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $72_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $72_1;
  }
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $8_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  HEAPF64[($8_1 + 8 | 0) >> 3] = .15;
  HEAPF64[($8_1 + 16 | 0) >> 3] = 1.0 - +HEAPF64[($8_1 + 8 | 0) >> 3];
  HEAP32[($8_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  $10_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $1016((($10_1 & 1073741823 | 0 | 0) != ($10_1 | 0) & 1 | 0 ? -1 : $10_1 << 2 | 0) | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($5_1 + 16 | 0) >> 2] = 0;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      $35_1 = $1015(80 | 0) | 0;
      $58($35_1 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3])) | 0;
      HEAP32[((HEAP32[$8_1 >> 2] | 0) + ((HEAP32[($5_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $35_1;
      HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 1 | 0;
      continue label$6;
     };
    }
    break label$3;
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$7
     }
     $60_1 = $1015(80 | 0) | 0;
     $58($60_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, +(1.0)) | 0;
     HEAP32[((HEAP32[$8_1 >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $60_1;
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
  }
  label$9 : {
   $73_1 = $5_1 + 32 | 0;
   if ($73_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $73_1;
  }
  return;
 }
 
 function $279($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $13_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $54($6_1 + 28 | 0 | 0) | 0;
  $278($6_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0);
  label$3 : {
   $13_1 = $4_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $6_1 | 0;
 }
 
 function $280($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $146_1 = 0.0, $150_1 = 0.0, $105_1 = 0, $111_1 = 0, $114_1 = 0, $143_1 = 0, $142_1 = 0, $125_1 = 0, $134_1 = 0, $139_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 112 | 0;
  label$1 : {
   $142_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $142_1;
  }
  HEAP32[($6_1 + 104 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 100 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 96 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 92 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 104 | 0) >> 2] | 0;
  HEAP32[($6_1 + 108 | 0) >> 2] = $7_1;
  $54($7_1 + 28 | 0 | 0) | 0;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $254(HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 88 | 0) >> 2] = wasm2js_i32$1;
  $278($7_1 | 0, HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 92 | 0) >> 2] | 0 | 0);
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $253(HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 84 | 0) >> 2] = wasm2js_i32$1;
  HEAPF64[($6_1 + 72 | 0) >> 3] = 1.0;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $249(HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   if (HEAP32[($6_1 + 84 | 0) >> 2] | 0) {
    break label$3
   }
   HEAP32[($6_1 + 60 | 0) >> 2] = (HEAP32[($6_1 + 60 | 0) >> 2] | 0) << 1 | 0;
  }
  HEAP32[($6_1 + 56 | 0) >> 2] = 0;
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    label$6 : {
     label$7 : {
      if (HEAP32[($6_1 + 84 | 0) >> 2] | 0) {
       break label$7
      }
      label$8 : {
       label$9 : {
        if ((HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) % (2 | 0) | 0) {
         break label$9
        }
        label$10 : {
         label$11 : {
          if (!((HEAP32[($6_1 + 96 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$11
          }
          $146_1 = +HEAPF64[((HEAP32[(HEAP32[($6_1 + 96 | 0) >> 2] | 0) >> 2] | 0) + (((HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) / (2 | 0) | 0) << 3 | 0) | 0) >> 3];
          break label$10;
         }
         $146_1 = 1.0;
        }
        HEAPF64[($6_1 + 72 | 0) >> 3] = $146_1;
        $258(HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) / (2 | 0) | 0 | 0, $6_1 + 68 | 0 | 0, $6_1 + 64 | 0 | 0) | 0;
        break label$8;
       }
       $258(HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0, ((HEAP32[($6_1 + 56 | 0) >> 2] | 0) - 1 | 0 | 0) / (2 | 0) | 0 | 0, $6_1 + 64 | 0 | 0, $6_1 + 68 | 0 | 0) | 0;
      }
      break label$6;
     }
     label$12 : {
      label$13 : {
       if (!((HEAP32[($6_1 + 96 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$13
       }
       $150_1 = +HEAPF64[((HEAP32[(HEAP32[($6_1 + 96 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 56 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
       break label$12;
      }
      $150_1 = 1.0;
     }
     HEAPF64[($6_1 + 72 | 0) >> 3] = $150_1;
     $258(HEAP32[($6_1 + 100 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0, $6_1 + 68 | 0 | 0, $6_1 + 64 | 0 | 0) | 0;
    }
    label$14 : {
     if (!(+HEAPF64[($6_1 + 72 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
      break label$14
     }
     label$15 : {
      if (!((HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) != (HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$15
      }
      $105_1 = $6_1 + 16 | 0;
      $111_1 = $6_1 + 72 | 0;
      $114_1 = $6_1 + 40 | 0;
      $125_1 = (HEAP32[((HEAP32[$7_1 >> 2] | 0) + ((HEAP32[($6_1 + 68 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0;
      HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
      $281($114_1 | 0, $6_1 + 36 | 0 | 0, $111_1 | 0);
      $282($125_1 | 0, $114_1 | 0);
      $134_1 = (HEAP32[((HEAP32[$7_1 >> 2] | 0) + ((HEAP32[($6_1 + 64 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0;
      HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
      $281($105_1 | 0, $6_1 + 12 | 0 | 0, $111_1 | 0);
      $282($134_1 | 0, $105_1 | 0);
     }
    }
    HEAP32[($6_1 + 56 | 0) >> 2] = (HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 1 | 0;
    continue label$5;
   };
  }
  $139_1 = HEAP32[($6_1 + 108 | 0) >> 2] | 0;
  label$16 : {
   $143_1 = $6_1 + 112 | 0;
   if ($143_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $143_1;
  }
  return $139_1 | 0;
 }
 
 function $281($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $288($0_1 | 0, $286(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, $287(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $13_1 = $5_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $282($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $29_1 = 0, $28_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $28_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $28_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($194($5_1 | 0) | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$4
    }
    $196($4_1 | 0, $5_1 | 0, 1 | 0) | 0;
    $284($122($5_1 | 0) | 0 | 0, $125(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, $283(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
    $198($4_1 | 0);
    HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 16 | 0;
    break label$3;
   }
   $285($5_1 | 0, $283(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  }
  label$5 : {
   $29_1 = $4_1 + 16 | 0;
   if ($29_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $29_1;
  }
  return;
 }
 
 function $283($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $284($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $332(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, $331(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0);
  label$3 : {
   $13_1 = $5_1 + 32 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $285($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $25_1 = 0, $24_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $24_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $24_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $122($6_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  $334($4_1 | 0, $333($6_1 | 0, ($73($6_1 | 0) | 0) + 1 | 0 | 0) | 0 | 0, $73($6_1 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $284(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, $125(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, $331(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 16 | 0;
  $335($6_1 | 0, $4_1 | 0);
  $336($4_1 | 0) | 0;
  label$3 : {
   $25_1 = $4_1 + 32 | 0;
   if ($25_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  return;
 }
 
 function $286($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $287($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $288($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $15_1 = 0, $14_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = HEAP32[($286(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $6_1, wasm2js_f64$0 = +HEAPF64[($287(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
  label$3 : {
   $15_1 = $5_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return $6_1 | 0;
 }
 
 function $289($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $47_1 = 0, $46_1 = 0, $43_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $46_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $46_1;
  }
  $5_1 = 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $6_1;
  $54($6_1 + 28 | 0 | 0) | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $278($6_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, $5_1 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $67(HEAP32[((HEAP32[$6_1 >> 2] | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  HEAPF64[($6_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 8 | 0) >> 3];
  HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 3];
  HEAPF64[($6_1 + 40 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 40 | 0) >> 3];
  HEAPF64[($6_1 + 48 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 48 | 0) >> 3];
  HEAPF64[($6_1 + 56 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 56 | 0) >> 3];
  HEAPF64[($6_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 64 | 0) >> 3];
  HEAPF64[($6_1 + 72 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 72 | 0) >> 3];
  HEAPF64[($6_1 + 80 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 80 | 0) >> 3];
  $43_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$5 : {
   $47_1 = $4_1 + 32 | 0;
   if ($47_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $47_1;
  }
  return $43_1 | 0;
 }
 
 function $290($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $11_1 = 0, $7_1 = 0, $180_1 = 0, $191_1 = 0, $197_1 = 0, $200_1 = 0, $275_1 = 0, $286_1 = 0, $292_1 = 0, $295_1 = 0, $336_1 = 0, $335_1 = 0, $126_1 = 0, $211_1 = 0, $219_1 = 0, $306_1 = 0, $314_1 = 0, $332_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $6_1 = global$0 - 240 | 0;
  label$1 : {
   $335_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $335_1;
  }
  $7_1 = 0;
  HEAP32[($6_1 + 232 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 228 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 224 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 220 | 0) >> 2] = $3_1;
  $11_1 = HEAP32[($6_1 + 232 | 0) >> 2] | 0;
  HEAP32[($6_1 + 236 | 0) >> 2] = $11_1;
  $54($11_1 + 28 | 0 | 0) | 0;
  $278($11_1 | 0, HEAP32[($6_1 + 224 | 0) >> 2] | 0 | 0, $7_1 | 0);
  $291($6_1 + 208 | 0 | 0) | 0;
  HEAP32[($6_1 + 204 | 0) >> 2] = $7_1;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $292($6_1 + 192 | 0 | 0, $6_1 + 208 | 0 | 0, (HEAP32[($6_1 + 220 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 204 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
    HEAP32[($6_1 + 204 | 0) >> 2] = (HEAP32[($6_1 + 204 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $293($6_1 + 208 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 184 | 0) >> 2] = wasm2js_i32$1;
  $69($6_1 + 168 | 0 | 0, HEAP32[((HEAP32[($6_1 + 228 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6_1 + 164 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($6_1 + 164 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($6_1 + 228 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    (wasm2js_i32$0 = $72($6_1 + 168 | 0 | 0, HEAP32[($6_1 + 164 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = -1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    HEAP32[($6_1 + 164 | 0) >> 2] = (HEAP32[($6_1 + 164 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[($6_1 + 160 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($6_1 + 160 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = HEAP32[($294($6_1 + 184 | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 156 | 0) >> 2] = wasm2js_i32$1;
    HEAPF64[((HEAP32[((HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($6_1 + 160 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[(HEAP32[($6_1 + 228 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 156 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 3];
    HEAPF64[((HEAP32[((HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($6_1 + 160 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 40 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[(HEAP32[($6_1 + 228 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 156 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 40 | 0) >> 3];
    (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $73((HEAP32[((HEAP32[(HEAP32[($6_1 + 228 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 156 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 152 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $73((HEAP32[((HEAP32[(HEAP32[($6_1 + 228 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 156 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 148 | 0) >> 2] = wasm2js_i32$1;
    $126_1 = HEAP32[($6_1 + 160 | 0) >> 2] | 0;
    (wasm2js_i32$0 = $72($6_1 + 168 | 0 | 0, HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $126_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    HEAP32[($6_1 + 144 | 0) >> 2] = 0;
    label$9 : {
     label$10 : while (1) {
      if (!((HEAP32[($6_1 + 144 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 152 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = HEAP32[($77((HEAP32[((HEAP32[(HEAP32[($6_1 + 228 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 156 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($6_1 + 144 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 140 | 0) >> 2] = wasm2js_i32$1;
      (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = HEAP32[($72($6_1 + 168 | 0 | 0, HEAP32[($6_1 + 140 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 136 | 0) >> 2] = wasm2js_i32$1;
      (wasm2js_i32$0 = $6_1, wasm2js_f64$0 = +HEAPF64[(($77((HEAP32[((HEAP32[(HEAP32[($6_1 + 228 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 156 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($6_1 + 144 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 128 | 0) >> 3] = wasm2js_f64$0;
      label$11 : {
       if (!((HEAP32[($6_1 + 140 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$11
       }
       $180_1 = $6_1 + 208 | 0;
       (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $295($180_1 | 0, $6_1 + 140 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 120 | 0) >> 2] = wasm2js_i32$1;
       (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $296($180_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 112 | 0) >> 2] = wasm2js_i32$1;
       label$12 : {
        if (!(($297($6_1 + 120 | 0 | 0, $6_1 + 112 | 0 | 0) | 0) & 1 | 0)) {
         break label$12
        }
        $191_1 = $6_1 + 80 | 0;
        $197_1 = $6_1 + 128 | 0;
        $200_1 = $6_1 + 96 | 0;
        $211_1 = (HEAP32[((HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($6_1 + 160 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0;
        $298($200_1 | 0, $6_1 + 136 | 0 | 0, $197_1 | 0);
        $282($211_1 | 0, $200_1 | 0);
        $219_1 = (HEAP32[((HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($6_1 + 136 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0;
        $298($191_1 | 0, $6_1 + 160 | 0 | 0, $197_1 | 0);
        $282($219_1 | 0, $191_1 | 0);
       }
      }
      HEAP32[($6_1 + 144 | 0) >> 2] = (HEAP32[($6_1 + 144 | 0) >> 2] | 0) + 1 | 0;
      continue label$10;
     };
    }
    HEAP32[($6_1 + 76 | 0) >> 2] = 0;
    label$13 : {
     label$14 : while (1) {
      if (!((HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 148 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$13
      }
      (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = HEAP32[($77((HEAP32[((HEAP32[(HEAP32[($6_1 + 228 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 156 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 72 | 0) >> 2] = wasm2js_i32$1;
      (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = HEAP32[($72($6_1 + 168 | 0 | 0, HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 68 | 0) >> 2] = wasm2js_i32$1;
      (wasm2js_i32$0 = $6_1, wasm2js_f64$0 = +HEAPF64[(($77((HEAP32[((HEAP32[(HEAP32[($6_1 + 228 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 156 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 56 | 0) >> 3] = wasm2js_f64$0;
      label$15 : {
       if (!((HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$15
       }
       $275_1 = $6_1 + 208 | 0;
       (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $295($275_1 | 0, $6_1 + 72 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 48 | 0) >> 2] = wasm2js_i32$1;
       (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $296($275_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 40 | 0) >> 2] = wasm2js_i32$1;
       label$16 : {
        if (!(($297($6_1 + 48 | 0 | 0, $6_1 + 40 | 0 | 0) | 0) & 1 | 0)) {
         break label$16
        }
        $286_1 = $6_1 + 8 | 0;
        $292_1 = $6_1 + 56 | 0;
        $295_1 = $6_1 + 24 | 0;
        $306_1 = (HEAP32[((HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($6_1 + 160 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0;
        $298($295_1 | 0, $6_1 + 68 | 0 | 0, $292_1 | 0);
        $282($306_1 | 0, $295_1 | 0);
        $314_1 = (HEAP32[((HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($6_1 + 68 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0;
        $298($286_1 | 0, $6_1 + 160 | 0 | 0, $292_1 | 0);
        $282($314_1 | 0, $286_1 | 0);
       }
      }
      HEAP32[($6_1 + 76 | 0) >> 2] = (HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 1 | 0;
      continue label$14;
     };
    }
    (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $299($6_1 + 184 | 0 | 0, 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    HEAP32[($6_1 + 160 | 0) >> 2] = (HEAP32[($6_1 + 160 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  $71($6_1 + 168 | 0 | 0) | 0;
  $300($6_1 + 208 | 0 | 0) | 0;
  $332_1 = HEAP32[($6_1 + 236 | 0) >> 2] | 0;
  label$17 : {
   $336_1 = $6_1 + 240 | 0;
   if ($336_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $336_1;
  }
  return $332_1 | 0;
 }
 
 function $291($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $11_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $301($7_1 | 0, $3_1 + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $292($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $302($5_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  $303($0_1 | 0, $5_1 | 0) | 0;
  label$3 : {
   $12_1 = $5_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return;
 }
 
 function $293($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0, $13_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $304(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $305($3_1 + 8 | 0 | 0, HEAP32[$3_1 >> 2] | 0 | 0) | 0;
  $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $10_1 | 0;
 }
 
 function $294($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = ($306(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 16 | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $295($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $16_1 = 0, $15_1 = 0, $12_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $15_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  HEAP32[($4_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $308(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  $305($4_1 + 24 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $12_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  label$3 : {
   $16_1 = $4_1 + 32 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  return $12_1 | 0;
 }
 
 function $296($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0, $13_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $309(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $305($3_1 + 8 | 0 | 0, HEAP32[$3_1 >> 2] | 0 | 0) | 0;
  $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $10_1 | 0;
 }
 
 function $297($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0, $14_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = (($307(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0;
  label$3 : {
   $15_1 = $4_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return $11_1 | 0;
 }
 
 function $298($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $311($0_1 | 0, $310(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, $287(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $13_1 = $5_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $299($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0, $14_1 = 0, $13_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $8_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[$8_1 >> 2] | 0;
  $312($8_1 | 0) | 0;
  $10_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$3 : {
   $14_1 = $4_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $10_1 | 0;
 }
 
 function $300($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $313($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $301($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0, $20_1 = 0, $19_1 = 0, $15_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $19_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $355($9_1 + 4 | 0 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  $356($9_1 + 8 | 0 | 0, $4_1 + 4 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $15_1 = $357($9_1 | 0) | 0;
  (wasm2js_i32$0 = $358($9_1 | 0) | 0, wasm2js_i32$1 = $15_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$3 : {
   $20_1 = $4_1 + 16 | 0;
   if ($20_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  return $9_1 | 0;
 }
 
 function $302($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $385($0_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, $384(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  label$3 : {
   $13_1 = $5_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $303($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $21_1 = 0, $20_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[($386(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $305($6_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = (HEAPU8[($387((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0) | 0) >> 0] | 0) & 1 | 0), HEAP8[(wasm2js_i32$0 + 4 | 0) >> 0] = wasm2js_i32$1;
  label$3 : {
   $21_1 = $4_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $21_1;
  }
  return $6_1 | 0;
 }
 
 function $304($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0, $13_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $436($3_1 + 8 | 0 | 0, HEAP32[($358(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
  $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $10_1 | 0;
 }
 
 function $305($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $306($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $307($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0 | 0;
 }
 
 function $308($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $19_1 = 0, $44_1 = 0, $43_1 = 0, $40_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $43_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $43_1;
  }
  HEAP32[($4_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  $10_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $437($10_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, $370($10_1 | 0) | 0 | 0, $357($10_1 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $309($10_1 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $19_1 = 0;
  label$3 : {
   if (!(($438($4_1 + 8 | 0 | 0, $4_1 | 0) | 0) & 1 | 0)) {
    break label$3
   }
   $19_1 = ($398($397($10_1 | 0) | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, $439($4_1 + 8 | 0 | 0) | 0 | 0) | 0) ^ -1 | 0;
  }
  label$4 : {
   label$5 : {
    if (!($19_1 & 1 | 0)) {
     break label$5
    }
    HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    break label$4;
   }
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $309($10_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  }
  $40_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  label$6 : {
   $44_1 = $4_1 + 32 | 0;
   if ($44_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $44_1;
  }
  return $40_1 | 0;
 }
 
 function $309($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $13_1 = 0, $12_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $436($3_1 + 8 | 0 | 0, $357(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$3 : {
   $13_1 = $3_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $9_1 | 0;
 }
 
 function $310($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $311($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $15_1 = 0, $14_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = HEAP32[($310(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $6_1, wasm2js_f64$0 = +HEAPF64[($287(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
  label$3 : {
   $15_1 = $5_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return $6_1 | 0;
 }
 
 function $312($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $442(HEAP32[$4_1 >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $4_1 | 0;
 }
 
 function $313($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $371($4_1 | 0, $370($4_1 | 0) | 0 | 0);
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $4_1 | 0;
 }
 
 function $314($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $19_1 = 0, $29_1 = 0, $41_1 = 0, $40_1 = 0, $37_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $40_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $40_1;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $19_1 = HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    label$5 : {
     if (($19_1 | 0) == (0 | 0) & 1 | 0) {
      break label$5
     }
     $315($19_1 | 0) | 0;
     $1017($19_1 | 0);
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  $29_1 = HEAP32[$5_1 >> 2] | 0;
  label$6 : {
   if (($29_1 | 0) == (0 | 0) & 1 | 0) {
    break label$6
   }
   $1018($29_1 | 0);
  }
  $71($5_1 + 28 | 0 | 0) | 0;
  $37_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$7 : {
   $41_1 = $3_1 + 16 | 0;
   if ($41_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $41_1;
  }
  return $37_1 | 0;
 }
 
 function $315($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $12_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $76($4_1 + 24 | 0 | 0) | 0;
  $76($4_1 + 12 | 0 | 0) | 0;
  $71($4_1 | 0) | 0;
  label$3 : {
   $12_1 = $3_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $4_1 | 0;
 }
 
 function $316($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $15_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if (($5_1 | 0) == (0 | 0) & 1 | 0) {
    break label$3
   }
   FUNCTION_TABLE[20]($5_1) | 0;
   $1017($5_1 | 0);
  }
  label$4 : {
   $15_1 = $3_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return;
 }
 
 function $317($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $19_1 = 0, $18_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
  HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
  $318($5_1 | 0);
  label$3 : {
   $19_1 = $4_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  return;
 }
 
 function $318($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $3_1 = 0, $95_1 = 0.0, $4_1 = 0, $108_1 = 0.0, $122_1 = 0.0, $133_1 = 0.0, $94_1 = 0, $93_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $93_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $93_1;
  }
  $4_1 = 0;
  $95_1 = +($4_1 | 0);
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAPF64[($5_1 + 56 | 0) >> 3] = $95_1;
  HEAPF64[($5_1 + 48 | 0) >> 3] = $95_1;
  HEAPF64[($5_1 + 64 | 0) >> 3] = $95_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    label$5 : {
     label$6 : {
      if (!(+HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
       break label$6
      }
      $108_1 = (+HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3]) * +$1013(+(+HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3]));
      break label$5;
     }
     $108_1 = +(0 | 0);
    }
    HEAPF64[($5_1 + 64 | 0) >> 3] = +HEAPF64[($5_1 + 64 | 0) >> 3] + $108_1;
    HEAPF64[($5_1 + 48 | 0) >> 3] = +HEAPF64[($5_1 + 48 | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3];
    label$7 : {
     label$8 : {
      if (!(+HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
       break label$8
      }
      $122_1 = +HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] * +$1013(+(+HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3]));
      break label$7;
     }
     $122_1 = +(0 | 0);
    }
    HEAPF64[($5_1 + 56 | 0) >> 3] = +HEAPF64[($5_1 + 56 | 0) >> 3] + $122_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  label$9 : {
   label$10 : {
    if (!(+HEAPF64[($5_1 + 48 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
     break label$10
    }
    $133_1 = +HEAPF64[($5_1 + 48 | 0) >> 3] * +$1013(+(+HEAPF64[($5_1 + 48 | 0) >> 3]));
    break label$9;
   }
   $133_1 = +(0 | 0);
  }
  HEAPF64[($5_1 + 40 | 0) >> 3] = $133_1;
  HEAPF64[($5_1 + 80 | 0) >> 3] = +HEAPF64[($5_1 + 40 | 0) >> 3] - 2.0 * +HEAPF64[($5_1 + 56 | 0) >> 3] + +HEAPF64[($5_1 + 64 | 0) >> 3] - +HEAPF64[($5_1 + 72 | 0) >> 3];
  label$11 : {
   $94_1 = $3_1 + 16 | 0;
   if ($94_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $94_1;
  }
  return;
 }
 
 function $319($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0, $35_1 = 0, $107_1 = 0, $124_1 = 0, $367_1 = 0, $495_1 = 0.0, $440_1 = 0, $439_1 = 0, $451_1 = 0.0, $457_1 = 0.0, $469_1 = 0.0, $470_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $3_1 = global$0 - 80 | 0;
  label$1 : {
   $439_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $439_1;
  }
  $4_1 = 0;
  HEAP32[($3_1 + 76 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = $4_1;
  HEAPF64[($3_1 + 64 | 0) >> 3] = +($4_1 | 0);
  HEAP32[($3_1 + 60 | 0) >> 2] = $4_1;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAPF64[($3_1 + 64 | 0) >> 3] = +HEAPF64[($3_1 + 64 | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 60 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 3];
    HEAP32[($3_1 + 60 | 0) >> 2] = (HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  HEAP32[($3_1 + 56 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    $35_1 = HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    HEAPF64[($35_1 + 48 | 0) >> 3] = +HEAPF64[($35_1 + 48 | 0) >> 3] / +HEAPF64[($3_1 + 64 | 0) >> 3];
    label$7 : {
     label$8 : {
      if (!(($320((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0) | 0) & 1 | 0)) {
       break label$8
      }
      if (!(+HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 40 | 0) >> 3] <= +(0 | 0) & 1 | 0)) {
       break label$8
      }
      $59($5_1 + 28 | 0 | 0, $3_1 + 56 | 0 | 0);
      HEAP32[($5_1 + 24 | 0) >> 2] = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 1 | 0;
      break label$7;
     }
     (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $73((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 52 | 0) >> 2] = wasm2js_i32$1;
     HEAPF64[($3_1 + 40 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 40 | 0) >> 3];
     HEAP32[($3_1 + 36 | 0) >> 2] = 0;
     label$9 : {
      label$10 : while (1) {
       if (!((HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$9
       }
       $451_1 = +HEAPF64[(($77((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 3];
       HEAPF64[($3_1 + 40 | 0) >> 3] = +HEAPF64[($3_1 + 40 | 0) >> 3] + $451_1;
       HEAP32[($3_1 + 36 | 0) >> 2] = (HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 1 | 0;
       continue label$10;
      };
     }
     $107_1 = HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAPF64[($107_1 + 40 | 0) >> 3] = +HEAPF64[($107_1 + 40 | 0) >> 3] / +HEAPF64[($3_1 + 40 | 0) >> 3];
     HEAP32[($3_1 + 32 | 0) >> 2] = 0;
     label$11 : {
      label$12 : while (1) {
       if (!((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$11
       }
       $457_1 = +HEAPF64[($3_1 + 40 | 0) >> 3];
       $124_1 = $77((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) | 0;
       HEAPF64[($124_1 + 8 | 0) >> 3] = +HEAPF64[($124_1 + 8 | 0) >> 3] / $457_1;
       HEAP32[($3_1 + 32 | 0) >> 2] = (HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 1 | 0;
       continue label$12;
      };
     }
    }
    HEAP32[($3_1 + 56 | 0) >> 2] = (HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  $321($5_1 | 0);
  HEAP32[($3_1 + 28 | 0) >> 2] = 0;
  label$13 : {
   label$14 : while (1) {
    if (!((HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$13
    }
    HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 40 | 0) >> 3] = +HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 40 | 0) >> 3];
    label$15 : {
     if (($320((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0) | 0) & 1 | 0) {
      break label$15
     }
     (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $73((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
     HEAP32[($3_1 + 20 | 0) >> 2] = 0;
     label$16 : {
      label$17 : while (1) {
       if (!((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$16
       }
       $469_1 = +HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3] * +HEAPF64[(($77((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 3];
       (wasm2js_i32$0 = $77((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) | 0, wasm2js_f64$0 = $469_1), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
       HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 1 | 0;
       continue label$17;
      };
     }
     HEAP32[($3_1 + 16 | 0) >> 2] = 0;
     label$18 : {
      label$19 : while (1) {
       if (!((HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$18
       }
       (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $73((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($77((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
       HEAP32[($3_1 + 8 | 0) >> 2] = 0;
       label$20 : {
        label$21 : while (1) {
         if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$20
         }
         label$22 : {
          if (!((HEAP32[($77((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($77((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$22
          }
          $470_1 = +HEAPF64[(($77((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 3];
          (wasm2js_i32$0 = $77((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($77((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0, wasm2js_f64$0 = $470_1), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
          HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
         }
         HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
         continue label$21;
        };
       }
       HEAP32[($3_1 + 16 | 0) >> 2] = (HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 1 | 0;
       continue label$19;
      };
     }
    }
    HEAP32[($3_1 + 28 | 0) >> 2] = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$14;
   };
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = 0;
  label$23 : {
   label$24 : while (1) {
    if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$23
    }
    label$25 : {
     label$26 : {
      if (!(($320((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0) | 0) & 1 | 0)) {
       break label$26
      }
      if (!(+HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 40 | 0) >> 3] <= +(0 | 0) & 1 | 0)) {
       break label$26
      }
      HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 56 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3];
      break label$25;
     }
     HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 56 | 0) >> 3] = +(0 | 0);
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$24;
   };
  }
  $367_1 = 0;
  HEAPF64[($5_1 + 72 | 0) >> 3] = +($367_1 | 0);
  HEAP32[$3_1 >> 2] = $367_1;
  label$27 : {
   label$28 : while (1) {
    if (!((HEAP32[$3_1 >> 2] | 0 | 0) < (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$27
    }
    HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[$3_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[$3_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3] - (+HEAPF64[($5_1 + 8 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[$3_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3] + +HEAPF64[($5_1 + 16 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[$3_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 56 | 0) >> 3]) * +HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[$3_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[$3_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 40 | 0) >> 3];
    label$29 : {
     label$30 : {
      if (!(+HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[$3_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
       break label$30
      }
      $495_1 = +HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[$3_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3] * +$1013(+(+HEAPF64[((HEAP32[((HEAP32[$5_1 >> 2] | 0) + ((HEAP32[$3_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3]));
      break label$29;
     }
     $495_1 = +(0 | 0);
    }
    HEAPF64[($5_1 + 72 | 0) >> 3] = +HEAPF64[($5_1 + 72 | 0) >> 3] + $495_1;
    HEAP32[$3_1 >> 2] = (HEAP32[$3_1 >> 2] | 0) + 1 | 0;
    continue label$28;
   };
  }
  $318($5_1 | 0);
  label$31 : {
   $440_1 = $3_1 + 80 | 0;
   if ($440_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $440_1;
  }
  return;
 }
 
 function $320($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return (HEAP32[$4_1 >> 2] | 0 | 0) == (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0 | 0;
 }
 
 function $321($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $245_1 = 0.0, $14_1 = 0, $82_1 = 0, $129_1 = 0, $136_1 = 0, $153_1 = 0, $163_1 = 0, $169_1 = 0, $203_1 = 0, $208_1 = 0, $218_1 = 0, $244_1 = 0, $243_1 = 0, $12_1 = 0, $249_1 = 0.0, $263_1 = 0.0, $270_1 = 0.0, $285_1 = 0.0, $288_1 = 0.0, $300_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $3_1 = global$0 - 96 | 0;
  label$1 : {
   $243_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $243_1;
  }
  $245_1 = 1.0;
  HEAP32[($3_1 + 92 | 0) >> 2] = $0_1;
  $11_1 = HEAP32[($3_1 + 92 | 0) >> 2] | 0;
  $12_1 = HEAP32[($11_1 + 4 | 0) >> 2] | 0;
  HEAPF64[($3_1 + 72 | 0) >> 3] = $245_1 / +(HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0);
  $322($3_1 + 80 | 0 | 0, $12_1 | 0, $3_1 + 72 | 0 | 0) | 0;
  HEAP32[($3_1 + 68 | 0) >> 2] = 0;
  HEAPF64[($3_1 + 48 | 0) >> 3] = $245_1;
  label$3 : while (1) {
   $14_1 = 0;
   HEAPF64[($3_1 + 56 | 0) >> 3] = +($14_1 | 0);
   HEAP32[($3_1 + 28 | 0) >> 2] = $14_1;
   label$4 : {
    label$5 : while (1) {
     if (!((HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     $249_1 = +HEAPF64[($323($3_1 + 80 | 0 | 0, HEAP32[($72($11_1 + 28 | 0 | 0, HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) >> 3];
     HEAPF64[($3_1 + 56 | 0) >> 3] = +HEAPF64[($3_1 + 56 | 0) >> 3] + $249_1;
     HEAP32[($3_1 + 28 | 0) >> 2] = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 1 | 0;
     continue label$5;
    };
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = 0;
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAPF64[((HEAP32[((HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($3_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3] = (+HEAPF64[($11_1 + 8 | 0) >> 3] + +HEAPF64[($11_1 + 16 | 0) >> 3] * +HEAPF64[($3_1 + 56 | 0) >> 3]) * +HEAPF64[((HEAP32[((HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($3_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 3];
     HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 1 | 0;
     continue label$7;
    };
   }
   HEAP32[($3_1 + 20 | 0) >> 2] = 0;
   label$8 : {
    label$9 : while (1) {
     if (!((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$8
     }
     $263_1 = +HEAPF64[($11_1 + 16 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($3_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 40 | 0) >> 3] * +HEAPF64[($323($3_1 + 80 | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 3];
     $82_1 = HEAP32[((HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($3_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAPF64[($82_1 + 72 | 0) >> 3] = +HEAPF64[($82_1 + 72 | 0) >> 3] + $263_1;
     (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $73((HEAP32[((HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($3_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
     HEAP32[($3_1 + 12 | 0) >> 2] = 0;
     label$10 : {
      label$11 : while (1) {
       if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$10
       }
       $270_1 = +HEAPF64[($11_1 + 16 | 0) >> 3] * +HEAPF64[(($77((HEAP32[((HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($3_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 3] * +HEAPF64[($323($3_1 + 80 | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) | 0) >> 3];
       $129_1 = HEAP32[((HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($77((HEAP32[((HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($3_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
       HEAPF64[($129_1 + 72 | 0) >> 3] = +HEAPF64[($129_1 + 72 | 0) >> 3] + $270_1;
       HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0;
       continue label$11;
      };
     }
     HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     continue label$9;
    };
   }
   $136_1 = 0;
   HEAPF64[($3_1 + 32 | 0) >> 3] = +($136_1 | 0);
   HEAP32[($3_1 + 8 | 0) >> 2] = $136_1;
   label$12 : {
    label$13 : while (1) {
     if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$12
     }
     HEAPF64[($3_1 + 32 | 0) >> 3] = +HEAPF64[($3_1 + 32 | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3];
     HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
     continue label$13;
    };
   }
   $153_1 = 0;
   HEAPF64[($3_1 + 40 | 0) >> 3] = +HEAPF64[($3_1 + 48 | 0) >> 3];
   HEAPF64[($3_1 + 48 | 0) >> 3] = +($153_1 | 0);
   HEAP32[($3_1 + 4 | 0) >> 2] = $153_1;
   label$14 : {
    label$15 : while (1) {
     if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$14
     }
     $163_1 = $3_1 + 80 | 0;
     $169_1 = HEAP32[((HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAPF64[($169_1 + 72 | 0) >> 3] = +HEAPF64[($169_1 + 72 | 0) >> 3] / +HEAPF64[($3_1 + 32 | 0) >> 3];
     $285_1 = Math_abs(+HEAPF64[((HEAP32[((HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3] - +HEAPF64[($323($163_1 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 3]);
     HEAPF64[($3_1 + 48 | 0) >> 3] = +HEAPF64[($3_1 + 48 | 0) >> 3] + $285_1;
     $288_1 = +HEAPF64[((HEAP32[((HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3];
     (wasm2js_i32$0 = $323($163_1 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0, wasm2js_f64$0 = $288_1), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
     HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$15;
    };
   }
   HEAP32[($3_1 + 68 | 0) >> 2] = (HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 1 | 0;
   label$16 : {
    if (!(+HEAPF64[($3_1 + 48 | 0) >> 3] == +HEAPF64[($3_1 + 40 | 0) >> 3] & 1 | 0)) {
     break label$16
    }
    HEAPF64[($11_1 + 8 | 0) >> 3] = +HEAPF64[($11_1 + 8 | 0) >> 3] + 1.0e-10;
    HEAPF64[($11_1 + 16 | 0) >> 3] = 1.0 - +HEAPF64[($11_1 + 8 | 0) >> 3];
   }
   $203_1 = 0;
   label$17 : {
    if (!((HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0) < (200 | 0) & 1 | 0)) {
     break label$17
    }
    $208_1 = 1;
    label$18 : {
     if (+HEAPF64[($3_1 + 48 | 0) >> 3] > 1.0e-15 & 1 | 0) {
      break label$18
     }
     $208_1 = (HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0) < (50 | 0);
    }
    $203_1 = $208_1;
   }
   if ($203_1 & 1 | 0) {
    continue label$3
   }
   break label$3;
  };
  $218_1 = 0;
  HEAPF64[($3_1 + 56 | 0) >> 3] = +($218_1 | 0);
  HEAP32[$3_1 >> 2] = $218_1;
  label$19 : {
   label$20 : while (1) {
    if (!((HEAP32[$3_1 >> 2] | 0 | 0) < (HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$19
    }
    $300_1 = +HEAPF64[($323($3_1 + 80 | 0 | 0, HEAP32[($72($11_1 + 28 | 0 | 0, HEAP32[$3_1 >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) >> 3];
    HEAPF64[($3_1 + 56 | 0) >> 3] = +HEAPF64[($3_1 + 56 | 0) >> 3] + $300_1;
    HEAP32[$3_1 >> 2] = (HEAP32[$3_1 >> 2] | 0) + 1 | 0;
    continue label$20;
   };
  }
  $324($3_1 + 80 | 0 | 0) | 0;
  label$21 : {
   $244_1 = $3_1 + 96 | 0;
   if ($244_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $244_1;
  }
  return;
 }
 
 function $322($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $21_1 = 0, $20_1 = 0, $17_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$5_1 >> 2] = $2_1;
  $7_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $7_1;
  $325($7_1 | 0) | 0;
  label$3 : {
   if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$3
   }
   $326($7_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
   $327($7_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
  }
  $17_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  label$4 : {
   $21_1 = $5_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $21_1;
  }
  return $17_1 | 0;
 }
 
 function $323($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0 | 0;
 }
 
 function $324($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $328($4_1 | 0);
  $329($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $325($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0, $7_1 = 0, $14_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $7_1 = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $88($8_1 | 0) | 0;
  HEAP32[$8_1 >> 2] = $7_1;
  HEAP32[($8_1 + 4 | 0) >> 2] = $7_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $7_1;
  $444($8_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $8_1 | 0;
 }
 
 function $326($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $16_1 = 0, $26_1 = 0, $25_1 = 0, $21_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $25_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($445($5_1 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$3
   }
   $1024($5_1 | 0);
   abort();
  }
  $16_1 = $447($446($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $16_1;
  HEAP32[$5_1 >> 2] = $16_1;
  $21_1 = (HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0;
  (wasm2js_i32$0 = $448($5_1 | 0) | 0, wasm2js_i32$1 = $21_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $449($5_1 | 0, 0 | 0);
  label$4 : {
   $26_1 = $4_1 + 16 | 0;
   if ($26_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $26_1;
  }
  return;
 }
 
 function $327($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $10_1 = 0, $32_1 = 0, $31_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $31_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $31_1;
  }
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $446($6_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  label$3 : while (1) {
   $10_1 = $5_1 + 8 | 0;
   $450($10_1 | 0, $6_1 | 0, 1 | 0) | 0;
   $452(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $451(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
   HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[($6_1 + 4 | 0) >> 2] | 0) + 8 | 0;
   HEAP32[($5_1 + 24 | 0) >> 2] = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + -1 | 0;
   $453($10_1 | 0);
   if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    continue label$3
   }
   break label$3;
  };
  label$4 : {
   $32_1 = $5_1 + 32 | 0;
   if ($32_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $32_1;
  }
  return;
 }
 
 function $328($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $24_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $23_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $464($4_1 | 0, $462($4_1 | 0) | 0 | 0, ($462($4_1 | 0) | 0) + (($463($4_1 | 0) | 0) << 3 | 0) | 0 | 0, ($462($4_1 | 0) | 0) + (($478($4_1 | 0) | 0) << 3 | 0) | 0 | 0, ($462($4_1 | 0) | 0) + (($463($4_1 | 0) | 0) << 3 | 0) | 0 | 0);
  label$3 : {
   $24_1 = $3_1 + 16 | 0;
   if ($24_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $24_1;
  }
  return;
 }
 
 function $329($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $19_1 = 0, $18_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $5_1;
  label$3 : {
   if (!((HEAP32[$5_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $479($5_1 | 0);
   $480($446($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $471($5_1 | 0) | 0 | 0);
  }
  $15_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$4 : {
   $19_1 = $3_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  return $15_1 | 0;
 }
 
 function $330($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $20_1 = 0, $40_1 = 0, $30_1 = 0, $58_1 = 0, $91_1 = 0, $90_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $90_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $90_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $20_1 = HEAP32[((HEAP32[$6_1 >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    label$5 : {
     if (($20_1 | 0) == (0 | 0) & 1 | 0) {
      break label$5
     }
     $315($20_1 | 0) | 0;
     $1017($20_1 | 0);
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  $30_1 = HEAP32[$6_1 >> 2] | 0;
  label$6 : {
   if (($30_1 | 0) == (0 | 0) & 1 | 0) {
    break label$6
   }
   $1018($30_1 | 0);
  }
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $40_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $1016((($40_1 & 1073741823 | 0 | 0) != ($40_1 | 0) & 1 | 0 ? -1 : $40_1 << 2 | 0) | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[$4_1 >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) < (HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    $58_1 = $1015(80 | 0) | 0;
    $53($58_1 | 0) | 0;
    HEAP32[((HEAP32[$6_1 >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0) >> 2] = $58_1;
    $67(HEAP32[((HEAP32[$6_1 >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  HEAPF64[($6_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 3];
  HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 3];
  HEAPF64[($6_1 + 40 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 40 | 0) >> 3];
  HEAPF64[($6_1 + 48 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 48 | 0) >> 3];
  HEAPF64[($6_1 + 56 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 56 | 0) >> 3];
  HEAPF64[($6_1 + 64 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 64 | 0) >> 3];
  HEAPF64[($6_1 + 72 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 72 | 0) >> 3];
  HEAPF64[($6_1 + 80 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 80 | 0) >> 3];
  label$9 : {
   $91_1 = $4_1 + 16 | 0;
   if ($91_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $91_1;
  }
  return;
 }
 
 function $331($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $332($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  $337(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $331(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0);
  label$3 : {
   $13_1 = $5_1 + 32 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $333($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $40_1 = 0, $39_1 = 0, $36_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $39_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $39_1;
  }
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $192($5_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$3
   }
   $1024($5_1 | 0);
   abort();
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $119($5_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  label$4 : {
   label$5 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break label$4;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0;
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[($146($4_1 + 8 | 0 | 0, $4_1 + 20 | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  }
  $36_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$6 : {
   $40_1 = $4_1 + 32 | 0;
   if ($40_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $40_1;
  }
  return $36_1 | 0;
 }
 
 function $334($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $11_1 = 0, $19_1 = 0, $26_1 = 0, $37_1 = 0, $36_1 = 0, $31_1 = 0, $33_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 32 | 0;
  label$1 : {
   $36_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $36_1;
  }
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $11_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $11_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  $338($11_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (!(HEAP32[($6_1 + 20 | 0) >> 2] | 0)) {
     break label$4
    }
    $19_1 = $193($339($11_1 | 0) | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    break label$3;
   }
   $19_1 = 0;
  }
  HEAP32[$11_1 >> 2] = $19_1;
  $26_1 = (HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 4 | 0) | 0;
  HEAP32[($11_1 + 8 | 0) >> 2] = $26_1;
  HEAP32[($11_1 + 4 | 0) >> 2] = $26_1;
  $31_1 = (HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) << 4 | 0) | 0;
  (wasm2js_i32$0 = $340($11_1 | 0) | 0, wasm2js_i32$1 = $31_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $33_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  label$5 : {
   $37_1 = $6_1 + 32 | 0;
   if ($37_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $37_1;
  }
  return $33_1 | 0;
 }
 
 function $335($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $30_1 = 0, $29_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $29_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $29_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $86($5_1 | 0);
  $341($122($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $342($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $342($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0 | 0);
  $342($194($5_1 | 0) | 0 | 0, $340(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $195($5_1 | 0, $73($5_1 | 0) | 0 | 0);
  $216($5_1 | 0);
  label$3 : {
   $30_1 = $4_1 + 16 | 0;
   if ($30_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $30_1;
  }
  return;
 }
 
 function $336($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $19_1 = 0, $18_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $5_1;
  $343($5_1 | 0);
  label$3 : {
   if (!((HEAP32[$5_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $124($339($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $344($5_1 | 0) | 0 | 0);
  }
  $15_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$4 : {
   $19_1 = $3_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  return $15_1 | 0;
 }
 
 function $337($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $9_1 = 0, $15_1 = 0, $14_1 = 0, $42_1 = 0, $52_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$2 = $331(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $42_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[i64toi32_i32$0 >> 2] = $42_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $9_1 = 8;
  i64toi32_i32$2 = i64toi32_i32$2 + $9_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $52_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + $9_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$3 : {
   $15_1 = $5_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return;
 }
 
 function $338($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $16_1 = 0, $15_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $15_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $95($6_1 | 0, $90(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $346($6_1 + 4 | 0 | 0, $345(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $16_1 = $5_1 + 16 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  return $6_1 | 0;
 }
 
 function $339($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $347((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $340($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $348((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $341($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $14_1 = 0, $35_1 = 0, $34_1 = 0;
  $6_1 = global$0 - 32 | 0;
  label$1 : {
   $34_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $34_1;
  }
  $7_1 = 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) - (HEAP32[($6_1 + 24 | 0) >> 2] | 0) | 0) >> 4 | 0;
  $14_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
  HEAP32[$14_1 >> 2] = (HEAP32[$14_1 >> 2] | 0) + (($7_1 - (HEAP32[($6_1 + 12 | 0) >> 2] | 0) | 0) << 4 | 0) | 0;
  label$3 : {
   if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) > ($7_1 | 0) & 1 | 0)) {
    break label$3
   }
   $1070(HEAP32[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 4 | 0 | 0) | 0;
  }
  label$4 : {
   $35_1 = $6_1 + 32 | 0;
   if ($35_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $35_1;
  }
  return;
 }
 
 function $342($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $21_1 = 0, $20_1 = 0, $13_1 = 0, $16_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[($350(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  $13_1 = HEAP32[($350(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = $13_1;
  $16_1 = HEAP32[($350($4_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = $16_1;
  label$3 : {
   $21_1 = $4_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $21_1;
  }
  return;
 }
 
 function $343($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $351($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return;
 }
 
 function $344($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $14_1 = 0, $13_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($352($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 4 | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $10_1 | 0;
 }
 
 function $345($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $346($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $11_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $345(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $5_1 | 0;
 }
 
 function $347($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $349((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $348($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $207(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $349($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $350($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $351($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $353(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $352($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $354((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $353($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $16_1 = 0, $21_1 = 0, $20_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $13_1 = $339($5_1 | 0) | 0;
    $16_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + -16 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $16_1;
    $132($13_1 | 0, $125($16_1 | 0) | 0 | 0);
    continue label$4;
   };
  }
  label$5 : {
   $21_1 = $4_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $21_1;
  }
  return;
 }
 
 function $354($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $128(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $355($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $359($4_1 | 0) | 0;
  $360($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $356($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $14_1 = 0, $13_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $361($6_1 | 0, $286(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $363($6_1 | 0, $362(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $14_1 = $5_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $6_1 | 0;
 }
 
 function $357($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $12_1 = 0, $11_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = $365($364((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $12_1 = $3_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $8_1 | 0;
 }
 
 function $358($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $359($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $366($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $360($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $367($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $361($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $12_1 = 0, $11_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = HEAP32[($286(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$3 : {
   $12_1 = $4_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $5_1 | 0;
 }
 
 function $362($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $363($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $362(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $5_1 | 0;
 }
 
 function $364($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $369(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $365($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $368(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $366($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = 0;
  return $5_1 | 0;
 }
 
 function $367($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $368($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $369($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $370($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($376(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $371($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $29_1 = 0, $28_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $28_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $28_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $371($6_1 | 0, HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0);
   $371($6_1 | 0, HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $372($6_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
   $374(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, $373((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 16 | 0 | 0) | 0 | 0);
   $375(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 1 | 0);
  }
  label$4 : {
   $29_1 = $4_1 + 16 | 0;
   if ($29_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $29_1;
  }
  return;
 }
 
 function $372($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $377((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $373($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $379(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $374($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $378(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 32 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $375($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $380(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  label$3 : {
   $12_1 = $5_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return;
 }
 
 function $376($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $12_1 = 0, $11_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = $365($382((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $12_1 = $3_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $8_1 | 0;
 }
 
 function $377($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $381(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $378($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  return;
 }
 
 function $379($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $380($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $14_1 = 0, $13_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $113(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 20) | 0, 4 | 0);
  label$3 : {
   $14_1 = $5_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return;
 }
 
 function $381($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $382($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $383(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $383($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $384($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $385($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $26_1 = 0, $12_1 = 0, $42_1 = 0, $41_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 48 | 0;
  label$1 : {
   $41_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $41_1;
  }
  HEAP32[($6_1 + 44 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $3_1;
  $12_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $388($12_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
  HEAP8[($6_1 + 23 | 0) >> 0] = 0;
  label$3 : {
   if (!((HEAP32[(HEAP32[($6_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
    break label$3
   }
   $26_1 = $6_1 + 8 | 0;
   $389($26_1 | 0, $12_1 | 0, $137(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0);
   $391($12_1 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $390($26_1 | 0) | 0 | 0);
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $392($26_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
   HEAP8[($6_1 + 23 | 0) >> 0] = 1;
   $393($26_1 | 0) | 0;
  }
  $394($6_1 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $395($0_1 | 0, $6_1 | 0, $6_1 + 23 | 0 | 0) | 0;
  label$4 : {
   $42_1 = $6_1 + 48 | 0;
   if ($42_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $42_1;
  }
  return;
 }
 
 function $386($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $387($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $388($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $78_1 = 0, $77_1 = 0, $70_1 = 0, $74_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $77_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $77_1;
  }
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  $7_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $370($7_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $396($7_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       if (!(($398($397($7_1 | 0) | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 16 | 0 | 0) | 0) & 1 | 0)) {
        break label$7
       }
       label$8 : {
        label$9 : {
         if (!((HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$9
         }
         (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $399(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
         HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
         break label$8;
        }
        HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
        HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
        break label$3;
       }
       break label$6;
      }
      label$10 : {
       label$11 : {
        if (!(($398($397($7_1 | 0) | 0 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 16 | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
         break label$11
        }
        label$12 : {
         label$13 : {
          if (!((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$13
          }
          (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $399((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
          HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
          break label$12;
         }
         HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
         HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0;
         break label$3;
        }
        break label$10;
       }
       HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       break label$3;
      }
     }
     continue label$5;
    };
   }
   $70_1 = $357($7_1 | 0) | 0;
   HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = $70_1;
   HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
  }
  $74_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$14 : {
   $78_1 = $5_1 + 32 | 0;
   if ($78_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $78_1;
  }
  return $74_1 | 0;
 }
 
 function $389($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $9_1 = 0, $36_1 = 0, $35_1 = 0, $16_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $35_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $35_1;
  }
  $9_1 = 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $372(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  HEAP8[($5_1 + 15 | 0) >> 0] = $9_1 & 1 | 0;
  $16_1 = $400(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
  $401($5_1 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $9_1 & 1 | 0 | 0) | 0;
  $402($0_1 | 0, $16_1 | 0, $5_1 | 0) | 0;
  $404(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $373(($403($0_1 | 0) | 0) + 16 | 0 | 0) | 0 | 0, $137(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0);
  (wasm2js_i32$0 = $405($0_1 | 0) | 0, wasm2js_i32$1 = 1), HEAP8[(wasm2js_i32$0 + 4 | 0) >> 0] = wasm2js_i32$1;
  HEAP8[($5_1 + 15 | 0) >> 0] = 1 & 1 | 0;
  label$3 : {
   if ((HEAPU8[($5_1 + 15 | 0) >> 0] | 0) & 1 | 0) {
    break label$3
   }
   $393($0_1 | 0) | 0;
  }
  label$4 : {
   $36_1 = $5_1 + 32 | 0;
   if ($36_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $36_1;
  }
  return;
 }
 
 function $390($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($408(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $391($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0, $31_1 = 0, $38_1 = 0, $37_1 = 0, $25_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $37_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $37_1;
  }
  $7_1 = 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $8_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  HEAP32[(HEAP32[$6_1 >> 2] | 0) >> 2] = $7_1;
  HEAP32[((HEAP32[$6_1 >> 2] | 0) + 4 | 0) >> 2] = $7_1;
  HEAP32[((HEAP32[$6_1 >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($6_1 + 4 | 0) >> 2] | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
  label$3 : {
   if (!((HEAP32[(HEAP32[($358($8_1 | 0) | 0) >> 2] | 0) >> 2] | 0 | 0) != ($7_1 | 0) & 1 | 0)) {
    break label$3
   }
   $25_1 = HEAP32[(HEAP32[($358($8_1 | 0) | 0) >> 2] | 0) >> 2] | 0;
   (wasm2js_i32$0 = $358($8_1 | 0) | 0, wasm2js_i32$1 = $25_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  }
  $406(HEAP32[($357($8_1 | 0) | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($6_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0);
  $31_1 = $407($8_1 | 0) | 0;
  HEAP32[$31_1 >> 2] = (HEAP32[$31_1 >> 2] | 0) + 1 | 0;
  label$4 : {
   $38_1 = $6_1 + 16 | 0;
   if ($38_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $38_1;
  }
  return;
 }
 
 function $392($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $13_1 = 0, $12_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = HEAP32[($409($5_1 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $409($5_1 | 0) | 0, wasm2js_i32$1 = 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$3 : {
   $13_1 = $3_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $9_1 | 0;
 }
 
 function $393($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $9_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $410($5_1 | 0, 0 | 0);
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $394($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $395($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $18_1 = 0, $17_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $17_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $17_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = HEAP32[($386(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = (HEAPU8[($411(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 0] | 0) & 1 | 0), HEAP8[(wasm2js_i32$0 + 4 | 0) >> 0] = wasm2js_i32$1;
  label$3 : {
   $18_1 = $5_1 + 16 | 0;
   if ($18_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  return $6_1 | 0;
 }
 
 function $396($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $399($376(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $397($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $412((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $398($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return (HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0 | 0;
 }
 
 function $399($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $400($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $12_1 = 0, $11_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = $414(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  label$3 : {
   $12_1 = $4_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $8_1 | 0;
 }
 
 function $401($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP8[($5_1 + 7 | 0) >> 0] = $2_1;
  $7_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP8[($7_1 + 4 | 0) >> 0] = (HEAPU8[($5_1 + 7 | 0) >> 0] | 0) & 1 | 0;
  return $7_1 | 0;
 }
 
 function $402($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $9_1 = 0, $15_1 = 0, $14_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $9_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $416($9_1 | 0, $5_1 + 8 | 0 | 0, $415(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $15_1 = $5_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return $9_1 | 0;
 }
 
 function $403($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($408(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $404($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $417(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, $137(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0);
  label$3 : {
   $13_1 = $5_1 + 32 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $405($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $418(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $406($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $21_1 = 0, $50_1 = 0, $96_1 = 0, $130_1 = 0, $129_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $129_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $129_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 0] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0;
  label$3 : while (1) {
   $21_1 = 0;
   label$4 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    $21_1 = (HEAPU8[(($427(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) + 12 | 0) >> 0] | 0) ^ -1 | 0;
   }
   label$5 : {
    if (!($21_1 & 1 | 0)) {
     break label$5
    }
    label$6 : {
     label$7 : {
      if (!(($428($427(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) & 1 | 0)) {
       break label$7
      }
      (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[(($427($427(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) + 4 | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
      label$8 : {
       label$9 : {
        if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$9
        }
        if ((HEAPU8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 1 | 0) {
         break label$9
        }
        $50_1 = 1;
        (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $427(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
        HEAP8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 0] = $50_1;
        (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $427(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
        HEAP8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 0] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0;
        HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 0] = $50_1;
        break label$8;
       }
       label$10 : {
        if (($428(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0) {
         break label$10
        }
        (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $427(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
        $429(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
       }
       (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $427(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
       HEAP8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 0] = 1;
       (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $427(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
       HEAP8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 0] = 0;
       $430(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
       break label$5;
      }
      break label$6;
     }
     (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[(HEAP32[(($427(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 2] | 0) >> 2] | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     label$11 : {
      label$12 : {
       if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$12
       }
       if ((HEAPU8[((HEAP32[$4_1 >> 2] | 0) + 12 | 0) >> 0] | 0) & 1 | 0) {
        break label$12
       }
       $96_1 = 1;
       (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $427(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
       HEAP8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 0] = $96_1;
       (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $427(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
       HEAP8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 0] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0;
       HEAP8[((HEAP32[$4_1 >> 2] | 0) + 12 | 0) >> 0] = $96_1;
       break label$11;
      }
      label$13 : {
       if (!(($428(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
        break label$13
       }
       (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $427(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
       $430(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
      }
      (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $427(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
      HEAP8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 0] = 1;
      (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $427(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
      HEAP8[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 0] = 0;
      $429(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
      break label$5;
     }
    }
    continue label$3;
   }
   break label$3;
  };
  label$14 : {
   $130_1 = $4_1 + 16 | 0;
   if ($130_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $130_1;
  }
  return;
 }
 
 function $407($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $431((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $408($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $425(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $409($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $434(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $410($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $22_1 = 0, $21_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $21_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $21_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[($409($6_1 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  $9_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $409($6_1 | 0) | 0, wasm2js_i32$1 = $9_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$3 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $435($418($6_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  label$4 : {
   $22_1 = $4_1 + 16 | 0;
   if ($22_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  return;
 }
 
 function $411($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $412($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $413(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $413($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $414($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $23_1 = 0, $22_1 = 0, $19_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $22_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$3 : {
   if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 > ($419(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$3
   }
   $174(6802 | 0);
   abort();
  }
  $19_1 = $175(Math_imul(HEAP32[($5_1 + 8 | 0) >> 2] | 0, 20) | 0, 4 | 0) | 0;
  label$4 : {
   $23_1 = $5_1 + 16 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return $19_1 | 0;
 }
 
 function $415($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $416($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $16_1 = 0, $15_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $15_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $421($6_1 | 0, $420(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $423($6_1 + 4 | 0 | 0, $422(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $16_1 = $5_1 + 16 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  return $6_1 | 0;
 }
 
 function $417($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  $424(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $137(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0);
  label$3 : {
   $13_1 = $5_1 + 32 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $418($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $426((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $419($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 214748364 | 0;
 }
 
 function $420($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $421($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $12_1 = 0, $11_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = HEAP32[($420(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$3 : {
   $12_1 = $4_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $5_1 | 0;
 }
 
 function $422($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $423($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $11_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0, $35_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$2 = $422(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $35_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $35_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $5_1 | 0;
 }
 
 function $424($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = HEAP32[($5_1 + 8 | 0) >> 2] | 0, wasm2js_i32$1 = HEAP32[($137(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$3 : {
   $13_1 = $5_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $425($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $426($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $427($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $428($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0 | 0;
 }
 
 function $429($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $40_1 = 0, $39_1 = 0, $30_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $39_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $39_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  label$3 : {
   if (!((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $432(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  }
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  label$4 : {
   label$5 : {
    if (!(($428(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    break label$4;
   }
   $30_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
   (wasm2js_i32$0 = $427(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $30_1), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  }
  HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $432(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  label$6 : {
   $40_1 = $3_1 + 16 | 0;
   if ($40_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $40_1;
  }
  return;
 }
 
 function $430($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $40_1 = 0, $39_1 = 0, $30_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $39_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $39_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  label$3 : {
   if (!((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $432(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  }
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  label$4 : {
   label$5 : {
    if (!(($428(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    break label$4;
   }
   $30_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
   (wasm2js_i32$0 = $427(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $30_1), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  }
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $432(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  label$6 : {
   $40_1 = $3_1 + 16 | 0;
   if ($40_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $40_1;
  }
  return;
 }
 
 function $431($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $433(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $432($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function $433($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $434($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $435($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $27_1 = 0, $26_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $26_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $26_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if (!((HEAPU8[($5_1 + 4 | 0) >> 0] | 0) & 1 | 0)) {
    break label$3
   }
   $374(HEAP32[$5_1 >> 2] | 0 | 0, $373((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 16 | 0 | 0) | 0 | 0);
  }
  label$4 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$4
   }
   $375(HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 1 | 0);
  }
  label$5 : {
   $27_1 = $4_1 + 16 | 0;
   if ($27_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $27_1;
  }
  return;
 }
 
 function $436($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $437($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $36_1 = 0, $35_1 = 0, $7_1 = 0, $32_1 = 0;
  $6_1 = global$0 - 32 | 0;
  label$1 : {
   $35_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $35_1;
  }
  HEAP32[($6_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    label$5 : {
     label$6 : {
      if (($398($397($7_1 | 0) | 0 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 16 | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0) & 1 | 0) {
       break label$6
      }
      HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
      HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
      break label$5;
     }
     HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    }
    continue label$4;
   };
  }
  $436($6_1 + 24 | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $32_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  label$7 : {
   $36_1 = $6_1 + 32 | 0;
   if ($36_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $36_1;
  }
  return $32_1 | 0;
 }
 
 function $438($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0, $14_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = (($440(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0;
  label$3 : {
   $15_1 = $4_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return $11_1 | 0;
 }
 
 function $439($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = ($441(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 16 | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $440($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0 | 0;
 }
 
 function $441($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $442($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $29_1 = 0, $28_1 = 0, $25_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $28_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $28_1;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $443(HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
    break label$3;
   }
   label$5 : {
    label$6 : while (1) {
     if (!((($428(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0)) {
      break label$5
     }
     (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $427(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
     continue label$6;
    };
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  }
  $25_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$7 : {
   $29_1 = $3_1 + 16 | 0;
   if ($29_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $29_1;
  }
  return $25_1 | 0;
 }
 
 function $443($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
    continue label$2;
   };
  }
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $444($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $11_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $454($5_1 | 0, $90(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $455($5_1 | 0) | 0;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $5_1 | 0;
 }
 
 function $445($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0, $18_1 = 0, $15_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $458($457(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $159() | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  $15_1 = HEAP32[($160($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  label$3 : {
   $19_1 = $3_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  return $15_1 | 0;
 }
 
 function $446($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $460((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $447($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $12_1 = 0, $11_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = $459(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  label$3 : {
   $12_1 = $4_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $8_1 | 0;
 }
 
 function $448($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $461((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $449($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $25_1 = 0, $24_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $24_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $24_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $464($5_1 | 0, $462($5_1 | 0) | 0 | 0, ($462($5_1 | 0) | 0) + (($463($5_1 | 0) | 0) << 3 | 0) | 0 | 0, ($462($5_1 | 0) | 0) + (($463($5_1 | 0) | 0) << 3 | 0) | 0 | 0, ($462($5_1 | 0) | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0 | 0);
  label$3 : {
   $25_1 = $4_1 + 16 | 0;
   if ($25_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  return;
 }
 
 function $450($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $451($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $452($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $476(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, $475(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0);
  label$3 : {
   $13_1 = $5_1 + 32 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $453($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $454($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $11_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $90(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$6_1 >> 2] = 0;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $6_1 | 0;
 }
 
 function $455($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $456($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $456($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $457($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $466((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $458($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $465(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $459($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $23_1 = 0, $22_1 = 0, $19_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $22_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$3 : {
   if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 > ($467(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$3
   }
   $174(6802 | 0);
   abort();
  }
  $19_1 = $175((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 3 | 0 | 0, 8 | 0) | 0;
  label$4 : {
   $23_1 = $5_1 + 16 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return $19_1 | 0;
 }
 
 function $460($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $469(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $461($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $470(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $462($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $451(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $463($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $471(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $464($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  return;
 }
 
 function $465($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $5_1 = $467(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $466($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $468(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $467($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 536870911 | 0;
 }
 
 function $468($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $469($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $470($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $471($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $14_1 = 0, $13_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($472($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 3 | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $10_1 | 0;
 }
 
 function $472($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $473((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $473($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $474(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $474($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $475($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $476($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  $477(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $475(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0);
  label$3 : {
   $13_1 = $5_1 + 32 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $477($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0, $11_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = HEAP32[($5_1 + 8 | 0) >> 2] | 0, wasm2js_f64$0 = +HEAPF64[($475(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 3]), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
  label$3 : {
   $12_1 = $5_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return;
 }
 
 function $478($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 3 | 0 | 0;
 }
 
 function $479($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $481($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return;
 }
 
 function $480($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $482(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  label$3 : {
   $12_1 = $5_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return;
 }
 
 function $481($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $17_1 = 0, $23_1 = 0, $22_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $22_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $14_1 = $446($5_1 | 0) | 0;
    $17_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -8 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $17_1;
    $483($14_1 | 0, $451($17_1 | 0) | 0 | 0);
    continue label$4;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$5 : {
   $23_1 = $4_1 + 16 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return;
 }
 
 function $482($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $14_1 = 0, $13_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $113(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 3 | 0 | 0, 8 | 0);
  label$3 : {
   $14_1 = $5_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return;
 }
 
 function $483($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $484(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 32 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $484($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $485(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $485($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $486($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0, $36_1 = 0, $59_1 = 0, $58_1 = 0, $27_1 = 0, $55_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $58_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $58_1;
  }
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$4
    }
    $13_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    break label$3;
   }
   $13_1 = 1;
  }
  HEAP32[$4_1 >> 2] = $13_1;
  label$5 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$5
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  }
  $27_1 = $1068(HEAP32[$4_1 >> 2] | 0 | 0, 8 | 0) | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = $27_1;
  label$6 : {
   label$7 : {
    if (!((HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$7
    }
    $36_1 = 2;
    $28(6870 | 0, 6889 | 0, 132 | 0, $36_1 | 0) | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $36_1;
    break label$6;
   }
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 3 | 0) | 0;
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] = (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  $55_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$8 : {
   $59_1 = $4_1 + 16 | 0;
   if ($59_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $59_1;
  }
  return $55_1 | 0;
 }
 
 function $487($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $33_1 = 0, $32_1 = 0, $29_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $32_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $32_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(6968 | 0, 6889 | 0, 164 | 0, 6978 | 0);
   abort();
  }
  HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$5_1 >> 2] | 0) + 4 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0;
  HEAP32[((HEAP32[$5_1 >> 2] | 0) + 8 | 0) >> 2] = HEAP32[((HEAP32[$5_1 >> 2] | 0) + 4 | 0) >> 2] | 0;
  $29_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  label$4 : {
   $33_1 = $5_1 + 16 | 0;
   if ($33_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $33_1;
  }
  return $29_1 | 0;
 }
 
 function $488($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $23_1 = 0, $31_1 = 0, $30_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $30_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $30_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(6998 | 0, 6889 | 0, 379 | 0, 7005 | 0);
   abort();
  }
  label$4 : {
   if (!((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$4
   }
   $23_1 = 0;
   $1064(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0);
   HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] = $23_1;
   HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] = $23_1;
  }
  label$5 : {
   $31_1 = $3_1 + 16 | 0;
   if ($31_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $31_1;
  }
  return;
 }
 
 function $489($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $52_1 = 0, $77_1 = 0, $76_1 = 0, $73_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $76_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $76_1;
  }
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $490(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 438 | 0, 7037 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 439 | 0, 7037 | 0);
   abort();
  }
  label$5 : {
   label$6 : {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) <= ($490(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 0;
    break label$5;
   }
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1067(HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
   label$7 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$7
    }
    $52_1 = 2;
    $28(7081 | 0, 6889 | 0, 446 | 0, $52_1 | 0) | 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = $52_1;
    break label$5;
   }
   HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = (HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0;
   HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] = (HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $73_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$8 : {
   $77_1 = $4_1 + 32 | 0;
   if ($77_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $77_1;
  }
  return $73_1 | 0;
 }
 
 function $490($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $37_1 = 0, $36_1 = 0, $33_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $36_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $36_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 485 | 0, 7133 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 486 | 0, 7133 | 0);
   abort();
  }
  $33_1 = ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) - (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 3 | 0;
  label$5 : {
   $37_1 = $3_1 + 16 | 0;
   if ($37_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $37_1;
  }
  return $33_1 | 0;
 }
 
 function $491($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $39_1 = 0, $38_1 = 0, $35_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $38_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $38_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 468 | 0, 7113 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 469 | 0, 7113 | 0);
   abort();
  }
  $35_1 = (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0;
  label$5 : {
   $39_1 = $3_1 + 16 | 0;
   if ($39_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $39_1;
  }
  return $35_1 | 0;
 }
 
 function $492($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $33_1 = 0, $32_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $32_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $32_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 505 | 0, 7152 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 506 | 0, 7152 | 0);
   abort();
  }
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  label$5 : {
   $33_1 = $3_1 + 16 | 0;
   if ($33_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $33_1;
  }
  return;
 }
 
 function $493($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $4_1 = 0, $55_1 = 0, $63_1 = 0, $62_1 = 0, $59_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $62_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $62_1;
  }
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAPF64[($4_1 + 16 | 0) >> 3] = $1_1;
  label$3 : {
   if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 536 | 0, 7172 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 537 | 0, 7172 | 0);
   abort();
  }
  label$5 : {
   label$6 : {
    if (!((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$6
    }
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = ($490(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) << 1 | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
    label$7 : {
     if (HEAP32[($4_1 + 12 | 0) >> 2] | 0) {
      break label$7
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = 1;
    }
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $489(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
    label$8 : {
     if (!(HEAP32[($4_1 + 8 | 0) >> 2] | 0)) {
      break label$8
     }
     $28(6997 | 0, 6889 | 0, 545 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
     break label$5;
    }
   }
   HEAPF64[(HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] = +HEAPF64[($4_1 + 16 | 0) >> 3];
   $55_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
   HEAP32[($55_1 + 8 | 0) >> 2] = (HEAP32[($55_1 + 8 | 0) >> 2] | 0) + 8 | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $59_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$9 : {
   $63_1 = $4_1 + 32 | 0;
   if ($63_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $63_1;
  }
  return $59_1 | 0;
 }
 
 function $494($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $49_1 = 0, $48_1 = 0, $45_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $48_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $48_1;
  }
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$3 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 895 | 0, 7315 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 896 | 0, 7315 | 0);
   abort();
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $489(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$5 : {
   label$6 : {
    if (!(HEAP32[$4_1 >> 2] | 0)) {
     break label$6
    }
    $28(6997 | 0, 6889 | 0, 897 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
    break label$5;
   }
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] = (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  $45_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$7 : {
   $49_1 = $4_1 + 16 | 0;
   if ($49_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $49_1;
  }
  return $45_1 | 0;
 }
 
 function $495($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $37_1 = 0, $36_1 = 0, $38_1 = 0.0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $36_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $36_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$3 : {
   if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 610 | 0, 7196 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 611 | 0, 7196 | 0);
   abort();
  }
  $38_1 = +HEAPF64[((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
  label$5 : {
   $37_1 = $4_1 + 16 | 0;
   if ($37_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $37_1;
  }
  return +$38_1;
 }
 
 function $496($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  var $5_1 = 0, $38_1 = 0, $37_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $37_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $37_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAPF64[$5_1 >> 3] = $2_1;
  label$3 : {
   if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 646 | 0, 7212 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 647 | 0, 7212 | 0);
   abort();
  }
  HEAPF64[((HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[$5_1 >> 3];
  label$5 : {
   $38_1 = $5_1 + 16 | 0;
   if ($38_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $38_1;
  }
  return;
 }
 
 function $497($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $45_1 = 0, $44_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $44_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $44_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 668 | 0, 7230 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 669 | 0, 7230 | 0);
   abort();
  }
  label$5 : {
   if (!(($490(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$5
   }
   $1071(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, 0 | 0, ($490(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) << 3 | 0 | 0) | 0;
  }
  label$6 : {
   $45_1 = $3_1 + 16 | 0;
   if ($45_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $45_1;
  }
  return;
 }
 
 function $498($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $4_1 = 0, $45_1 = 0, $44_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $44_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $44_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAPF64[($4_1 + 16 | 0) >> 3] = $1_1;
  label$3 : {
   if ((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 689 | 0, 7249 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 690 | 0, 7249 | 0);
   abort();
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAPF64[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 3] = +HEAPF64[($4_1 + 16 | 0) >> 3];
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0;
    continue label$6;
   };
  }
  label$7 : {
   $45_1 = $4_1 + 32 | 0;
   if ($45_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $45_1;
  }
  return;
 }
 
 function $499($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $45_1 = 0, $52_1 = 0, $51_1 = 0, $54_1 = 0.0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $51_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $51_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 731 | 0, 7268 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 732 | 0, 7268 | 0);
   abort();
  }
  label$5 : {
   if ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0) {
    break label$5
   }
   fimport$1(7291 | 0, 6889 | 0, 733 | 0, 7268 | 0);
   abort();
  }
  (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = +$495(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, ($490(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0 | 0)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
  $45_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($45_1 + 8 | 0) >> 2] = (HEAP32[($45_1 + 8 | 0) >> 2] | 0) + -8 | 0;
  $54_1 = +HEAPF64[$3_1 >> 3];
  label$6 : {
   $52_1 = $3_1 + 16 | 0;
   if ($52_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $52_1;
  }
  return +$54_1;
 }
 
 function $500($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $52_1 = 0, $51_1 = 0, $57_1 = 0.0;
  $3_1 = global$0 - 32 | 0;
  label$1 : {
   $51_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $51_1;
  }
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 957 | 0, 7336 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 958 | 0, 7336 | 0);
   abort();
  }
  HEAPF64[($3_1 + 16 | 0) >> 3] = +HEAPF64[(HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) >> 3];
  HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$5
    }
    label$7 : {
     if (!(+HEAPF64[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 3] > +HEAPF64[($3_1 + 16 | 0) >> 3] & 1 | 0)) {
      break label$7
     }
     HEAPF64[($3_1 + 16 | 0) >> 3] = +HEAPF64[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 3];
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0;
    continue label$6;
   };
  }
  $57_1 = +HEAPF64[($3_1 + 16 | 0) >> 3];
  label$8 : {
   $52_1 = $3_1 + 32 | 0;
   if ($52_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $52_1;
  }
  return +$57_1;
 }
 
 function $501($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $62_1 = 0, $61_1 = 0, $58_1 = 0;
  $3_1 = global$0 - 32 | 0;
  label$1 : {
   $61_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $61_1;
  }
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = -1;
  label$3 : {
   if ($491(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0) {
    break label$3
   }
   label$4 : {
    if ((HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$4
    }
    fimport$1(7027 | 0, 6889 | 0, 991 | 0, 7354 | 0);
    abort();
   }
   label$5 : {
    if ((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$5
    }
    fimport$1(7059 | 0, 6889 | 0, 992 | 0, 7354 | 0);
    abort();
   }
   HEAPF64[($3_1 + 16 | 0) >> 3] = +HEAPF64[(HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) >> 3];
   HEAP32[($3_1 + 24 | 0) >> 2] = 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = 1;
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$6
     }
     label$8 : {
      if (!(+HEAPF64[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 3] > +HEAPF64[($3_1 + 16 | 0) >> 3] & 1 | 0)) {
       break label$8
      }
      HEAPF64[($3_1 + 16 | 0) >> 3] = +HEAPF64[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 3];
      HEAP32[($3_1 + 24 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0;
     HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
     continue label$7;
    };
   }
  }
  $58_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  label$9 : {
   $62_1 = $3_1 + 32 | 0;
   if ($62_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $62_1;
  }
  return $58_1 | 0;
 }
 
 function $502($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $52_1 = 0, $51_1 = 0, $57_1 = 0.0;
  $3_1 = global$0 - 32 | 0;
  label$1 : {
   $51_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $51_1;
  }
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 1020 | 0, 7378 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 1021 | 0, 7378 | 0);
   abort();
  }
  HEAPF64[($3_1 + 16 | 0) >> 3] = +HEAPF64[(HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) >> 3];
  HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + 8 | 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$5
    }
    label$7 : {
     if (!(+HEAPF64[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 3] < +HEAPF64[($3_1 + 16 | 0) >> 3] & 1 | 0)) {
      break label$7
     }
     HEAPF64[($3_1 + 16 | 0) >> 3] = +HEAPF64[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 3];
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0;
    continue label$6;
   };
  }
  $57_1 = +HEAPF64[($3_1 + 16 | 0) >> 3];
  label$8 : {
   $52_1 = $3_1 + 32 | 0;
   if ($52_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $52_1;
  }
  return +$57_1;
 }
 
 function $503($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $52_1 = 0, $51_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $51_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $51_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$3 : {
   if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 1113 | 0, 7396 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 1114 | 0, 7396 | 0);
   abort();
  }
  label$5 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$5
   }
   $1070(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, (((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) - (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 3 | 0) << 3 | 0 | 0) | 0;
  }
  label$6 : {
   $52_1 = $4_1 + 16 | 0;
   if ($52_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $52_1;
  }
  return;
 }
 
 function $504($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $41_1 = 0, $69_1 = 0, $68_1 = 0, $32_1 = 0, $52_1 = 0, $65_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $68_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $68_1;
  }
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$3 : {
   if ((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7418 | 0, 6889 | 0, 1140 | 0, 7431 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7450 | 0, 6889 | 0, 1141 | 0, 7431 | 0);
   abort();
  }
  $32_1 = $1068($490(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, 8 | 0) | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = $32_1;
  label$5 : {
   label$6 : {
    if (!((HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$6
    }
    $41_1 = 2;
    $28(7475 | 0, 6889 | 0, 1144 | 0, $41_1 | 0) | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $41_1;
    break label$5;
   }
   $52_1 = (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + (($490(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) << 3 | 0) | 0;
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $52_1;
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   $1070(HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0, ($490(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) << 3 | 0 | 0) | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  $65_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$7 : {
   $69_1 = $4_1 + 16 | 0;
   if ($69_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $69_1;
  }
  return $65_1 | 0;
 }
 
 function $505($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $44_1 = 0, $43_1 = 0, $49_1 = 0.0;
  $3_1 = global$0 - 32 | 0;
  label$1 : {
   $43_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $43_1;
  }
  $4_1 = 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAPF64[($3_1 + 16 | 0) >> 3] = +($4_1 | 0);
  label$3 : {
   if ((HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) != ($4_1 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 1171 | 0, 7494 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 1172 | 0, 7494 | 0);
   abort();
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$5
    }
    HEAPF64[($3_1 + 16 | 0) >> 3] = +HEAPF64[($3_1 + 16 | 0) >> 3] + +HEAPF64[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 3];
    HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0;
    continue label$6;
   };
  }
  $49_1 = +HEAPF64[($3_1 + 16 | 0) >> 3];
  label$7 : {
   $44_1 = $3_1 + 32 | 0;
   if ($44_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $44_1;
  }
  return +$49_1;
 }
 
 function $506($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  var $5_1 = 0, $44_1 = 0.0, $10_1 = 0, $48_1 = 0.0, $39_1 = 0, $38_1 = 0, $6_1 = 0, $35_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $38_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $38_1;
  }
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAPF64[($5_1 + 16 | 0) >> 3] = $1_1;
  HEAPF64[($5_1 + 8 | 0) >> 3] = $2_1;
  $6_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  $44_1 = +HEAPF64[($5_1 + 8 | 0) >> 3] - +HEAPF64[($5_1 + 16 | 0) >> 3] + 1.0;
  label$3 : {
   label$4 : {
    if (!(Math_abs($44_1) < 2147483648.0)) {
     break label$4
    }
    $10_1 = ~~$44_1;
    break label$3;
   }
   $10_1 = -2147483648;
  }
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $486($6_1 | 0, $10_1 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$5 : {
   label$6 : {
    if (!(HEAP32[$5_1 >> 2] | 0)) {
     break label$6
    }
    $28(6997 | 0, 6889 | 0, 1289 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
    break label$5;
   }
   HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$7
     }
     $48_1 = +HEAPF64[($5_1 + 16 | 0) >> 3];
     HEAPF64[($5_1 + 16 | 0) >> 3] = $48_1 + 1.0;
     HEAPF64[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 3] = $48_1;
     HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 8 | 0;
     continue label$8;
    };
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = 0;
  }
  $35_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$9 : {
   $39_1 = $5_1 + 32 | 0;
   if ($39_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $39_1;
  }
  return $35_1 | 0;
 }
 
 function $507($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $64_1 = 0, $73_1 = 0, $72_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $72_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $72_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$3 : {
   if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 1319 | 0, 7512 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 1320 | 0, 7512 | 0);
   abort();
  }
  label$5 : {
   if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) < ($490(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
    break label$5
   }
   $1072((HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, ((((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) - (HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 3 | 0) - (HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0) << 3 | 0 | 0) | 0;
  }
  $64_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[($64_1 + 8 | 0) >> 2] = (HEAP32[($64_1 + 8 | 0) >> 2] | 0) + ((0 - ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) - (HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0) | 0) << 3 | 0) | 0;
  label$6 : {
   $73_1 = $5_1 + 16 | 0;
   if ($73_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $73_1;
  }
  return;
 }
 
 function $508($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $51_1 = 0, $50_1 = 0, $30_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $50_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $50_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  label$3 : {
   if ((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 1381 | 0, 7541 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($6_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 1382 | 0, 7541 | 0);
   abort();
  }
  $30_1 = 0;
  $1072((HEAP32[(HEAP32[($6_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[$6_1 >> 2] | 0) << 3 | 0) | 0 | 0, (HEAP32[(HEAP32[($6_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) - (HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0) << 3 | 0 | 0) | 0;
  label$5 : {
   $51_1 = $6_1 + 16 | 0;
   if ($51_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $51_1;
  }
  return $30_1 | 0;
 }
 
 function $509($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  var $5_1 = 0, $56_1 = 0, $55_1 = 0, $52_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $55_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $55_1;
  }
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAPF64[($5_1 + 16 | 0) >> 3] = $1_1;
  HEAPF64[($5_1 + 8 | 0) >> 3] = $2_1;
  label$3 : {
   if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 1431 | 0, 7570 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($5_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 1432 | 0, 7570 | 0);
   abort();
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
  label$5 : {
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$6
     }
     label$8 : {
      label$9 : {
       if (+HEAPF64[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 3] < +HEAPF64[($5_1 + 16 | 0) >> 3] & 1 | 0) {
        break label$9
       }
       if (!(+HEAPF64[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 3] > +HEAPF64[($5_1 + 8 | 0) >> 3] & 1 | 0)) {
        break label$8
       }
      }
      HEAP32[($5_1 + 28 | 0) >> 2] = 0;
      break label$5;
     }
     HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 8 | 0;
     continue label$7;
    };
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = 1;
  }
  $52_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$10 : {
   $56_1 = $5_1 + 32 | 0;
   if ($56_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $56_1;
  }
  return $52_1 | 0;
 }
 
 function $510($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $4_1 = 0, $51_1 = 0, $50_1 = 0, $47_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $50_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $50_1;
  }
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAPF64[($4_1 + 16 | 0) >> 3] = $1_1;
  label$3 : {
   if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 1459 | 0, 7597 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 1460 | 0, 7597 | 0);
   abort();
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
  label$5 : {
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$6
     }
     label$8 : {
      if (!(+HEAPF64[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 3] < +HEAPF64[($4_1 + 16 | 0) >> 3] & 1 | 0)) {
       break label$8
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = 1;
      break label$5;
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0;
     continue label$7;
    };
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $47_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$9 : {
   $51_1 = $4_1 + 32 | 0;
   if ($51_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $51_1;
  }
  return $47_1 | 0;
 }
 
 function $511($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $4_1 = 0, $19_1 = 0, $26_1 = 0, $25_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $25_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAPF64[($4_1 + 16 | 0) >> 3] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) < ($490(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $19_1 = (HEAP32[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF64[$19_1 >> 3] = +HEAPF64[$19_1 >> 3] * +HEAPF64[($4_1 + 16 | 0) >> 3];
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  label$5 : {
   $26_1 = $4_1 + 32 | 0;
   if ($26_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $26_1;
  }
  return;
 }
 
 function $512($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $47_1 = 0, $46_1 = 0, $43_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $46_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $46_1;
  }
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $490(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $490(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $494(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!(HEAP32[($4_1 + 8 | 0) >> 2] | 0)) {
     break label$4
    }
    $28(6997 | 0, 6889 | 0, 1992 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    break label$3;
   }
   $1070((HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0 | 0, HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
   HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] = ((HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $43_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$5 : {
   $47_1 = $4_1 + 32 | 0;
   if ($47_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $47_1;
  }
  return $43_1 | 0;
 }
 
 function $513($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $20_1 = 0, $19_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $19_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  $5_1 = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $490(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  $494(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $1070(HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
  label$3 : {
   $20_1 = $4_1 + 16 | 0;
   if ($20_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  return $5_1 | 0;
 }
 
 function $514($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $63_1 = 0, $62_1 = 0, $59_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 32 | 0;
  label$1 : {
   $62_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $62_1;
  }
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $490(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   if (!((HEAP32[(($959() | 0) + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
    break label$3
   }
   $960($959() | 0 | 0, fimport$0(0 | 0) | 0 | 0) | 0;
   (wasm2js_i32$0 = $959() | 0, wasm2js_i32$1 = 2), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  }
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
     break label$4
    }
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $961($959() | 0 | 0, 0 | 0, (HEAP32[($3_1 + 24 | 0) >> 2] | 0) - 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
    HEAP32[($3_1 + 24 | 0) >> 2] = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + -1 | 0;
    HEAPF64[($3_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($3_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($3_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($3_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[(HEAP32[($3_1 + 28 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($3_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($3_1 + 8 | 0) >> 3];
    continue label$5;
   };
  }
  $59_1 = 0;
  label$6 : {
   $63_1 = $3_1 + 32 | 0;
   if ($63_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $63_1;
  }
  return $59_1 | 0;
 }
 
 function $515($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $37_1 = 0, $36_1 = 0, $33_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $36_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $36_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 485 | 0, 7855 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 486 | 0, 7855 | 0);
   abort();
  }
  $33_1 = ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) - (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 2 | 0;
  label$5 : {
   $37_1 = $3_1 + 16 | 0;
   if ($37_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $37_1;
  }
  return $33_1 | 0;
 }
 
 function $516($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0, $36_1 = 0, $59_1 = 0, $58_1 = 0, $27_1 = 0, $55_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $58_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $58_1;
  }
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$4
    }
    $13_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    break label$3;
   }
   $13_1 = 1;
  }
  HEAP32[$4_1 >> 2] = $13_1;
  label$5 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$5
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  }
  $27_1 = $1068(HEAP32[$4_1 >> 2] | 0 | 0, 4 | 0) | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = $27_1;
  label$6 : {
   label$7 : {
    if (!((HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$7
    }
    $36_1 = 2;
    $28(6870 | 0, 6889 | 0, 132 | 0, $36_1 | 0) | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $36_1;
    break label$6;
   }
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0;
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] = (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  $55_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$8 : {
   $59_1 = $4_1 + 16 | 0;
   if ($59_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $59_1;
  }
  return $55_1 | 0;
 }
 
 function $517($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $23_1 = 0, $31_1 = 0, $30_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $30_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $30_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(6998 | 0, 6889 | 0, 379 | 0, 7623 | 0);
   abort();
  }
  label$4 : {
   if (!((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$4
   }
   $23_1 = 0;
   $1064(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0);
   HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] = $23_1;
   HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] = $23_1;
  }
  label$5 : {
   $31_1 = $3_1 + 16 | 0;
   if ($31_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $31_1;
  }
  return;
 }
 
 function $518($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $52_1 = 0, $77_1 = 0, $76_1 = 0, $73_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $76_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $76_1;
  }
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $519(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 438 | 0, 7650 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 439 | 0, 7650 | 0);
   abort();
  }
  label$5 : {
   label$6 : {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) <= ($519(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 0;
    break label$5;
   }
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1067(HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 2 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
   label$7 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$7
    }
    $52_1 = 2;
    $28(7081 | 0, 6889 | 0, 446 | 0, $52_1 | 0) | 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = $52_1;
    break label$5;
   }
   HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = (HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0;
   HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] = (HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $73_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$8 : {
   $77_1 = $4_1 + 32 | 0;
   if ($77_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $77_1;
  }
  return $73_1 | 0;
 }
 
 function $519($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $37_1 = 0, $36_1 = 0, $33_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $36_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $36_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 485 | 0, 7677 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 486 | 0, 7677 | 0);
   abort();
  }
  $33_1 = ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) - (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 2 | 0;
  label$5 : {
   $37_1 = $3_1 + 16 | 0;
   if ($37_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $37_1;
  }
  return $33_1 | 0;
 }
 
 function $520($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $56_1 = 0, $64_1 = 0, $63_1 = 0, $60_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $63_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $63_1;
  }
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$3 : {
   if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 536 | 0, 7701 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 537 | 0, 7701 | 0);
   abort();
  }
  label$5 : {
   label$6 : {
    if (!((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$6
    }
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = ($519(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) << 1 | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
    label$7 : {
     if (HEAP32[($4_1 + 16 | 0) >> 2] | 0) {
      break label$7
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = 1;
    }
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $518(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
    label$8 : {
     if (!(HEAP32[($4_1 + 12 | 0) >> 2] | 0)) {
      break label$8
     }
     $28(6997 | 0, 6889 | 0, 545 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     break label$5;
    }
   }
   HEAP32[(HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
   $56_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
   HEAP32[($56_1 + 8 | 0) >> 2] = (HEAP32[($56_1 + 8 | 0) >> 2] | 0) + 4 | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $60_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$9 : {
   $64_1 = $4_1 + 32 | 0;
   if ($64_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $64_1;
  }
  return $60_1 | 0;
 }
 
 function $521($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $38_1 = 0, $37_1 = 0, $34_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $37_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $37_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$3 : {
   if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 610 | 0, 7730 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 611 | 0, 7730 | 0);
   abort();
  }
  $34_1 = HEAP32[((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
  label$5 : {
   $38_1 = $4_1 + 16 | 0;
   if ($38_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $38_1;
  }
  return $34_1 | 0;
 }
 
 function $522($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $46_1 = 0, $54_1 = 0, $53_1 = 0, $50_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $53_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $53_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 731 | 0, 7751 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 732 | 0, 7751 | 0);
   abort();
  }
  label$5 : {
   if ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0) {
    break label$5
   }
   fimport$1(7291 | 0, 6889 | 0, 733 | 0, 7751 | 0);
   abort();
  }
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $521(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, ($519(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  $46_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($46_1 + 8 | 0) >> 2] = (HEAP32[($46_1 + 8 | 0) >> 2] | 0) + -4 | 0;
  $50_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$6 : {
   $54_1 = $3_1 + 16 | 0;
   if ($54_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $54_1;
  }
  return $50_1 | 0;
 }
 
 function $523($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $37_1 = 0, $36_1 = 0, $33_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $36_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $36_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 485 | 0, 7779 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 486 | 0, 7779 | 0);
   abort();
  }
  $33_1 = ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) - (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 2 | 0;
  label$5 : {
   $37_1 = $3_1 + 16 | 0;
   if ($37_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $37_1;
  }
  return $33_1 | 0;
 }
 
 function $524($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0, $36_1 = 0, $59_1 = 0, $58_1 = 0, $27_1 = 0, $55_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $58_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $58_1;
  }
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$4
    }
    $13_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    break label$3;
   }
   $13_1 = 1;
  }
  HEAP32[$4_1 >> 2] = $13_1;
  label$5 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$5
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  }
  $27_1 = $1068(HEAP32[$4_1 >> 2] | 0 | 0, 4 | 0) | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = $27_1;
  label$6 : {
   label$7 : {
    if (!((HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$7
    }
    $36_1 = 2;
    $28(6870 | 0, 6889 | 0, 132 | 0, $36_1 | 0) | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $36_1;
    break label$6;
   }
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0;
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] = (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  $55_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$8 : {
   $59_1 = $4_1 + 16 | 0;
   if ($59_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $59_1;
  }
  return $55_1 | 0;
 }
 
 function $525($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $23_1 = 0, $31_1 = 0, $30_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $30_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $30_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(6998 | 0, 6889 | 0, 379 | 0, 7803 | 0);
   abort();
  }
  label$4 : {
   if (!((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$4
   }
   $23_1 = 0;
   $1064(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0);
   HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] = $23_1;
   HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] = $23_1;
  }
  label$5 : {
   $31_1 = $3_1 + 16 | 0;
   if ($31_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $31_1;
  }
  return;
 }
 
 function $526($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $52_1 = 0, $77_1 = 0, $76_1 = 0, $73_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $76_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $76_1;
  }
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $515(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 438 | 0, 7829 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 439 | 0, 7829 | 0);
   abort();
  }
  label$5 : {
   label$6 : {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) <= ($515(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 0;
    break label$5;
   }
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1067(HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 2 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
   label$7 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$7
    }
    $52_1 = 2;
    $28(7081 | 0, 6889 | 0, 446 | 0, $52_1 | 0) | 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = $52_1;
    break label$5;
   }
   HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = (HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0;
   HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] = (HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $73_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$8 : {
   $77_1 = $4_1 + 32 | 0;
   if ($77_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $77_1;
  }
  return $73_1 | 0;
 }
 
 function $527($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $33_1 = 0, $32_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $32_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $32_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 505 | 0, 7878 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 506 | 0, 7878 | 0);
   abort();
  }
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  label$5 : {
   $33_1 = $3_1 + 16 | 0;
   if ($33_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $33_1;
  }
  return;
 }
 
 function $528($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $56_1 = 0, $64_1 = 0, $63_1 = 0, $60_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $63_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $63_1;
  }
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$3 : {
   if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 536 | 0, 7902 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 537 | 0, 7902 | 0);
   abort();
  }
  label$5 : {
   label$6 : {
    if (!((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$6
    }
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = ($515(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) << 1 | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
    label$7 : {
     if (HEAP32[($4_1 + 16 | 0) >> 2] | 0) {
      break label$7
     }
     HEAP32[($4_1 + 16 | 0) >> 2] = 1;
    }
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $526(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
    label$8 : {
     if (!(HEAP32[($4_1 + 12 | 0) >> 2] | 0)) {
      break label$8
     }
     $28(6997 | 0, 6889 | 0, 545 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     break label$5;
    }
   }
   HEAP32[(HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
   $56_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
   HEAP32[($56_1 + 8 | 0) >> 2] = (HEAP32[($56_1 + 8 | 0) >> 2] | 0) + 4 | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $60_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$9 : {
   $64_1 = $4_1 + 32 | 0;
   if ($64_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $64_1;
  }
  return $60_1 | 0;
 }
 
 function $529($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $49_1 = 0, $48_1 = 0, $45_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $48_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $48_1;
  }
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$3 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 895 | 0, 7977 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 896 | 0, 7977 | 0);
   abort();
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $526(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$5 : {
   label$6 : {
    if (!(HEAP32[$4_1 >> 2] | 0)) {
     break label$6
    }
    $28(6997 | 0, 6889 | 0, 897 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
    break label$5;
   }
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] = (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  $45_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$7 : {
   $49_1 = $4_1 + 16 | 0;
   if ($49_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $49_1;
  }
  return $45_1 | 0;
 }
 
 function $530($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $38_1 = 0, $37_1 = 0, $34_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $37_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $37_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$3 : {
   if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 610 | 0, 7930 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 611 | 0, 7930 | 0);
   abort();
  }
  $34_1 = HEAP32[((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
  label$5 : {
   $38_1 = $4_1 + 16 | 0;
   if ($38_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $38_1;
  }
  return $34_1 | 0;
 }
 
 function $531($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $46_1 = 0, $54_1 = 0, $53_1 = 0, $50_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $53_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $53_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 6889 | 0, 731 | 0, 7950 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 6889 | 0, 732 | 0, 7950 | 0);
   abort();
  }
  label$5 : {
   if ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0) {
    break label$5
   }
   fimport$1(7291 | 0, 6889 | 0, 733 | 0, 7950 | 0);
   abort();
  }
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $530(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, ($515(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) - 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  $46_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($46_1 + 8 | 0) >> 2] = (HEAP32[($46_1 + 8 | 0) >> 2] | 0) + -4 | 0;
  $50_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$6 : {
   $54_1 = $3_1 + 16 | 0;
   if ($54_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $54_1;
  }
  return $50_1 | 0;
 }
 
 function $532($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $55_1 = 0, $54_1 = 0, $51_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 32 | 0;
  label$1 : {
   $54_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $54_1;
  }
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $515(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    label$5 : {
     if (!((HEAP32[((HEAP32[(HEAP32[($6_1 + 24 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     break label$3;
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  label$6 : {
   label$7 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    label$8 : {
     if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$8
     }
     HEAP32[(HEAP32[($6_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($6_1 + 28 | 0) >> 2] = 1;
    break label$6;
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = 0;
  }
  $51_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  label$9 : {
   $55_1 = $6_1 + 32 | 0;
   if ($55_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $55_1;
  }
  return $51_1 | 0;
 }
 
 function $533($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = +$3_1;
  var $6_1 = 0, $355_1 = 0.0, $38_1 = 0, $359_1 = 0.0, $98_1 = 0, $130_1 = 0, $371_1 = 0.0, $152_1 = 0, $160_1 = 0, $377_1 = 0.0, $183_1 = 0, $191_1 = 0, $382_1 = 0.0, $228_1 = 0, $385_1 = 0.0, $240_1 = 0, $272_1 = 0, $397_1 = 0.0, $294_1 = 0, $302_1 = 0, $403_1 = 0.0, $325_1 = 0, $333_1 = 0, $354_1 = 0, $353_1 = 0, $34_1 = 0, $358_1 = 0.0, $374_1 = 0.0, $159_1 = 0, $380_1 = 0.0, $190_1 = 0, $381_1 = 0.0, $400_1 = 0.0, $301_1 = 0, $406_1 = 0.0, $332_1 = 0, $350_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 96 | 0;
  label$1 : {
   $353_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $353_1;
  }
  HEAP32[($6_1 + 88 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 84 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 80 | 0) >> 2] = $2_1;
  HEAPF64[($6_1 + 72 | 0) >> 3] = $3_1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $490(HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 68 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   if ((HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(7027 | 0, 8002 | 0, 147 | 0, 8022 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($6_1 + 88 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(7059 | 0, 8002 | 0, 148 | 0, 8022 | 0);
   abort();
  }
  $34_1 = $6_1 + 56 | 0;
  $355_1 = +HEAPF64[($6_1 + 72 | 0) >> 3];
  label$5 : {
   label$6 : {
    if (!(Math_abs($355_1) < 2147483648.0)) {
     break label$6
    }
    $38_1 = ~~$355_1;
    break label$5;
   }
   $38_1 = -2147483648;
  }
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $486($34_1 | 0, $38_1 + 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  label$7 : {
   label$8 : {
    if (!(HEAP32[($6_1 + 28 | 0) >> 2] | 0)) {
     break label$8
    }
    $28(6997 | 0, 8002 | 0, 150 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 92 | 0) >> 2] = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
    break label$7;
   }
   $33(1 | 0, $6_1 + 56 | 0 | 0);
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $486($6_1 + 40 | 0 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
   label$9 : {
    if (!(HEAP32[($6_1 + 24 | 0) >> 2] | 0)) {
     break label$9
    }
    $28(6997 | 0, 8002 | 0, 151 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 92 | 0) >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
    break label$7;
   }
   $33(1 | 0, $6_1 + 40 | 0 | 0);
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $494(HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
   label$10 : {
    if (!(HEAP32[($6_1 + 20 | 0) >> 2] | 0)) {
     break label$10
    }
    $28(6997 | 0, 8002 | 0, 152 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($6_1 + 92 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
    break label$7;
   }
   HEAP32[($6_1 + 36 | 0) >> 2] = 0;
   label$11 : {
    label$12 : while (1) {
     if (!((HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$11
     }
     $358_1 = +(0 | 0);
     $359_1 = +HEAPF64[((HEAP32[(HEAP32[($6_1 + 84 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$13 : {
      label$14 : {
       if (!(Math_abs($359_1) < 2147483648.0)) {
        break label$14
       }
       $98_1 = ~~$359_1;
       break label$13;
      }
      $98_1 = -2147483648;
     }
     HEAP32[($6_1 + 16 | 0) >> 2] = $98_1;
     label$15 : {
      if (!(+HEAPF64[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] != $358_1 & 1 | 0)) {
       break label$15
      }
      HEAPF64[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     }
     HEAPF64[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 1 | 0 | 0);
     HEAP32[($6_1 + 36 | 0) >> 2] = (HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     continue label$12;
    };
   }
   $130_1 = 0;
   HEAP32[($6_1 + 32 | 0) >> 2] = $130_1;
   HEAP32[($6_1 + 36 | 0) >> 2] = $130_1;
   label$16 : {
    label$17 : while (1) {
     if (!(+(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) < +HEAPF64[($6_1 + 72 | 0) >> 3] + 1.0 & 1 | 0)) {
      break label$16
     }
     label$18 : {
      if (!(+HEAPF64[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] != +(0 | 0) & 1 | 0)) {
       break label$18
      }
      $371_1 = +HEAPF64[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$19 : {
       label$20 : {
        if (!(Math_abs($371_1) < 2147483648.0)) {
         break label$20
        }
        $152_1 = ~~$371_1;
        break label$19;
       }
       $152_1 = -2147483648;
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $152_1 - 1 | 0;
      $374_1 = +(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0);
      $159_1 = HEAP32[(HEAP32[($6_1 + 80 | 0) >> 2] | 0) >> 2] | 0;
      $160_1 = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
      HEAP32[($6_1 + 32 | 0) >> 2] = $160_1 + 1 | 0;
      HEAPF64[($159_1 + ($160_1 << 3 | 0) | 0) >> 3] = $374_1;
      label$21 : {
       label$22 : while (1) {
        if (!(+HEAPF64[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] != +(0 | 0) & 1 | 0)) {
         break label$21
        }
        $377_1 = +HEAPF64[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$23 : {
         label$24 : {
          if (!(Math_abs($377_1) < 2147483648.0)) {
           break label$24
          }
          $183_1 = ~~$377_1;
          break label$23;
         }
         $183_1 = -2147483648;
        }
        HEAP32[($6_1 + 12 | 0) >> 2] = $183_1 - 1 | 0;
        $380_1 = +(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0);
        $190_1 = HEAP32[(HEAP32[($6_1 + 80 | 0) >> 2] | 0) >> 2] | 0;
        $191_1 = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
        HEAP32[($6_1 + 32 | 0) >> 2] = $191_1 + 1 | 0;
        HEAPF64[($190_1 + ($191_1 << 3 | 0) | 0) >> 3] = $380_1;
        continue label$22;
       };
      }
     }
     HEAP32[($6_1 + 36 | 0) >> 2] = (HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     continue label$17;
    };
   }
   $497($6_1 + 56 | 0 | 0);
   $497($6_1 + 40 | 0 | 0);
   HEAP32[($6_1 + 36 | 0) >> 2] = 0;
   label$25 : {
    label$26 : while (1) {
     if (!((HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$25
     }
     $381_1 = +(0 | 0);
     $382_1 = +HEAPF64[((HEAP32[(HEAP32[($6_1 + 80 | 0) >> 2] | 0) >> 2] | 0) + ((((HEAP32[($6_1 + 68 | 0) >> 2] | 0) - (HEAP32[($6_1 + 36 | 0) >> 2] | 0) | 0) - 1 | 0) << 3 | 0) | 0) >> 3];
     label$27 : {
      label$28 : {
       if (!(Math_abs($382_1) < 2147483648.0)) {
        break label$28
       }
       $228_1 = ~~$382_1;
       break label$27;
      }
      $228_1 = -2147483648;
     }
     HEAP32[($6_1 + 8 | 0) >> 2] = $228_1;
     $385_1 = +HEAPF64[((HEAP32[(HEAP32[($6_1 + 88 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$29 : {
      label$30 : {
       if (!(Math_abs($385_1) < 2147483648.0)) {
        break label$30
       }
       $240_1 = ~~$385_1;
       break label$29;
      }
      $240_1 = -2147483648;
     }
     HEAP32[($6_1 + 4 | 0) >> 2] = $240_1;
     label$31 : {
      if (!(+HEAPF64[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] != $381_1 & 1 | 0)) {
       break label$31
      }
      HEAPF64[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     }
     HEAPF64[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0);
     HEAP32[($6_1 + 36 | 0) >> 2] = (HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     continue label$26;
    };
   }
   $272_1 = 0;
   HEAP32[($6_1 + 32 | 0) >> 2] = $272_1;
   HEAP32[($6_1 + 36 | 0) >> 2] = $272_1;
   label$32 : {
    label$33 : while (1) {
     if (!(+(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) < +HEAPF64[($6_1 + 72 | 0) >> 3] + 1.0 & 1 | 0)) {
      break label$32
     }
     label$34 : {
      if (!(+HEAPF64[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] != +(0 | 0) & 1 | 0)) {
       break label$34
      }
      $397_1 = +HEAPF64[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 36 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
      label$35 : {
       label$36 : {
        if (!(Math_abs($397_1) < 2147483648.0)) {
         break label$36
        }
        $294_1 = ~~$397_1;
        break label$35;
       }
       $294_1 = -2147483648;
      }
      HEAP32[$6_1 >> 2] = $294_1 - 1 | 0;
      $400_1 = +(HEAP32[$6_1 >> 2] | 0 | 0);
      $301_1 = HEAP32[(HEAP32[($6_1 + 80 | 0) >> 2] | 0) >> 2] | 0;
      $302_1 = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
      HEAP32[($6_1 + 32 | 0) >> 2] = $302_1 + 1 | 0;
      HEAPF64[($301_1 + ($302_1 << 3 | 0) | 0) >> 3] = $400_1;
      label$37 : {
       label$38 : while (1) {
        if (!(+HEAPF64[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + ((HEAP32[$6_1 >> 2] | 0) << 3 | 0) | 0) >> 3] != +(0 | 0) & 1 | 0)) {
         break label$37
        }
        $403_1 = +HEAPF64[((HEAP32[($6_1 + 40 | 0) >> 2] | 0) + ((HEAP32[$6_1 >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$39 : {
         label$40 : {
          if (!(Math_abs($403_1) < 2147483648.0)) {
           break label$40
          }
          $325_1 = ~~$403_1;
          break label$39;
         }
         $325_1 = -2147483648;
        }
        HEAP32[$6_1 >> 2] = $325_1 - 1 | 0;
        $406_1 = +(HEAP32[$6_1 >> 2] | 0 | 0);
        $332_1 = HEAP32[(HEAP32[($6_1 + 80 | 0) >> 2] | 0) >> 2] | 0;
        $333_1 = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
        HEAP32[($6_1 + 32 | 0) >> 2] = $333_1 + 1 | 0;
        HEAPF64[($332_1 + ($333_1 << 3 | 0) | 0) >> 3] = $406_1;
        continue label$38;
       };
      }
     }
     HEAP32[($6_1 + 36 | 0) >> 2] = (HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     continue label$33;
    };
   }
   $488($6_1 + 56 | 0 | 0);
   $488($6_1 + 40 | 0 | 0);
   $34(2 | 0);
   HEAP32[($6_1 + 92 | 0) >> 2] = 0;
  }
  $350_1 = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
  label$41 : {
   $354_1 = $6_1 + 96 | 0;
   if ($354_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $354_1;
  }
  return $350_1 | 0;
 }
 
 function $534($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $25_1 = 0, $24_1 = 0, $21_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $24_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $24_1;
  }
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAPF64[($5_1 + 16 | 0) >> 3] = $1_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[(0 + 11880 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    label$5 : {
     if (!(FUNCTION_TABLE[HEAP32[(0 + 11880 | 0) >> 2] | 0](HEAP32[($5_1 + 24 | 0) >> 2] | 0, +HEAPF64[($5_1 + 16 | 0) >> 3], HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 28 | 0) >> 2] = 13;
     break label$3;
    }
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = 0;
  }
  $21_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$6 : {
   $25_1 = $5_1 + 32 | 0;
   if ($25_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  return $21_1 | 0;
 }
 
 function $535($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  return;
 }
 
 function $536($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $249_1 = 0, $9_1 = 0, $16_1 = 0, $70_1 = 0, $277_1 = 0, $6_1 = 0, $17_1 = 0, $31_1 = 0, $71_1 = 0, $85_1 = 0, $148_1 = 0, $317_1 = 0.0, $175_1 = 0, $320_1 = 0.0, $195_1 = 0, $214_1 = 0, $232_1 = 0, $273_1 = 0, $295_1 = 0, $307_1 = 0, $316_1 = 0, $315_1 = 0, $14_1 = 0, $22_1 = 0, $68_1 = 0, $76_1 = 0, $166_1 = 0, $182_1 = 0, $186_1 = 0, $323_1 = 0.0, $231_1 = 0, $286_1 = 0, $312_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 64 | 0;
  label$1 : {
   $315_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $315_1;
  }
  HEAP32[($5_1 + 56 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if ($6_1 >>> 0 > 7 >>> 0) {
      break label$5
     }
     label$6 : {
      switch ($6_1 | 0) {
      default:
       $9_1 = 0;
       HEAP32[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 2] = $9_1;
       HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] = $9_1;
       HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] = $9_1;
       $14_1 = $254(HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] = $14_1;
       break label$4;
      case 1:
       $16_1 = 0;
       $17_1 = 1;
       HEAP32[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 2] = $17_1;
       HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] = $16_1;
       HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] = $16_1;
       $22_1 = $1068($17_1 | 0, 12 | 0) | 0;
       HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] = $22_1;
       label$13 : {
        if (!((HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == ($16_1 | 0) & 1 | 0)) {
         break label$13
        }
        $31_1 = 2;
        $28(8066 | 0, 8042 | 0, 695 | 0, $31_1 | 0) | 0;
        HEAP32[($5_1 + 60 | 0) >> 2] = $31_1;
        break label$3;
       }
       $33(2 | 0, HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
       (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $486(HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
       label$14 : {
        if (!(HEAP32[($5_1 + 20 | 0) >> 2] | 0)) {
         break label$14
        }
        $28(8065 | 0, 8042 | 0, 698 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($5_1 + 60 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
        break label$3;
       }
       $33(1 | 0, HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
       (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $256(HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
       label$15 : {
        if (!(HEAP32[($5_1 + 16 | 0) >> 2] | 0)) {
         break label$15
        }
        $28(8065 | 0, 8042 | 0, 700 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($5_1 + 60 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        break label$3;
       }
       $68_1 = $490(HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] = $68_1;
       $34(2 | 0);
       break label$4;
      case 7:
       $70_1 = 0;
       $71_1 = 1;
       HEAP32[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 2] = $71_1;
       HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] = $70_1;
       HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] = $70_1;
       $76_1 = $1068($71_1 | 0, 12 | 0) | 0;
       HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] = $76_1;
       label$16 : {
        if (!((HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == ($70_1 | 0) & 1 | 0)) {
         break label$16
        }
        $85_1 = 2;
        $28(8066 | 0, 8042 | 0, 710 | 0, $85_1 | 0) | 0;
        HEAP32[($5_1 + 60 | 0) >> 2] = $85_1;
        break label$3;
       }
       $33(2 | 0, HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
       (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $486(HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
       label$17 : {
        if (!(HEAP32[($5_1 + 12 | 0) >> 2] | 0)) {
         break label$17
        }
        $28(8065 | 0, 8042 | 0, 713 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($5_1 + 60 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
        break label$3;
       }
       $33(1 | 0, HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
       (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $486($5_1 + 40 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
       label$18 : {
        if (!(HEAP32[($5_1 + 8 | 0) >> 2] | 0)) {
         break label$18
        }
        $28(8065 | 0, 8042 | 0, 714 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($5_1 + 60 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
        break label$3;
       }
       $33(1 | 0, $5_1 + 40 | 0 | 0);
       (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $256(HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0, $5_1 + 40 | 0 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
       label$19 : {
        if (!(HEAP32[($5_1 + 4 | 0) >> 2] | 0)) {
         break label$19
        }
        $28(8065 | 0, 8042 | 0, 716 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($5_1 + 60 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
        break label$3;
       }
       (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $254(HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
       (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $1068(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, 4 | 0) | 0), HEAP32[(wasm2js_i32$0 + 36 | 0) >> 2] = wasm2js_i32$1;
       label$20 : {
        if (!((HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
         break label$20
        }
        $148_1 = 2;
        $28(8066 | 0, 8042 | 0, 720 | 0, $148_1 | 0) | 0;
        HEAP32[($5_1 + 60 | 0) >> 2] = $148_1;
        break label$3;
       }
       $33(2 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0);
       HEAP32[($5_1 + 32 | 0) >> 2] = 0;
       label$21 : {
        label$22 : while (1) {
         if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) < ($490($5_1 + 40 | 0 | 0) | 0 | 0) & 1 | 0)) {
          break label$21
         }
         $166_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
         $317_1 = +HEAPF64[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         label$23 : {
          label$24 : {
           if (!(Math_abs($317_1) < 2147483648.0)) {
            break label$24
           }
           $175_1 = ~~$317_1;
           break label$23;
          }
          $175_1 = -2147483648;
         }
         label$25 : {
          if (HEAP32[($166_1 + ($175_1 << 2 | 0) | 0) >> 2] | 0) {
           break label$25
          }
          $182_1 = 1;
          HEAP32[($5_1 + 24 | 0) >> 2] = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + -1 | 0;
          $186_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
          $320_1 = +HEAPF64[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 32 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
          label$26 : {
           label$27 : {
            if (!(Math_abs($320_1) < 2147483648.0)) {
             break label$27
            }
            $195_1 = ~~$320_1;
            break label$26;
           }
           $195_1 = -2147483648;
          }
          HEAP32[($186_1 + ($195_1 << 2 | 0) | 0) >> 2] = $182_1;
         }
         HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0;
         continue label$22;
        };
       }
       (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $494(HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       label$28 : {
        if (!(HEAP32[$5_1 >> 2] | 0)) {
         break label$28
        }
        $28(8065 | 0, 8042 | 0, 729 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
        HEAP32[($5_1 + 60 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
        break label$3;
       }
       $214_1 = 0;
       HEAP32[($5_1 + 32 | 0) >> 2] = $214_1;
       HEAP32[($5_1 + 28 | 0) >> 2] = $214_1;
       label$29 : {
        label$30 : while (1) {
         if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$29
         }
         label$31 : {
          if (HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) {
           break label$31
          }
          $323_1 = +(HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
          $231_1 = HEAP32[(HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >> 2] | 0;
          $232_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
          HEAP32[($5_1 + 28 | 0) >> 2] = $232_1 + 1 | 0;
          HEAPF64[($231_1 + ($232_1 << 3 | 0) | 0) >> 3] = $323_1;
         }
         HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) + 1 | 0;
         continue label$30;
        };
       }
       $1064(HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0);
       HEAP32[($5_1 + 36 | 0) >> 2] = 0;
       $488($5_1 + 40 | 0 | 0);
       HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
       $34(4 | 0);
       break label$4;
      case 2:
       $249_1 = 0;
       HEAP32[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 2] = $249_1;
       HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] = $249_1;
       HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] = $249_1;
       HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] = $249_1;
       break label$4;
      case 3:
       HEAP32[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 2] = 0;
       HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 1 | 0;
       label$32 : {
        if (!((HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) >= ($254(HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
         break label$32
        }
        $273_1 = 7;
        $28(8089 | 0, 8042 | 0, 753 | 0, $273_1 | 0) | 0;
        HEAP32[($5_1 + 60 | 0) >> 2] = $273_1;
        break label$3;
       }
       break label$4;
      case 4:
      case 5:
       $277_1 = 0;
       HEAP32[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 2] = 2;
       HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] = $277_1;
       HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] = $277_1;
       HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       $286_1 = $490(HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] = $286_1;
       label$33 : {
        if ($509(HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, +(+($277_1 | 0)), +(+(($254(HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) | 0) - 1 | 0 | 0))) | 0) {
         break label$33
        }
        $295_1 = 7;
        $28(8089 | 0, 8042 | 0, 764 | 0, $295_1 | 0) | 0;
        HEAP32[($5_1 + 60 | 0) >> 2] = $295_1;
        break label$3;
       }
       break label$4;
      case 6:
       break label$6;
      };
     }
     HEAP32[(HEAP32[($5_1 + 52 | 0) >> 2] | 0) >> 2] = 0;
     HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     break label$4;
    }
    $307_1 = 4;
    $28(8131 | 0, 8042 | 0, 774 | 0, $307_1 | 0) | 0;
    HEAP32[($5_1 + 60 | 0) >> 2] = $307_1;
    break label$3;
   }
   HEAP32[($5_1 + 60 | 0) >> 2] = 0;
  }
  $312_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
  label$34 : {
   $316_1 = $5_1 + 64 | 0;
   if ($316_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $316_1;
  }
  return $312_1 | 0;
 }
 
 function $537($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $15_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    if ($5_1 >>> 0 > 2 >>> 0) {
     break label$4
    }
    label$5 : {
     switch ($5_1 | 0) {
     default:
      break label$3;
     case 1:
      break label$5;
     };
    }
    $488(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
    $264(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) | 0;
    break label$3;
   }
  }
  label$7 : {
   $15_1 = $3_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return;
 }
 
 function $538($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $14_1 = 0, $23_1 = 0, $22_1 = 0, $19_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $22_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if ($5_1 >>> 0 > 2 >>> 0) {
      break label$5
     }
     label$6 : {
      switch ($5_1 | 0) {
      default:
       HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = 0;
       break label$4;
      case 1:
       HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = 1;
       break label$4;
      case 2:
       break label$6;
      };
     }
     HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = 2;
     break label$4;
    }
    $14_1 = 4;
    $28(8172 | 0, 8042 | 0, 871 | 0, $14_1 | 0) | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $14_1;
    break label$3;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  $19_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$9 : {
   $23_1 = $4_1 + 16 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return $19_1 | 0;
 }
 
 function $539($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  $538($0_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $4_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return;
 }
 
 function $540($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $31_1 = 0, $30_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $30_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $30_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if ($5_1 >>> 0 < 7 >>> 0) {
        break label$7
       }
       if (($5_1 | 0) == (7 | 0)) {
        break label$6
       }
       if (($5_1 | 0) == (8 | 0)) {
        break label$7
       }
       if (($5_1 + -9 | 0) >>> 0 < 3 >>> 0) {
        break label$5
       }
       break label$4;
      }
      break label$3;
     }
     $488(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
     $1064(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
     HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
     break label$3;
    }
    $488(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
    $1064(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
    HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
    break label$3;
   }
  }
  label$8 : {
   $31_1 = $3_1 + 16 | 0;
   if ($31_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $31_1;
  }
  return;
 }
 
 function $541($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $90_1 = 0, $9_1 = 0, $36_1 = 0, $118_1 = 0, $6_1 = 0, $37_1 = 0, $51_1 = 0, $114_1 = 0, $136_1 = 0, $150_1 = 0, $167_1 = 0, $184_1 = 0, $199_1 = 0, $208_1 = 0, $207_1 = 0, $14_1 = 0, $42_1 = 0, $88_1 = 0, $127_1 = 0, $148_1 = 0, $149_1 = 0, $588_1 = 0, $165_1 = 0, $166_1 = 0, $633_1 = 0, $182_1 = 0, $183_1 = 0, $678_1 = 0, $204_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 96 | 0;
  label$1 : {
   $207_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $207_1;
  }
  HEAP32[($5_1 + 88 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 84 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if ($6_1 >>> 0 > 11 >>> 0) {
      break label$5
     }
     label$6 : {
      switch ($6_1 | 0) {
      default:
       $9_1 = 0;
       HEAP32[(HEAP32[($5_1 + 84 | 0) >> 2] | 0) >> 2] = $9_1;
       HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 4 | 0) >> 2] = $9_1;
       HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 8 | 0) >> 2] = $9_1;
       $14_1 = $249(HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 12 | 0) >> 2] = $14_1;
       break label$4;
      case 1:
       (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $543(HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 84 | 0) >> 2] | 0 | 0, 1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 80 | 0) >> 2] = wasm2js_i32$1;
       label$17 : {
        if (!(HEAP32[($5_1 + 80 | 0) >> 2] | 0)) {
         break label$17
        }
        $28(8065 | 0, 8042 | 0, 1799 | 0, HEAP32[($5_1 + 80 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($5_1 + 92 | 0) >> 2] = HEAP32[($5_1 + 80 | 0) >> 2] | 0;
        break label$3;
       }
       break label$4;
      case 2:
       (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $543(HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 84 | 0) >> 2] | 0 | 0, 2 | 0) | 0), HEAP32[(wasm2js_i32$0 + 76 | 0) >> 2] = wasm2js_i32$1;
       label$18 : {
        if (!(HEAP32[($5_1 + 76 | 0) >> 2] | 0)) {
         break label$18
        }
        $28(8065 | 0, 8042 | 0, 1802 | 0, HEAP32[($5_1 + 76 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($5_1 + 92 | 0) >> 2] = HEAP32[($5_1 + 76 | 0) >> 2] | 0;
        break label$3;
       }
       break label$4;
      case 3:
       $36_1 = 0;
       $37_1 = 1;
       HEAP32[(HEAP32[($5_1 + 84 | 0) >> 2] | 0) >> 2] = $37_1;
       HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 4 | 0) >> 2] = $36_1;
       HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 8 | 0) >> 2] = $36_1;
       $42_1 = $1068($37_1 | 0, 12 | 0) | 0;
       HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 16 | 0) >> 2] = $42_1;
       label$19 : {
        if (!((HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == ($36_1 | 0) & 1 | 0)) {
         break label$19
        }
        $51_1 = 2;
        $28(8066 | 0, 8042 | 0, 1810 | 0, $51_1 | 0) | 0;
        HEAP32[($5_1 + 92 | 0) >> 2] = $51_1;
        break label$3;
       }
       $33(2 | 0, HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
       (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $486(HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 72 | 0) >> 2] = wasm2js_i32$1;
       label$20 : {
        if (!(HEAP32[($5_1 + 72 | 0) >> 2] | 0)) {
         break label$20
        }
        $28(8065 | 0, 8042 | 0, 1813 | 0, HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($5_1 + 92 | 0) >> 2] = HEAP32[($5_1 + 72 | 0) >> 2] | 0;
        break label$3;
       }
       $33(1 | 0, HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
       (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $263(HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 68 | 0) >> 2] = wasm2js_i32$1;
       label$21 : {
        if (!(HEAP32[($5_1 + 68 | 0) >> 2] | 0)) {
         break label$21
        }
        $28(8065 | 0, 8042 | 0, 1815 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($5_1 + 92 | 0) >> 2] = HEAP32[($5_1 + 68 | 0) >> 2] | 0;
        break label$3;
       }
       $88_1 = $490(HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 12 | 0) >> 2] = $88_1;
       $34(2 | 0);
       break label$4;
      case 4:
       $90_1 = 0;
       HEAP32[(HEAP32[($5_1 + 84 | 0) >> 2] | 0) >> 2] = $90_1;
       HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 4 | 0) >> 2] = $90_1;
       HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 8 | 0) >> 2] = $90_1;
       HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 12 | 0) >> 2] = $90_1;
       break label$4;
      case 5:
       HEAP32[(HEAP32[($5_1 + 84 | 0) >> 2] | 0) >> 2] = 0;
       HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 12 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 1 | 0;
       label$22 : {
        if (!((HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) >= ($249(HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
         break label$22
        }
        $114_1 = 7;
        $28(8299 | 0, 8042 | 0, 1831 | 0, $114_1 | 0) | 0;
        HEAP32[($5_1 + 92 | 0) >> 2] = $114_1;
        break label$3;
       }
       break label$4;
      case 6:
      case 7:
       $118_1 = 0;
       HEAP32[(HEAP32[($5_1 + 84 | 0) >> 2] | 0) >> 2] = 2;
       HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 4 | 0) >> 2] = $118_1;
       HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 8 | 0) >> 2] = $118_1;
       HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       $127_1 = $490(HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 12 | 0) >> 2] = $127_1;
       label$23 : {
        if ($509(HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, +(+($118_1 | 0)), +(+(($249(HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0) | 0) - 1 | 0 | 0))) | 0) {
         break label$23
        }
        $136_1 = 7;
        $28(8299 | 0, 8042 | 0, 1842 | 0, $136_1 | 0) | 0;
        HEAP32[($5_1 + 92 | 0) >> 2] = $136_1;
        break label$3;
       }
       break label$4;
      case 8:
       HEAP32[(HEAP32[($5_1 + 84 | 0) >> 2] | 0) >> 2] = 0;
       HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       break label$4;
      case 9:
       $148_1 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
       $149_1 = HEAP32[($5_1 + 84 | 0) >> 2] | 0;
       $150_1 = 8;
       HEAP32[(($5_1 + 8 | 0) + $150_1 | 0) >> 2] = HEAP32[($1_1 + $150_1 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       $588_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $5_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $588_1;
       HEAP32[($5_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $544($148_1 | 0, $5_1 + 8 | 0 | 0, $149_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 64 | 0) >> 2] = wasm2js_i32$1;
       label$24 : {
        if (!(HEAP32[($5_1 + 64 | 0) >> 2] | 0)) {
         break label$24
        }
        $28(8065 | 0, 8042 | 0, 1852 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($5_1 + 92 | 0) >> 2] = HEAP32[($5_1 + 64 | 0) >> 2] | 0;
        break label$3;
       }
       break label$4;
      case 11:
       $165_1 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
       $166_1 = HEAP32[($5_1 + 84 | 0) >> 2] | 0;
       $167_1 = 8;
       HEAP32[(($5_1 + 24 | 0) + $167_1 | 0) >> 2] = HEAP32[($1_1 + $167_1 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       $633_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $5_1;
       HEAP32[($5_1 + 24 | 0) >> 2] = $633_1;
       HEAP32[($5_1 + 28 | 0) >> 2] = i64toi32_i32$0;
       (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $545($165_1 | 0, $5_1 + 24 | 0 | 0, $166_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
       label$25 : {
        if (!(HEAP32[($5_1 + 60 | 0) >> 2] | 0)) {
         break label$25
        }
        $28(8065 | 0, 8042 | 0, 1855 | 0, HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($5_1 + 92 | 0) >> 2] = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
        break label$3;
       }
       break label$4;
      case 10:
       break label$6;
      };
     }
     $182_1 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
     $183_1 = HEAP32[($5_1 + 84 | 0) >> 2] | 0;
     $184_1 = 8;
     HEAP32[(($5_1 + 40 | 0) + $184_1 | 0) >> 2] = HEAP32[($1_1 + $184_1 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $678_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $5_1;
     HEAP32[($5_1 + 40 | 0) >> 2] = $678_1;
     HEAP32[($5_1 + 44 | 0) >> 2] = i64toi32_i32$1;
     (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $546($182_1 | 0, $5_1 + 40 | 0 | 0, $183_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 56 | 0) >> 2] = wasm2js_i32$1;
     label$26 : {
      if (!(HEAP32[($5_1 + 56 | 0) >> 2] | 0)) {
       break label$26
      }
      $28(8065 | 0, 8042 | 0, 1858 | 0, HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($5_1 + 92 | 0) >> 2] = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
      break label$3;
     }
     break label$4;
    }
    $199_1 = 4;
    $28(8131 | 0, 8042 | 0, 1861 | 0, $199_1 | 0) | 0;
    HEAP32[($5_1 + 92 | 0) >> 2] = $199_1;
    break label$3;
   }
   HEAP32[($5_1 + 92 | 0) >> 2] = 0;
  }
  $204_1 = HEAP32[($5_1 + 92 | 0) >> 2] | 0;
  label$27 : {
   $208_1 = $5_1 + 96 | 0;
   if ($208_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $208_1;
  }
  return $204_1 | 0;
 }
 
 function $542($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $15_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    if ($5_1 >>> 0 > 2 >>> 0) {
     break label$4
    }
    label$5 : {
     switch ($5_1 | 0) {
     default:
      break label$3;
     case 1:
      break label$5;
     };
    }
    $488(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
    $264(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) | 0;
    break label$3;
   }
  }
  label$7 : {
   $15_1 = $3_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return;
 }
 
 function $543($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $198_1 = 0, $18_1 = 0, $75_1 = 0, $114_1 = 0, $215_1 = 0.0, $155_1 = 0, $219_1 = 0.0, $177_1 = 0, $182_1 = 0, $214_1 = 0, $213_1 = 0, $146_1 = 0, $168_1 = 0, $208_1 = 0, $210_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 80 | 0;
  label$1 : {
   $213_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $213_1;
  }
  HEAP32[($5_1 + 72 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 68 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 64 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $254(HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 56 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $1068(1 | 0, 12 | 0) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$4
    }
    $18_1 = 2;
    $28(8215 | 0, 8042 | 0, 1599 | 0, $18_1 | 0) | 0;
    HEAP32[($5_1 + 76 | 0) >> 2] = $18_1;
    break label$3;
   }
   $33(2 | 0, HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $486(HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 48 | 0) >> 2] = wasm2js_i32$1;
   label$5 : {
    if (!(HEAP32[($5_1 + 48 | 0) >> 2] | 0)) {
     break label$5
    }
    $28(8065 | 0, 8042 | 0, 1602 | 0, HEAP32[($5_1 + 48 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 76 | 0) >> 2] = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $489(HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, $249(HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 44 | 0) >> 2] = wasm2js_i32$1;
   label$6 : {
    if (!(HEAP32[($5_1 + 44 | 0) >> 2] | 0)) {
     break label$6
    }
    $28(8065 | 0, 8042 | 0, 1603 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 76 | 0) >> 2] = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
    break label$3;
   }
   label$7 : {
    label$8 : {
     if (!($253(HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0) | 0)) {
      break label$8
     }
     (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $486($5_1 + 32 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
     label$9 : {
      if (!(HEAP32[($5_1 + 28 | 0) >> 2] | 0)) {
       break label$9
      }
      $28(8065 | 0, 8042 | 0, 1607 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($5_1 + 76 | 0) >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
      break label$3;
     }
     $33(1 | 0, $5_1 + 32 | 0 | 0);
     HEAP32[($5_1 + 52 | 0) >> 2] = 0;
     label$10 : {
      label$11 : while (1) {
       if (!((HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$10
       }
       $75_1 = $5_1 + 32 | 0;
       $263(HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0, $75_1 | 0, HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0) | 0;
       $512(HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, $75_1 | 0) | 0;
       HEAP32[($5_1 + 52 | 0) >> 2] = (HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 1 | 0;
       continue label$11;
      };
     }
     $488($5_1 + 32 | 0 | 0);
     $34(1 | 0);
     break label$7;
    }
    (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $486($5_1 + 16 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
    label$12 : {
     if (!(HEAP32[($5_1 + 4 | 0) >> 2] | 0)) {
      break label$12
     }
     $28(8065 | 0, 8042 | 0, 1620 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($5_1 + 76 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
     break label$3;
    }
    $33(1 | 0, $5_1 + 16 | 0 | 0);
    (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $1068($249(HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0) | 0 | 0, 4 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
    label$13 : {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$13
     }
     $114_1 = 2;
     $28(8215 | 0, 8042 | 0, 1623 | 0, $114_1 | 0) | 0;
     HEAP32[($5_1 + 76 | 0) >> 2] = $114_1;
     break label$3;
    }
    $33(2 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
    HEAP32[($5_1 + 52 | 0) >> 2] = 0;
    label$14 : {
     label$15 : while (1) {
      if (!((HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$14
      }
      $263(HEAP32[($5_1 + 72 | 0) >> 2] | 0 | 0, $5_1 + 16 | 0 | 0, HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0, 3 | 0) | 0;
      HEAP32[($5_1 + 8 | 0) >> 2] = 0;
      label$16 : {
       label$17 : while (1) {
        if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) < ($490($5_1 + 16 | 0 | 0) | 0 | 0) & 1 | 0)) {
         break label$16
        }
        $146_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
        $215_1 = +HEAPF64[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
        label$18 : {
         label$19 : {
          if (!(Math_abs($215_1) < 2147483648.0)) {
           break label$19
          }
          $155_1 = ~~$215_1;
          break label$18;
         }
         $155_1 = -2147483648;
        }
        label$20 : {
         if (HEAP32[($146_1 + ($155_1 << 2 | 0) | 0) >> 2] | 0) {
          break label$20
         }
         $493(HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, +(+HEAPF64[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3])) | 0;
         $168_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
         $219_1 = +HEAPF64[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
         label$21 : {
          label$22 : {
           if (!(Math_abs($219_1) < 2147483648.0)) {
            break label$22
           }
           $177_1 = ~~$219_1;
           break label$21;
          }
          $177_1 = -2147483648;
         }
         $182_1 = $168_1 + ($177_1 << 2 | 0) | 0;
         HEAP32[$182_1 >> 2] = (HEAP32[$182_1 >> 2] | 0) + 1 | 0;
        }
        HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 1 | 0;
        continue label$17;
       };
      }
      HEAP32[($5_1 + 52 | 0) >> 2] = (HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 1 | 0;
      continue label$15;
     };
    }
    $488($5_1 + 16 | 0 | 0);
    $1064(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
    HEAP32[($5_1 + 12 | 0) >> 2] = 0;
    $34(2 | 0);
   }
   $198_1 = 0;
   HEAP32[(HEAP32[($5_1 + 68 | 0) >> 2] | 0) >> 2] = 1;
   HEAP32[((HEAP32[($5_1 + 68 | 0) >> 2] | 0) + 4 | 0) >> 2] = $198_1;
   HEAP32[((HEAP32[($5_1 + 68 | 0) >> 2] | 0) + 8 | 0) >> 2] = $198_1;
   HEAP32[((HEAP32[($5_1 + 68 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
   $208_1 = $490(HEAP32[((HEAP32[($5_1 + 68 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[((HEAP32[($5_1 + 68 | 0) >> 2] | 0) + 12 | 0) >> 2] = $208_1;
   $34(2 | 0);
   HEAP32[($5_1 + 76 | 0) >> 2] = $198_1;
  }
  $210_1 = HEAP32[($5_1 + 76 | 0) >> 2] | 0;
  label$23 : {
   $214_1 = $5_1 + 80 | 0;
   if ($214_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $214_1;
  }
  return $210_1 | 0;
 }
 
 function $544($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $27_1 = 0, $13_1 = 0, $23_1 = 0, $28_1 = 0, $46_1 = 0, $145_1 = 0.0, $91_1 = 0, $148_1 = 0.0, $107_1 = 0, $142_1 = 0, $141_1 = 0, $37_1 = 0, $138_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 48 | 0;
  label$1 : {
   $141_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $141_1;
  }
  HEAP32[($5_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $490(HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $254(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) % (2 | 0) | 0)) {
     break label$4
    }
    $13_1 = 4;
    $28(8243 | 0, 8042 | 0, 1658 | 0, $13_1 | 0) | 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = $13_1;
    break label$3;
   }
   label$5 : {
    if ($509(HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0, +(+(0 | 0)), +(+((HEAP32[($5_1 + 28 | 0) >> 2] | 0) - 1 | 0 | 0))) | 0) {
     break label$5
    }
    $23_1 = 7;
    $28(8215 | 0, 8042 | 0, 1661 | 0, $23_1 | 0) | 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = $23_1;
    break label$3;
   }
   $27_1 = 0;
   $28_1 = 1;
   HEAP32[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 2] = $28_1;
   HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 4 | 0) >> 2] = $27_1;
   HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 8 | 0) >> 2] = $27_1;
   HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
   $37_1 = $1068($28_1 | 0, 12 | 0) | 0;
   HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 16 | 0) >> 2] = $37_1;
   label$6 : {
    if (!((HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == ($27_1 | 0) & 1 | 0)) {
     break label$6
    }
    $46_1 = 2;
    $28(8215 | 0, 8042 | 0, 1670 | 0, $46_1 | 0) | 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = $46_1;
    break label$3;
   }
   $33(2 | 0, HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $486(HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) / (2 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
   label$7 : {
    if (!(HEAP32[($5_1 + 20 | 0) >> 2] | 0)) {
     break label$7
    }
    $28(8065 | 0, 8042 | 0, 1673 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
   HEAP32[($5_1 + 24 | 0) >> 2] = 0;
   label$8 : {
    label$9 : while (1) {
     if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) < ($490(HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
      break label$8
     }
     $145_1 = +HEAPF64[((HEAP32[(HEAP32[($1_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + (((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 1 | 0) << 3 | 0) | 0) >> 3];
     label$10 : {
      label$11 : {
       if (!(Math_abs($145_1) < 2147483648.0)) {
        break label$11
       }
       $91_1 = ~~$145_1;
       break label$10;
      }
      $91_1 = -2147483648;
     }
     HEAP32[($5_1 + 16 | 0) >> 2] = $91_1;
     $148_1 = +HEAPF64[((HEAP32[(HEAP32[($1_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + ((((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 1 | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
     label$12 : {
      label$13 : {
       if (!(Math_abs($148_1) < 2147483648.0)) {
        break label$13
       }
       $107_1 = ~~$148_1;
       break label$12;
      }
      $107_1 = -2147483648;
     }
     HEAP32[($5_1 + 12 | 0) >> 2] = $107_1;
     (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $259(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, $5_1 + 8 | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
     label$14 : {
      if (!(HEAP32[($5_1 + 4 | 0) >> 2] | 0)) {
       break label$14
      }
      $28(8065 | 0, 8042 | 0, 1681 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      break label$3;
     }
     HEAPF64[((HEAP32[(HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 24 | 0) >> 2] = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 1 | 0;
     continue label$9;
    };
   }
   $34(2 | 0);
   HEAP32[($5_1 + 44 | 0) >> 2] = 0;
  }
  $138_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  label$15 : {
   $142_1 = $5_1 + 48 | 0;
   if ($142_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $142_1;
  }
  return $138_1 | 0;
 }
 
 function $545($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $27_1 = 0, $13_1 = 0, $23_1 = 0, $28_1 = 0, $46_1 = 0, $90_1 = 0, $89_1 = 0, $37_1 = 0, $86_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $89_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $89_1;
  }
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $490(HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $254(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) % (2 | 0) | 0)) {
     break label$4
    }
    $13_1 = 4;
    $28(8243 | 0, 8042 | 0, 1696 | 0, $13_1 | 0) | 0;
    HEAP32[($5_1 + 28 | 0) >> 2] = $13_1;
    break label$3;
   }
   label$5 : {
    if ($509(HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0, +(+(0 | 0)), +(+((HEAP32[($5_1 + 12 | 0) >> 2] | 0) - 1 | 0 | 0))) | 0) {
     break label$5
    }
    $23_1 = 7;
    $28(8215 | 0, 8042 | 0, 1699 | 0, $23_1 | 0) | 0;
    HEAP32[($5_1 + 28 | 0) >> 2] = $23_1;
    break label$3;
   }
   $27_1 = 0;
   $28_1 = 1;
   HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = $28_1;
   HEAP32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] = $27_1;
   HEAP32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 8 | 0) >> 2] = $27_1;
   HEAP32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 12 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
   $37_1 = $1068($28_1 | 0, 12 | 0) | 0;
   HEAP32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] = $37_1;
   label$6 : {
    if (!((HEAP32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == ($27_1 | 0) & 1 | 0)) {
     break label$6
    }
    $46_1 = 2;
    $28(8215 | 0, 8042 | 0, 1708 | 0, $46_1 | 0) | 0;
    HEAP32[($5_1 + 28 | 0) >> 2] = $46_1;
    break label$3;
   }
   $33(2 | 0, HEAP32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $486(HEAP32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) / (2 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
   label$7 : {
    if (!(HEAP32[($5_1 + 8 | 0) >> 2] | 0)) {
     break label$7
    }
    $28(8065 | 0, 8042 | 0, 1711 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, HEAP32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $262(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
   label$8 : {
    if (!(HEAP32[($5_1 + 4 | 0) >> 2] | 0)) {
     break label$8
    }
    $28(8065 | 0, 8042 | 0, 1715 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    break label$3;
   }
   $34(2 | 0);
   HEAP32[($5_1 + 28 | 0) >> 2] = 0;
  }
  $86_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$9 : {
   $90_1 = $5_1 + 32 | 0;
   if ($90_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $90_1;
  }
  return $86_1 | 0;
 }
 
 function $546($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $31_1 = 0, $16_1 = 0, $32_1 = 0, $48_1 = 0, $139_1 = 0.0, $87_1 = 0, $142_1 = 0.0, $101_1 = 0, $136_1 = 0, $135_1 = 0, $39_1 = 0, $132_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 48 | 0;
  label$1 : {
   $135_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $135_1;
  }
  HEAP32[($5_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $490(HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $254(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if ($509(HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0, +(+(0 | 0)), +(+((HEAP32[($5_1 + 28 | 0) >> 2] | 0) - 1 | 0 | 0))) | 0) {
     break label$4
    }
    $16_1 = 7;
    $28(8215 | 0, 8042 | 0, 1728 | 0, $16_1 | 0) | 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = $16_1;
    break label$3;
   }
   label$5 : {
    label$6 : {
     if (!((HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) <= (1 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = 0;
     break label$5;
    }
    HEAP32[($5_1 + 20 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) - 1 | 0;
   }
   $31_1 = 0;
   $32_1 = 1;
   HEAP32[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 2] = $32_1;
   HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 4 | 0) >> 2] = $31_1;
   HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 8 | 0) >> 2] = $31_1;
   HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
   $39_1 = $1068($32_1 | 0, 12 | 0) | 0;
   HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 16 | 0) >> 2] = $39_1;
   label$7 : {
    if (!((HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == ($31_1 | 0) & 1 | 0)) {
     break label$7
    }
    $48_1 = 2;
    $28(8215 | 0, 8042 | 0, 1743 | 0, $48_1 | 0) | 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = $48_1;
    break label$3;
   }
   $33(2 | 0, HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $486(HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
   label$8 : {
    if (!(HEAP32[($5_1 + 16 | 0) >> 2] | 0)) {
     break label$8
    }
    $28(8065 | 0, 8042 | 0, 1747 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
   HEAP32[($5_1 + 24 | 0) >> 2] = 0;
   label$9 : {
    label$10 : while (1) {
     if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$9
     }
     $139_1 = +HEAPF64[((HEAP32[(HEAP32[($1_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
     label$11 : {
      label$12 : {
       if (!(Math_abs($139_1) < 2147483648.0)) {
        break label$12
       }
       $87_1 = ~~$139_1;
       break label$11;
      }
      $87_1 = -2147483648;
     }
     HEAP32[($5_1 + 12 | 0) >> 2] = $87_1;
     $142_1 = +HEAPF64[((HEAP32[(HEAP32[($1_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + (((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 1 | 0) << 3 | 0) | 0) >> 3];
     label$13 : {
      label$14 : {
       if (!(Math_abs($142_1) < 2147483648.0)) {
        break label$14
       }
       $101_1 = ~~$142_1;
       break label$13;
      }
      $101_1 = -2147483648;
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = $101_1;
     (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $259(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, $5_1 + 4 | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 1 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     label$15 : {
      if (!(HEAP32[$5_1 >> 2] | 0)) {
       break label$15
      }
      $28(8065 | 0, 8042 | 0, 1755 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
      HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
      break label$3;
     }
     HEAPF64[((HEAP32[(HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
     HEAP32[($5_1 + 24 | 0) >> 2] = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 1 | 0;
     continue label$10;
    };
   }
   $34(2 | 0);
   HEAP32[($5_1 + 44 | 0) >> 2] = 0;
  }
  $132_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  label$16 : {
   $136_1 = $5_1 + 48 | 0;
   if ($136_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $136_1;
  }
  return $132_1 | 0;
 }
 
 function $547($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0, $47_1 = 0, $66_1 = 0, $65_1 = 0, $38_1 = 0, $62_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $65_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $65_1;
  }
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$4
    }
    $13_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    break label$3;
   }
   $13_1 = 1;
  }
  HEAP32[$4_1 >> 2] = $13_1;
  label$5 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$5
   }
   fimport$1(8339 | 0, 8349 | 0, 48 | 0, 8427 | 0);
   abort();
  }
  label$6 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$6
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  }
  $38_1 = $1068(HEAP32[$4_1 >> 2] | 0 | 0, 8 | 0) | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = $38_1;
  label$7 : {
   label$8 : {
    if (!((HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$8
    }
    $47_1 = 2;
    $28(8445 | 0, 8349 | 0, 54 | 0, $47_1 | 0) | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $47_1;
    break label$7;
   }
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 3 | 0) | 0;
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  $62_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$9 : {
   $66_1 = $4_1 + 16 | 0;
   if ($66_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $66_1;
  }
  return $62_1 | 0;
 }
 
 function $548($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $23_1 = 0, $31_1 = 0, $30_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $30_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $30_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(8339 | 0, 8349 | 0, 76 | 0, 8463 | 0);
   abort();
  }
  label$4 : {
   if (!((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$4
   }
   $23_1 = 0;
   $1064(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0);
   HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] = $23_1;
   HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] = $23_1;
  }
  label$5 : {
   $31_1 = $3_1 + 16 | 0;
   if ($31_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $31_1;
  }
  return;
 }
 
 function $549($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $37_1 = 0, $36_1 = 0, $33_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $36_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $36_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(8339 | 0, 8349 | 0, 151 | 0, 8540 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(8484 | 0, 8349 | 0, 152 | 0, 8540 | 0);
   abort();
  }
  $33_1 = ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) - (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 3 | 0;
  label$5 : {
   $37_1 = $3_1 + 16 | 0;
   if ($37_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $37_1;
  }
  return $33_1 | 0;
 }
 
 function $550($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $51_1 = 0, $50_1 = 0, $47_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $50_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $50_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(8339 | 0, 8349 | 0, 133 | 0, 8506 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(8484 | 0, 8349 | 0, 134 | 0, 8506 | 0);
   abort();
  }
  label$5 : {
   if ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$5
   }
   fimport$1(8525 | 0, 8349 | 0, 135 | 0, 8506 | 0);
   abort();
  }
  $47_1 = (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) & 1 | 0;
  label$6 : {
   $51_1 = $3_1 + 16 | 0;
   if ($51_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $51_1;
  }
  return $47_1 | 0;
 }
 
 function $551($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $33_1 = 0, $32_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $32_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $32_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(8339 | 0, 8349 | 0, 167 | 0, 8558 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(8484 | 0, 8349 | 0, 168 | 0, 8558 | 0);
   abort();
  }
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  label$5 : {
   $33_1 = $3_1 + 16 | 0;
   if ($33_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $33_1;
  }
  return;
 }
 
 function $552($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $4_1 = 0, $37_1 = 0, $54_1 = 0, $98_1 = 0, $105_1 = 0, $114_1 = 0, $113_1 = 0, $110_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $113_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $113_1;
  }
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAPF64[($4_1 + 16 | 0) >> 3] = $1_1;
  label$3 : {
   if ((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(8339 | 0, 8349 | 0, 188 | 0, 8577 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(8484 | 0, 8349 | 0, 189 | 0, 8577 | 0);
   abort();
  }
  label$5 : {
   label$6 : {
    label$7 : {
     if (!((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$7
     }
     $37_1 = 0;
     HEAP32[($4_1 + 12 | 0) >> 2] = $37_1;
     HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
     (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1068((($549(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) << 1 | 0) + 1 | 0 | 0, 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
     label$8 : {
      if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($37_1 | 0) & 1 | 0)) {
       break label$8
      }
      $54_1 = 2;
      $28(8595 | 0, 8349 | 0, 197 | 0, $54_1 | 0) | 0;
      HEAP32[($4_1 + 28 | 0) >> 2] = $54_1;
      break label$5;
     }
     $1070(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0, ($549(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) << 3 | 0 | 0) | 0;
     HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) - (HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 3 | 0) << 3 | 0) | 0;
     HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + (((((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) - (HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 3 | 0) << 1 | 0) << 3 | 0) | 0) + 8 | 0;
     HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     HEAPF64[(HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] = +HEAPF64[($4_1 + 16 | 0) >> 3];
     $98_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
     HEAP32[($98_1 + 8 | 0) >> 2] = (HEAP32[($98_1 + 8 | 0) >> 2] | 0) + 8 | 0;
     $1064(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
     HEAP32[($4_1 + 8 | 0) >> 2] = 0;
     break label$6;
    }
    HEAPF64[(HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3] = +HEAPF64[($4_1 + 16 | 0) >> 3];
    $105_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
    HEAP32[($105_1 + 8 | 0) >> 2] = (HEAP32[($105_1 + 8 | 0) >> 2] | 0) + 8 | 0;
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $110_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$9 : {
   $114_1 = $4_1 + 32 | 0;
   if ($114_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $114_1;
  }
  return $110_1 | 0;
 }
 
 function $553($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $52_1 = 0, $61_1 = 0, $60_1 = 0, $62_1 = 0.0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $60_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $60_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$3
   }
   fimport$1(8339 | 0, 8349 | 0, 232 | 0, 8613 | 0);
   abort();
  }
  label$4 : {
   if ((HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$4
   }
   fimport$1(8484 | 0, 8349 | 0, 233 | 0, 8613 | 0);
   abort();
  }
  label$5 : {
   if ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$5
   }
   fimport$1(8525 | 0, 8349 | 0, 234 | 0, 8613 | 0);
   abort();
  }
  label$6 : {
   if ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0) {
    break label$6
   }
   fimport$1(8630 | 0, 8349 | 0, 235 | 0, 8613 | 0);
   abort();
  }
  $52_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($52_1 + 8 | 0) >> 2] = (HEAP32[($52_1 + 8 | 0) >> 2] | 0) + -8 | 0;
  $62_1 = +HEAPF64[(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 3];
  label$7 : {
   $61_1 = $3_1 + 16 | 0;
   if ($61_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $61_1;
  }
  return +$62_1;
 }
 
 function $554($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $27_1 = 0, $4_1 = 0, $8_1 = 0, $11_1 = 0, $14_1 = 0, $17_1 = 0, $20_1 = 0, $23_1 = 0, $26_1 = 0, $5_1 = 0, $167_1 = 0.0, $148_1 = 0, $147_1 = 0, $80_1 = 0, $157_1 = 0.0, $158_1 = 0.0, $159_1 = 0.0, $160_1 = 0.0, $131_1 = 0, $144_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $4_1 = global$0 - 128 | 0;
  label$1 : {
   $147_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $147_1;
  }
  $5_1 = 0;
  $8_1 = $4_1 + 8 | 0;
  $11_1 = $4_1 + 24 | 0;
  $14_1 = $4_1 + 40 | 0;
  $17_1 = $4_1 + 56 | 0;
  $20_1 = $4_1 + 72 | 0;
  $23_1 = $4_1 + 88 | 0;
  $26_1 = $4_1 + 104 | 0;
  HEAP32[($4_1 + 120 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 116 | 0) >> 2] = $1_1;
  $27_1 = HEAP32[($4_1 + 120 | 0) >> 2] | 0;
  HEAP32[($4_1 + 124 | 0) >> 2] = $27_1;
  $54($27_1 + 72 | 0 | 0) | 0;
  $54($27_1 + 88 | 0 | 0) | 0;
  $555($27_1 + 100 | 0 | 0) | 0;
  $555($27_1 + 112 | 0 | 0) | 0;
  $555($27_1 + 124 | 0 | 0) | 0;
  $555($27_1 + 136 | 0 | 0) | 0;
  $54($27_1 + 148 | 0 | 0) | 0;
  HEAP32[$27_1 >> 2] = HEAP32[($4_1 + 116 | 0) >> 2] | 0;
  HEAP32[($27_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[$27_1 >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAPF64[($27_1 + 56 | 0) >> 3] = +HEAPF64[((HEAP32[$27_1 >> 2] | 0) + 8 | 0) >> 3];
  HEAPF64[($27_1 + 64 | 0) >> 3] = 1.0 - +HEAPF64[($27_1 + 56 | 0) >> 3];
  HEAP32[($27_1 + 84 | 0) >> 2] = $5_1;
  $69($26_1 | 0, HEAP32[($27_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $556($26_1 | 0, $27_1 + 88 | 0 | 0);
  $71($26_1 | 0) | 0;
  $69($23_1 | 0, HEAP32[($27_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $556($23_1 | 0, $27_1 + 72 | 0 | 0);
  $71($23_1 | 0) | 0;
  $557($20_1 | 0, HEAP32[($27_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $558($20_1 | 0, $27_1 + 100 | 0 | 0);
  $324($20_1 | 0) | 0;
  $557($17_1 | 0, HEAP32[($27_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $558($17_1 | 0, $27_1 + 112 | 0 | 0);
  $324($17_1 | 0) | 0;
  $557($14_1 | 0, HEAP32[($27_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $558($14_1 | 0, $27_1 + 124 | 0 | 0);
  $324($14_1 | 0) | 0;
  $557($11_1 | 0, HEAP32[($27_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $558($11_1 | 0, $27_1 + 136 | 0 | 0);
  $324($11_1 | 0) | 0;
  $69($8_1 | 0, HEAP32[($27_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $556($8_1 | 0, $27_1 + 148 | 0 | 0);
  $71($8_1 | 0) | 0;
  HEAPF64[($27_1 + 40 | 0) >> 3] = +HEAPF64[((HEAP32[$27_1 >> 2] | 0) + 72 | 0) >> 3];
  HEAPF64[($27_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[$27_1 >> 2] | 0) + 56 | 0) >> 3];
  HEAPF64[($27_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[$27_1 >> 2] | 0) + 64 | 0) >> 3];
  HEAPF64[($27_1 + 16 | 0) >> 3] = +HEAPF64[((HEAP32[$27_1 >> 2] | 0) + 48 | 0) >> 3];
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[$27_1 >> 2] | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = $5_1;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) < (HEAP32[($27_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $80_1 = HEAP32[$4_1 >> 2] | 0;
    (wasm2js_i32$0 = $72($27_1 + 72 | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $80_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $157_1 = +HEAPF64[((HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3];
    (wasm2js_i32$0 = $323($27_1 + 100 | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0, wasm2js_f64$0 = $157_1), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
    $158_1 = +HEAPF64[((HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3];
    (wasm2js_i32$0 = $323($27_1 + 112 | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0, wasm2js_f64$0 = $158_1), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
    $159_1 = +HEAPF64[((HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 56 | 0) >> 3];
    (wasm2js_i32$0 = $323($27_1 + 124 | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0, wasm2js_f64$0 = $159_1), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
    $160_1 = +HEAPF64[((HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 3];
    (wasm2js_i32$0 = $323($27_1 + 136 | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0, wasm2js_f64$0 = $160_1), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
    $131_1 = $68(HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0;
    (wasm2js_i32$0 = $72($27_1 + 148 | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $131_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  label$5 : {
   label$6 : {
    if (!(+HEAPF64[($27_1 + 16 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
     break label$6
    }
    $167_1 = +HEAPF64[($27_1 + 16 | 0) >> 3] * +$1013(+(+HEAPF64[($27_1 + 16 | 0) >> 3]));
    break label$5;
   }
   $167_1 = +(0 | 0);
  }
  HEAPF64[($27_1 + 8 | 0) >> 3] = $167_1;
  HEAPF64[($27_1 + 48 | 0) >> 3] = +HEAPF64[($27_1 + 8 | 0) >> 3] - 2.0 * +HEAPF64[($27_1 + 24 | 0) >> 3] + +HEAPF64[($27_1 + 32 | 0) >> 3] - +HEAPF64[($27_1 + 40 | 0) >> 3];
  $144_1 = HEAP32[($4_1 + 124 | 0) >> 2] | 0;
  label$7 : {
   $148_1 = $4_1 + 128 | 0;
   if ($148_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $148_1;
  }
  return $144_1 | 0;
 }
 
 function $555($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $325($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $556($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0, $20_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $152($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  $152($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $152($60($5_1 | 0) | 0 | 0, $60(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  $559($62($5_1 | 0) | 0 | 0, $62(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  label$3 : {
   $21_1 = $4_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $21_1;
  }
  return;
 }
 
 function $557($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $19_1 = 0, $18_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
  $325($6_1 | 0) | 0;
  label$3 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$3
   }
   $326($6_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
   $560($6_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  $15_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$4 : {
   $19_1 = $4_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  return $15_1 | 0;
 }
 
 function $558($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0, $20_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $561($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  $561($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $561($448($5_1 | 0) | 0 | 0, $448(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  $562($446($5_1 | 0) | 0 | 0, $446(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  label$3 : {
   $21_1 = $4_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $21_1;
  }
  return;
 }
 
 function $559($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  return;
 }
 
 function $560($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $28_1 = 0, $27_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $27_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $27_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $446($5_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  label$3 : while (1) {
   $450($4_1 | 0, $5_1 | 0, 1 | 0) | 0;
   $646(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, $451(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
   HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 8 | 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + -1 | 0;
   $453($4_1 | 0);
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    continue label$3
   }
   break label$3;
  };
  label$4 : {
   $28_1 = $4_1 + 16 | 0;
   if ($28_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $28_1;
  }
  return;
 }
 
 function $561($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $21_1 = 0, $20_1 = 0, $13_1 = 0, $16_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[($649(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  $13_1 = HEAP32[($649(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = $13_1;
  $16_1 = HEAP32[($649($4_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = $16_1;
  label$3 : {
   $21_1 = $4_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $21_1;
  }
  return;
 }
 
 function $562($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  return;
 }
 
 function $563($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $22_1 = 0, $21_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $21_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $21_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $71($4_1 + 148 | 0 | 0) | 0;
  $324($4_1 + 136 | 0 | 0) | 0;
  $324($4_1 + 124 | 0 | 0) | 0;
  $324($4_1 + 112 | 0 | 0) | 0;
  $324($4_1 + 100 | 0 | 0) | 0;
  $71($4_1 + 88 | 0 | 0) | 0;
  $71($4_1 + 72 | 0 | 0) | 0;
  label$3 : {
   $22_1 = $3_1 + 16 | 0;
   if ($22_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  return $4_1 | 0;
 }
 
 function $564($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $15_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if (($5_1 | 0) == (0 | 0) & 1 | 0) {
    break label$3
   }
   FUNCTION_TABLE[21]($5_1) | 0;
   $1017($5_1 | 0);
  }
  label$4 : {
   $15_1 = $3_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return;
 }
 
 function $565($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $587_1 = 0, $54_1 = 0, $145_1 = 0, $224_1 = 0, $314_1 = 0, $558_1 = 0, $1429 = 0.0, $635_1 = 0, $75_1 = 0, $1333 = 0.0, $220_1 = 0, $311_1 = 0, $360_1 = 0, $384_1 = 0, $412_1 = 0, $415_1 = 0, $433_1 = 0, $449_1 = 0, $515_1 = 0, $518_1 = 0, $1422 = 0.0, $624_1 = 0, $1462 = 0.0, $1473 = 0.0, $1483 = 0.0, $1511 = 0.0, $1539 = 0.0, $1555 = 0.0, $1571 = 0.0, $1611 = 0.0, $1651 = 0.0, $1680 = 0.0, $1689 = 0.0, $1707 = 0.0, $1722 = 0.0, $1104 = 0, $1114 = 0, $1124 = 0, $1134 = 0, $1145 = 0, $1157 = 0, $1167 = 0, $1177 = 0, $1187 = 0, $1198 = 0, $1771 = 0.0, $1780 = 0.0, $1798 = 0.0, $1813 = 0.0, $1825 = 0.0, $1332 = 0, $1331 = 0, $36_1 = 0, $66_1 = 0, $69_1 = 0, $86_1 = 0, $151_1 = 0, $154_1 = 0, $1335 = 0.0, $230_1 = 0, $233_1 = 0, $1339 = 0.0, $1341 = 0.0, $321_1 = 0, $324_1 = 0, $1345 = 0.0, $1356 = 0.0, $1371 = 0.0, $1382 = 0.0, $1393 = 0.0, $565_1 = 0, $603_1 = 0, $1425 = 0.0, $1426 = 0.0, $614_1 = 0, $1427 = 0.0, $1428 = 0.0, $1477 = 0.0, $1487 = 0.0, $1515 = 0.0, $1559 = 0.0, $1575 = 0.0, $1615 = 0.0, $986_1 = 0, $1672 = 0.0, $1682 = 0.0, $1709 = 0.0, $1733 = 0.0, $1736 = 0.0, $1739 = 0.0, $1742 = 0.0, $1141 = 0, $1749 = 0.0, $1752 = 0.0, $1755 = 0.0, $1758 = 0.0, $1194 = 0, $1763 = 0.0, $1773 = 0.0, $1800 = 0.0, $1306 = 0, $1326 = 0, $1328 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $3_1 = global$0 - 288 | 0;
  label$1 : {
   $1331 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $1331;
  }
  HEAP32[($3_1 + 284 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($3_1 + 284 | 0) >> 2] | 0;
  HEAP8[($3_1 + 283 | 0) >> 0] = 0;
  HEAP32[($3_1 + 276 | 0) >> 2] = HEAP32[(HEAP32[$6_1 >> 2] | 0) >> 2] | 0;
  label$3 : {
   if (!((HEAP32[(($959() | 0) + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
    break label$3
   }
   $960($959() | 0 | 0, fimport$0(0 | 0) | 0 | 0) | 0;
   (wasm2js_i32$0 = $959() | 0, wasm2js_i32$1 = 2), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  }
  $69($3_1 + 264 | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3_1 + 260 | 0) >> 2] = 0;
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($3_1 + 260 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    $36_1 = HEAP32[($3_1 + 260 | 0) >> 2] | 0;
    (wasm2js_i32$0 = $72($3_1 + 264 | 0 | 0, HEAP32[($3_1 + 260 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $36_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    HEAP32[($3_1 + 260 | 0) >> 2] = (HEAP32[($3_1 + 260 | 0) >> 2] | 0) + 1 | 0;
    continue label$5;
   };
  }
  HEAP32[($3_1 + 256 | 0) >> 2] = 0;
  label$6 : {
   label$7 : while (1) {
    if (!((HEAP32[($3_1 + 256 | 0) >> 2] | 0 | 0) < ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
     break label$6
    }
    $54_1 = $3_1 + 264 | 0;
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $961($959() | 0 | 0, HEAP32[($3_1 + 256 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 4 | 0) >> 2] | 0) - 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 252 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = HEAP32[($72($54_1 | 0, HEAP32[($3_1 + 256 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 248 | 0) >> 2] = wasm2js_i32$1;
    $66_1 = HEAP32[($72($54_1 | 0, HEAP32[($3_1 + 252 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
    (wasm2js_i32$0 = $72($54_1 | 0, HEAP32[($3_1 + 256 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $66_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $69_1 = HEAP32[($3_1 + 248 | 0) >> 2] | 0;
    (wasm2js_i32$0 = $72($54_1 | 0, HEAP32[($3_1 + 252 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $69_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    HEAP32[($3_1 + 256 | 0) >> 2] = (HEAP32[($3_1 + 256 | 0) >> 2] | 0) + 1 | 0;
    continue label$7;
   };
  }
  $75_1 = 0;
  HEAP32[($3_1 + 244 | 0) >> 2] = 1;
  $86_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  HEAP32[($3_1 + 228 | 0) >> 2] = $75_1;
  $566($3_1 + 232 | 0 | 0, $86_1 | 0, $3_1 + 228 | 0 | 0) | 0;
  $567($3_1 + 216 | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3_1 + 212 | 0) >> 2] = $75_1;
  label$8 : {
   label$9 : while (1) {
    if (!((HEAP32[($3_1 + 212 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$8
    }
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = HEAP32[($72($3_1 + 264 | 0 | 0, HEAP32[($3_1 + 212 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 208 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = HEAP32[($72($6_1 + 72 | 0 | 0, HEAP32[($3_1 + 208 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 204 | 0) >> 2] = wasm2js_i32$1;
    label$10 : {
     if (!((HEAP32[($3_1 + 244 | 0) >> 2] | 0) >>> 0 > 2147483647 >>> 0 & 1 | 0)) {
      break label$10
     }
     HEAP32[($3_1 + 200 | 0) >> 2] = 0;
     label$11 : {
      label$12 : while (1) {
       if (!((HEAP32[($3_1 + 200 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$11
       }
       (wasm2js_i32$0 = $568($3_1 + 232 | 0 | 0, HEAP32[($3_1 + 200 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       HEAP32[($3_1 + 200 | 0) >> 2] = (HEAP32[($3_1 + 200 | 0) >> 2] | 0) + 1 | 0;
       continue label$12;
      };
     }
     HEAP32[($3_1 + 244 | 0) >> 2] = 1;
    }
    HEAP32[($3_1 + 196 | 0) >> 2] = 0;
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $73((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 192 | 0) >> 2] = wasm2js_i32$1;
    label$13 : {
     label$14 : {
      if (HEAP32[($3_1 + 192 | 0) >> 2] | 0) {
       break label$14
      }
      $1333 = +(0 | 0);
      $145_1 = $3_1 + 216 | 0;
      $151_1 = (HEAP32[($3_1 + 244 | 0) >> 2] | 0) + (HEAP32[($3_1 + 196 | 0) >> 2] | 0) | 0;
      (wasm2js_i32$0 = $568($3_1 + 232 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $151_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      $154_1 = HEAP32[($3_1 + 204 | 0) >> 2] | 0;
      (wasm2js_i32$0 = $569($145_1 | 0, HEAP32[($3_1 + 196 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $154_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      (wasm2js_i32$0 = $569($145_1 | 0, HEAP32[($3_1 + 196 | 0) >> 2] | 0 | 0) | 0, wasm2js_f64$0 = $1333), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
      (wasm2js_i32$0 = $569($145_1 | 0, HEAP32[($3_1 + 196 | 0) >> 2] | 0 | 0) | 0, wasm2js_f64$0 = $1333), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
      HEAP32[($3_1 + 196 | 0) >> 2] = (HEAP32[($3_1 + 196 | 0) >> 2] | 0) + 1 | 0;
      break label$13;
     }
     HEAP32[($3_1 + 188 | 0) >> 2] = 0;
     label$15 : {
      label$16 : while (1) {
       if (!((HEAP32[($3_1 + 188 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 192 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$15
       }
       (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = HEAP32[($72($6_1 + 72 | 0 | 0, HEAP32[($77((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($3_1 + 188 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 184 | 0) >> 2] = wasm2js_i32$1;
       (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = +HEAPF64[(($77((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($3_1 + 188 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 176 | 0) >> 3] = wasm2js_f64$0;
       label$17 : {
        label$18 : {
         if (!((HEAP32[($568($3_1 + 232 | 0 | 0, HEAP32[($3_1 + 184 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) >>> 0 >= (HEAP32[($3_1 + 244 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
          break label$18
         }
         $1335 = +HEAPF64[($3_1 + 176 | 0) >> 3];
         $220_1 = $569($3_1 + 216 | 0 | 0, (HEAP32[($568($3_1 + 232 | 0 | 0, HEAP32[($3_1 + 184 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) - (HEAP32[($3_1 + 244 | 0) >> 2] | 0) | 0 | 0) | 0;
         HEAPF64[($220_1 + 8 | 0) >> 3] = +HEAPF64[($220_1 + 8 | 0) >> 3] + $1335;
         break label$17;
        }
        $224_1 = $3_1 + 216 | 0;
        $230_1 = (HEAP32[($3_1 + 244 | 0) >> 2] | 0) + (HEAP32[($3_1 + 196 | 0) >> 2] | 0) | 0;
        (wasm2js_i32$0 = $568($3_1 + 232 | 0 | 0, HEAP32[($3_1 + 184 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $230_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        $233_1 = HEAP32[($3_1 + 184 | 0) >> 2] | 0;
        (wasm2js_i32$0 = $569($224_1 | 0, HEAP32[($3_1 + 196 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $233_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        $1339 = +HEAPF64[($3_1 + 176 | 0) >> 3];
        (wasm2js_i32$0 = $569($224_1 | 0, HEAP32[($3_1 + 196 | 0) >> 2] | 0 | 0) | 0, wasm2js_f64$0 = $1339), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
        (wasm2js_i32$0 = $569($224_1 | 0, HEAP32[($3_1 + 196 | 0) >> 2] | 0 | 0) | 0, wasm2js_f64$0 = +(0 | 0)), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
        HEAP32[($3_1 + 196 | 0) >> 2] = (HEAP32[($3_1 + 196 | 0) >> 2] | 0) + 1 | 0;
       }
       HEAP32[($3_1 + 188 | 0) >> 2] = (HEAP32[($3_1 + 188 | 0) >> 2] | 0) + 1 | 0;
       continue label$16;
      };
     }
    }
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $73((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 172 | 0) >> 2] = wasm2js_i32$1;
    HEAP32[($3_1 + 168 | 0) >> 2] = 0;
    label$19 : {
     label$20 : while (1) {
      if (!((HEAP32[($3_1 + 168 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 172 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$19
      }
      (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = HEAP32[($72($6_1 + 72 | 0 | 0, HEAP32[($77((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($3_1 + 168 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 164 | 0) >> 2] = wasm2js_i32$1;
      (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = +HEAPF64[(($77((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($3_1 + 168 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 152 | 0) >> 3] = wasm2js_f64$0;
      label$21 : {
       label$22 : {
        if (!((HEAP32[($568($3_1 + 232 | 0 | 0, HEAP32[($3_1 + 164 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) >>> 0 >= (HEAP32[($3_1 + 244 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
         break label$22
        }
        $1341 = +HEAPF64[($3_1 + 152 | 0) >> 3];
        $311_1 = $569($3_1 + 216 | 0 | 0, (HEAP32[($568($3_1 + 232 | 0 | 0, HEAP32[($3_1 + 164 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) - (HEAP32[($3_1 + 244 | 0) >> 2] | 0) | 0 | 0) | 0;
        HEAPF64[($311_1 + 16 | 0) >> 3] = +HEAPF64[($311_1 + 16 | 0) >> 3] + $1341;
        break label$21;
       }
       $314_1 = $3_1 + 216 | 0;
       $321_1 = (HEAP32[($3_1 + 244 | 0) >> 2] | 0) + (HEAP32[($3_1 + 196 | 0) >> 2] | 0) | 0;
       (wasm2js_i32$0 = $568($3_1 + 232 | 0 | 0, HEAP32[($3_1 + 164 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $321_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       $324_1 = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
       (wasm2js_i32$0 = $569($314_1 | 0, HEAP32[($3_1 + 196 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $324_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       (wasm2js_i32$0 = $569($314_1 | 0, HEAP32[($3_1 + 196 | 0) >> 2] | 0 | 0) | 0, wasm2js_f64$0 = +(0 | 0)), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
       $1345 = +HEAPF64[($3_1 + 152 | 0) >> 3];
       (wasm2js_i32$0 = $569($314_1 | 0, HEAP32[($3_1 + 196 | 0) >> 2] | 0 | 0) | 0, wasm2js_f64$0 = $1345), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
       HEAP32[($3_1 + 196 | 0) >> 2] = (HEAP32[($3_1 + 196 | 0) >> 2] | 0) + 1 | 0;
      }
      HEAP32[($3_1 + 168 | 0) >> 2] = (HEAP32[($3_1 + 168 | 0) >> 2] | 0) + 1 | 0;
      continue label$20;
     };
    }
    HEAP32[($3_1 + 148 | 0) >> 2] = 0;
    label$23 : {
     label$24 : while (1) {
      if (!((HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 196 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$23
      }
      (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = HEAP32[($569($3_1 + 216 | 0 | 0, HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 144 | 0) >> 2] = wasm2js_i32$1;
      label$25 : {
       label$26 : {
        if (!((HEAP32[($3_1 + 144 | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$26
        }
        $360_1 = $3_1 + 216 | 0;
        $1356 = (+HEAPF64[($6_1 + 56 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3] + +HEAPF64[($6_1 + 64 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 56 | 0) >> 3]) * (+HEAPF64[($323($6_1 + 136 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 3]);
        $384_1 = $569($360_1 | 0, HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0) | 0;
        HEAPF64[($384_1 + 8 | 0) >> 3] = +HEAPF64[($384_1 + 8 | 0) >> 3] + $1356;
        $1371 = (+HEAPF64[($6_1 + 56 | 0) >> 3] * (+HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3]) + +HEAPF64[($6_1 + 64 | 0) >> 3] * (+HEAPF64[($323($6_1 + 124 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 56 | 0) >> 3])) * +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 3];
        $412_1 = $569($360_1 | 0, HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0) | 0;
        HEAPF64[($412_1 + 16 | 0) >> 3] = +HEAPF64[($412_1 + 16 | 0) >> 3] + $1371;
        break label$25;
       }
       $415_1 = $3_1 + 216 | 0;
       $1382 = (+HEAPF64[($6_1 + 56 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3] + +HEAPF64[($6_1 + 64 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 56 | 0) >> 3]) * +HEAPF64[($323($6_1 + 136 | 0 | 0, HEAP32[($3_1 + 144 | 0) >> 2] | 0 | 0) | 0) >> 3];
       $433_1 = $569($415_1 | 0, HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0) | 0;
       HEAPF64[($433_1 + 8 | 0) >> 3] = +HEAPF64[($433_1 + 8 | 0) >> 3] + $1382;
       $1393 = (+HEAPF64[($6_1 + 56 | 0) >> 3] * +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 144 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($6_1 + 64 | 0) >> 3] * +HEAPF64[($323($6_1 + 124 | 0 | 0, HEAP32[($3_1 + 144 | 0) >> 2] | 0 | 0) | 0) >> 3]) * +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 3];
       $449_1 = $569($415_1 | 0, HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0) | 0;
       HEAPF64[($449_1 + 16 | 0) >> 3] = +HEAPF64[($449_1 + 16 | 0) >> 3] + $1393;
      }
      HEAP32[($3_1 + 148 | 0) >> 2] = (HEAP32[($3_1 + 148 | 0) >> 2] | 0) + 1 | 0;
      continue label$24;
     };
    }
    (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = (+HEAPF64[($6_1 + 56 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3] + +HEAPF64[($6_1 + 64 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 56 | 0) >> 3]) * (+HEAPF64[($323($6_1 + 136 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 3])), HEAPF64[(wasm2js_i32$0 + 136 | 0) >> 3] = wasm2js_f64$0;
    (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = (+HEAPF64[($6_1 + 56 | 0) >> 3] * (+HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3]) + +HEAPF64[($6_1 + 64 | 0) >> 3] * (+HEAPF64[($323($6_1 + 124 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 56 | 0) >> 3])) * +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 128 | 0) >> 3] = wasm2js_f64$0;
    label$27 : {
     if (!((HEAP32[($568($3_1 + 232 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) >>> 0 >= (HEAP32[($3_1 + 244 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$27
     }
     $515_1 = $3_1 + 216 | 0;
     $518_1 = $3_1 + 232 | 0;
     (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = +HEAPF64[(($569($515_1 | 0, (HEAP32[($568($518_1 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) - (HEAP32[($3_1 + 244 | 0) >> 2] | 0) | 0 | 0) | 0) + 8 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 136 | 0) >> 3] = wasm2js_f64$0;
     (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = +HEAPF64[(($569($515_1 | 0, (HEAP32[($568($518_1 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) - (HEAP32[($3_1 + 244 | 0) >> 2] | 0) | 0 | 0) | 0) + 16 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 128 | 0) >> 3] = wasm2js_f64$0;
    }
    label$28 : {
     if (!((HEAP32[($72($6_1 + 148 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) > ($68(HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
      break label$28
     }
     label$29 : {
      if (!((HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$29
      }
      $1422 = +(0 | 0);
      $558_1 = $3_1 + 216 | 0;
      $565_1 = HEAP32[($72($6_1 + 88 | 0 | 0, (HEAP32[($6_1 + 84 | 0) >> 2] | 0) - 1 | 0 | 0) | 0) >> 2] | 0;
      (wasm2js_i32$0 = $569($558_1 | 0, HEAP32[($3_1 + 196 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $565_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      (wasm2js_i32$0 = $569($558_1 | 0, HEAP32[($3_1 + 196 | 0) >> 2] | 0 | 0) | 0, wasm2js_f64$0 = $1422), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
      (wasm2js_i32$0 = $569($558_1 | 0, HEAP32[($3_1 + 196 | 0) >> 2] | 0 | 0) | 0, wasm2js_f64$0 = $1422), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
      HEAP32[($3_1 + 196 | 0) >> 2] = (HEAP32[($3_1 + 196 | 0) >> 2] | 0) + 1 | 0;
     }
    }
    HEAP32[($3_1 + 124 | 0) >> 2] = 0;
    label$30 : {
     label$31 : while (1) {
      if (!((HEAP32[($3_1 + 124 | 0) >> 2] | 0 | 0) < ((HEAP32[($3_1 + 196 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
       break label$30
      }
      $587_1 = $3_1 + 216 | 0;
      (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $961($959() | 0 | 0, HEAP32[($3_1 + 124 | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 196 | 0) >> 2] | 0) - 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 120 | 0) >> 2] = wasm2js_i32$1;
      (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = HEAP32[($569($587_1 | 0, HEAP32[($3_1 + 124 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 116 | 0) >> 2] = wasm2js_i32$1;
      (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = +HEAPF64[(($569($587_1 | 0, HEAP32[($3_1 + 124 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 104 | 0) >> 3] = wasm2js_f64$0;
      (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = +HEAPF64[(($569($587_1 | 0, HEAP32[($3_1 + 124 | 0) >> 2] | 0 | 0) | 0) + 16 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 96 | 0) >> 3] = wasm2js_f64$0;
      $603_1 = HEAP32[($569($587_1 | 0, HEAP32[($3_1 + 120 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
      (wasm2js_i32$0 = $569($587_1 | 0, HEAP32[($3_1 + 124 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $603_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      $1425 = +HEAPF64[(($569($587_1 | 0, HEAP32[($3_1 + 120 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 3];
      (wasm2js_i32$0 = $569($587_1 | 0, HEAP32[($3_1 + 124 | 0) >> 2] | 0 | 0) | 0, wasm2js_f64$0 = $1425), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
      $1426 = +HEAPF64[(($569($587_1 | 0, HEAP32[($3_1 + 120 | 0) >> 2] | 0 | 0) | 0) + 16 | 0) >> 3];
      (wasm2js_i32$0 = $569($587_1 | 0, HEAP32[($3_1 + 124 | 0) >> 2] | 0 | 0) | 0, wasm2js_f64$0 = $1426), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
      $614_1 = HEAP32[($3_1 + 116 | 0) >> 2] | 0;
      (wasm2js_i32$0 = $569($587_1 | 0, HEAP32[($3_1 + 120 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $614_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      $1427 = +HEAPF64[($3_1 + 104 | 0) >> 3];
      (wasm2js_i32$0 = $569($587_1 | 0, HEAP32[($3_1 + 120 | 0) >> 2] | 0 | 0) | 0, wasm2js_f64$0 = $1427), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
      $1428 = +HEAPF64[($3_1 + 96 | 0) >> 3];
      (wasm2js_i32$0 = $569($587_1 | 0, HEAP32[($3_1 + 120 | 0) >> 2] | 0 | 0) | 0, wasm2js_f64$0 = $1428), HEAPF64[(wasm2js_i32$0 + 16 | 0) >> 3] = wasm2js_f64$0;
      HEAP32[($3_1 + 124 | 0) >> 2] = (HEAP32[($3_1 + 124 | 0) >> 2] | 0) + 1 | 0;
      continue label$31;
     };
    }
    $624_1 = 0;
    $1429 = +($624_1 | 0);
    HEAP32[($3_1 + 92 | 0) >> 2] = HEAP32[($3_1 + 204 | 0) >> 2] | 0;
    HEAPF64[($3_1 + 80 | 0) >> 3] = $1429;
    HEAPF64[($3_1 + 72 | 0) >> 3] = $1429;
    HEAPF64[($3_1 + 64 | 0) >> 3] = $1429;
    HEAP32[($3_1 + 60 | 0) >> 2] = $624_1;
    label$32 : {
     label$33 : while (1) {
      if (!((HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 196 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$32
      }
      $635_1 = $3_1 + 216 | 0;
      (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = HEAP32[($569($635_1 | 0, HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 56 | 0) >> 2] = wasm2js_i32$1;
      (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = +HEAPF64[(($569($635_1 | 0, HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 48 | 0) >> 3] = wasm2js_f64$0;
      (wasm2js_i32$0 = $3_1, wasm2js_f64$0 = +HEAPF64[(($569($635_1 | 0, HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0) | 0) + 16 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 40 | 0) >> 3] = wasm2js_f64$0;
      label$34 : {
       if (!((HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$34
       }
       label$35 : {
        label$36 : {
         if (!(+HEAPF64[($6_1 + 16 | 0) >> 3] + +HEAPF64[($3_1 + 136 | 0) >> 3] + +HEAPF64[($3_1 + 128 | 0) >> 3] - +HEAPF64[($3_1 + 48 | 0) >> 3] - +HEAPF64[($3_1 + 40 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
          break label$36
         }
         $1462 = (+HEAPF64[($6_1 + 16 | 0) >> 3] + +HEAPF64[($3_1 + 136 | 0) >> 3] + +HEAPF64[($3_1 + 128 | 0) >> 3] - +HEAPF64[($3_1 + 48 | 0) >> 3] - +HEAPF64[($3_1 + 40 | 0) >> 3]) * +$1013(+(+HEAPF64[($6_1 + 16 | 0) >> 3] + +HEAPF64[($3_1 + 136 | 0) >> 3] + +HEAPF64[($3_1 + 128 | 0) >> 3] - +HEAPF64[($3_1 + 48 | 0) >> 3] - +HEAPF64[($3_1 + 40 | 0) >> 3]));
         break label$35;
        }
        $1462 = +(0 | 0);
       }
       HEAPF64[($3_1 + 32 | 0) >> 3] = $1462 - +HEAPF64[($6_1 + 8 | 0) >> 3];
       label$37 : {
        label$38 : {
         if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0)) {
          break label$38
         }
         $1473 = +HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3]));
         break label$37;
        }
        $1473 = +(0 | 0);
       }
       $1477 = -$1473;
       label$39 : {
        label$40 : {
         if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0)) {
          break label$40
         }
         $1483 = +HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 3] * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 3]));
         break label$39;
        }
        $1483 = +(0 | 0);
       }
       $1487 = $1477 - $1483;
       label$41 : {
        label$42 : {
         if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] + +HEAPF64[($3_1 + 136 | 0) >> 3] + +HEAPF64[($3_1 + 128 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
          break label$42
         }
         $1511 = (+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] + +HEAPF64[($3_1 + 136 | 0) >> 3] + +HEAPF64[($3_1 + 128 | 0) >> 3]) * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] + +HEAPF64[($3_1 + 136 | 0) >> 3] + +HEAPF64[($3_1 + 128 | 0) >> 3]));
         break label$41;
        }
        $1511 = +(0 | 0);
       }
       $1515 = $1487 + $1511;
       label$43 : {
        label$44 : {
         if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] - +HEAPF64[($3_1 + 48 | 0) >> 3] - +HEAPF64[($3_1 + 40 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
          break label$44
         }
         $1539 = (+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] - +HEAPF64[($3_1 + 48 | 0) >> 3] - +HEAPF64[($3_1 + 40 | 0) >> 3]) * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] - +HEAPF64[($3_1 + 48 | 0) >> 3] - +HEAPF64[($3_1 + 40 | 0) >> 3]));
         break label$43;
        }
        $1539 = +(0 | 0);
       }
       HEAPF64[($3_1 + 24 | 0) >> 3] = $1515 + $1539;
       label$45 : {
        label$46 : {
         if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0)) {
          break label$46
         }
         $1555 = (+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3]) * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3]));
         break label$45;
        }
        $1555 = +(0 | 0);
       }
       $1559 = -$1555;
       label$47 : {
        label$48 : {
         if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0)) {
          break label$48
         }
         $1571 = (+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 3]) * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 3]));
         break label$47;
        }
        $1571 = +(0 | 0);
       }
       $1575 = $1559 - $1571;
       label$49 : {
        label$50 : {
         if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3] + +HEAPF64[($3_1 + 136 | 0) >> 3] + +HEAPF64[($3_1 + 128 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
          break label$50
         }
         $1611 = (+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3] + +HEAPF64[($3_1 + 136 | 0) >> 3] + +HEAPF64[($3_1 + 128 | 0) >> 3]) * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3] + +HEAPF64[($3_1 + 136 | 0) >> 3] + +HEAPF64[($3_1 + 128 | 0) >> 3]));
         break label$49;
        }
        $1611 = +(0 | 0);
       }
       $1615 = $1575 + $1611;
       label$51 : {
        label$52 : {
         if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3] - +HEAPF64[($3_1 + 48 | 0) >> 3] - +HEAPF64[($3_1 + 40 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
          break label$52
         }
         $1651 = (+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3] - +HEAPF64[($3_1 + 48 | 0) >> 3] - +HEAPF64[($3_1 + 40 | 0) >> 3]) * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] + +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3] - +HEAPF64[($3_1 + 48 | 0) >> 3] - +HEAPF64[($3_1 + 40 | 0) >> 3]));
         break label$51;
        }
        $1651 = +(0 | 0);
       }
       HEAPF64[($3_1 + 16 | 0) >> 3] = $1615 + $1651;
       HEAPF64[($3_1 + 8 | 0) >> 3] = +HEAPF64[($3_1 + 32 | 0) >> 3] - 2.0 * +HEAPF64[($3_1 + 24 | 0) >> 3] + +HEAPF64[($3_1 + 16 | 0) >> 3];
       label$53 : {
        if (!(+HEAPF64[($3_1 + 8 | 0) >> 3] - +HEAPF64[($3_1 + 64 | 0) >> 3] < -1.0e-10 & 1 | 0)) {
         break label$53
        }
        HEAP32[($3_1 + 92 | 0) >> 2] = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
        HEAPF64[($3_1 + 80 | 0) >> 3] = +HEAPF64[($3_1 + 48 | 0) >> 3];
        HEAPF64[($3_1 + 72 | 0) >> 3] = +HEAPF64[($3_1 + 40 | 0) >> 3];
        HEAPF64[($3_1 + 64 | 0) >> 3] = +HEAPF64[($3_1 + 8 | 0) >> 3];
       }
      }
      HEAP32[($3_1 + 60 | 0) >> 2] = (HEAP32[($3_1 + 60 | 0) >> 2] | 0) + 1 | 0;
      continue label$33;
     };
    }
    label$54 : {
     if (!((HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) != (HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$54
     }
     label$55 : {
      if (HEAP32[($72($6_1 + 148 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) {
       break label$55
      }
      HEAP32[($6_1 + 84 | 0) >> 2] = (HEAP32[($6_1 + 84 | 0) >> 2] | 0) + -1 | 0;
     }
     label$56 : {
      if (!((HEAP32[($72($6_1 + 148 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) == ($68(HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
       break label$56
      }
      $986_1 = HEAP32[($3_1 + 204 | 0) >> 2] | 0;
      (wasm2js_i32$0 = $72($6_1 + 88 | 0 | 0, HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $986_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      HEAP32[($6_1 + 84 | 0) >> 2] = (HEAP32[($6_1 + 84 | 0) >> 2] | 0) + 1 | 0;
     }
     $1672 = +HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3];
     HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[($6_1 + 16 | 0) >> 3] - $1672;
     label$57 : {
      label$58 : {
       if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0)) {
        break label$58
       }
       $1680 = +HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3]));
       break label$57;
      }
      $1680 = +(0 | 0);
     }
     $1682 = $1680;
     label$59 : {
      label$60 : {
       if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0)) {
        break label$60
       }
       $1689 = +HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3]));
       break label$59;
      }
      $1689 = +(0 | 0);
     }
     HEAPF64[($6_1 + 24 | 0) >> 3] = +HEAPF64[($6_1 + 24 | 0) >> 3] - ($1682 + $1689);
     label$61 : {
      label$62 : {
       if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0)) {
        break label$62
       }
       $1707 = (+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3]) * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3]));
       break label$61;
      }
      $1707 = +(0 | 0);
     }
     $1709 = $1707;
     label$63 : {
      label$64 : {
       if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0)) {
        break label$64
       }
       $1722 = (+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3]) * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3]));
       break label$63;
      }
      $1722 = +(0 | 0);
     }
     HEAPF64[($6_1 + 32 | 0) >> 3] = +HEAPF64[($6_1 + 32 | 0) >> 3] - ($1709 + $1722);
     $1733 = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] - +HEAPF64[($3_1 + 136 | 0) >> 3] - +HEAPF64[($3_1 + 128 | 0) >> 3];
     $1104 = $323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0;
     HEAPF64[$1104 >> 3] = +HEAPF64[$1104 >> 3] - $1733;
     $1736 = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3];
     $1114 = $323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0;
     HEAPF64[$1114 >> 3] = +HEAPF64[$1114 >> 3] - $1736;
     $1739 = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 56 | 0) >> 3];
     $1124 = $323($6_1 + 124 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0;
     HEAPF64[$1124 >> 3] = +HEAPF64[$1124 >> 3] - $1739;
     $1742 = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 3];
     $1134 = $323($6_1 + 136 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0;
     HEAPF64[$1134 >> 3] = +HEAPF64[$1134 >> 3] - $1742;
     $1141 = $68(HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0;
     $1145 = $72($6_1 + 148 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[$1145 >> 2] = (HEAP32[$1145 >> 2] | 0) - $1141 | 0;
     $1749 = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] - +HEAPF64[($3_1 + 80 | 0) >> 3] - +HEAPF64[($3_1 + 72 | 0) >> 3];
     $1157 = $323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0;
     HEAPF64[$1157 >> 3] = +HEAPF64[$1157 >> 3] + $1749;
     $1752 = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3];
     $1167 = $323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0;
     HEAPF64[$1167 >> 3] = +HEAPF64[$1167 >> 3] + $1752;
     $1755 = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 56 | 0) >> 3];
     $1177 = $323($6_1 + 124 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0;
     HEAPF64[$1177 >> 3] = +HEAPF64[$1177 >> 3] + $1755;
     $1758 = +HEAPF64[((HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 3];
     $1187 = $323($6_1 + 136 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0;
     HEAPF64[$1187 >> 3] = +HEAPF64[$1187 >> 3] + $1758;
     $1194 = $68(HEAP32[((HEAP32[($3_1 + 276 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 208 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0;
     $1198 = $72($6_1 + 148 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[$1198 >> 2] = (HEAP32[$1198 >> 2] | 0) + $1194 | 0;
     $1763 = +HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3];
     HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[($6_1 + 16 | 0) >> 3] + $1763;
     label$65 : {
      label$66 : {
       if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0)) {
        break label$66
       }
       $1771 = +HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3]));
       break label$65;
      }
      $1771 = +(0 | 0);
     }
     $1773 = $1771;
     label$67 : {
      label$68 : {
       if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0)) {
        break label$68
       }
       $1780 = +HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3]));
       break label$67;
      }
      $1780 = +(0 | 0);
     }
     HEAPF64[($6_1 + 24 | 0) >> 3] = +HEAPF64[($6_1 + 24 | 0) >> 3] + ($1773 + $1780);
     label$69 : {
      label$70 : {
       if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0)) {
        break label$70
       }
       $1798 = (+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3]) * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 204 | 0) >> 2] | 0 | 0) | 0) >> 3]));
       break label$69;
      }
      $1798 = +(0 | 0);
     }
     $1800 = $1798;
     label$71 : {
      label$72 : {
       if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0)) {
        break label$72
       }
       $1813 = (+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3]) * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3]));
       break label$71;
      }
      $1813 = +(0 | 0);
     }
     HEAPF64[($6_1 + 32 | 0) >> 3] = +HEAPF64[($6_1 + 32 | 0) >> 3] + ($1800 + $1813);
     label$73 : {
      label$74 : {
       if (!(+HEAPF64[($6_1 + 16 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
        break label$74
       }
       $1825 = +HEAPF64[($6_1 + 16 | 0) >> 3] * +$1013(+(+HEAPF64[($6_1 + 16 | 0) >> 3]));
       break label$73;
      }
      $1825 = +(0 | 0);
     }
     HEAPF64[($6_1 + 8 | 0) >> 3] = $1825;
     HEAPF64[($6_1 + 48 | 0) >> 3] = +HEAPF64[($6_1 + 8 | 0) >> 3] - 2.0 * +HEAPF64[($6_1 + 24 | 0) >> 3] + +HEAPF64[($6_1 + 32 | 0) >> 3] - +HEAPF64[($6_1 + 40 | 0) >> 3];
     $1306 = HEAP32[($3_1 + 92 | 0) >> 2] | 0;
     (wasm2js_i32$0 = $72($6_1 + 72 | 0 | 0, HEAP32[($3_1 + 208 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $1306), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     HEAP8[($3_1 + 283 | 0) >> 0] = 1;
    }
    HEAP32[($3_1 + 244 | 0) >> 2] = (HEAP32[($3_1 + 244 | 0) >> 2] | 0) + (HEAP32[($6_1 + 4 | 0) >> 2] | 0) | 0;
    HEAP32[($3_1 + 212 | 0) >> 2] = (HEAP32[($3_1 + 212 | 0) >> 2] | 0) + 1 | 0;
    continue label$9;
   };
  }
  $1326 = HEAPU8[($3_1 + 283 | 0) >> 0] | 0;
  $570($3_1 + 216 | 0 | 0) | 0;
  $571($3_1 + 232 | 0 | 0) | 0;
  $71($3_1 + 264 | 0 | 0) | 0;
  $1328 = $1326 & 1 | 0;
  label$75 : {
   $1332 = $3_1 + 288 | 0;
   if ($1332 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $1332;
  }
  return $1328 | 0;
 }
 
 function $566($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $21_1 = 0, $20_1 = 0, $17_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$5_1 >> 2] = $2_1;
  $7_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $7_1;
  $572($7_1 | 0) | 0;
  label$3 : {
   if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$3
   }
   $573($7_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
   $574($7_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
  }
  $17_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  label$4 : {
   $21_1 = $5_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $21_1;
  }
  return $17_1 | 0;
 }
 
 function $567($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $19_1 = 0, $18_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
  $575($6_1 | 0) | 0;
  label$3 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$3
   }
   $576($6_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
   $577($6_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  $15_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$4 : {
   $19_1 = $4_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  return $15_1 | 0;
 }
 
 function $568($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0;
 }
 
 function $569($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 24) | 0 | 0;
 }
 
 function $570($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $578($4_1 | 0);
  $579($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $571($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $580($4_1 | 0);
  $581($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $572($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0, $7_1 = 0, $14_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $7_1 = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $88($8_1 | 0) | 0;
  HEAP32[$8_1 >> 2] = $7_1;
  HEAP32[($8_1 + 4 | 0) >> 2] = $7_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $7_1;
  $650($8_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $8_1 | 0;
 }
 
 function $573($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $16_1 = 0, $26_1 = 0, $25_1 = 0, $21_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $25_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($651($5_1 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$3
   }
   $1024($5_1 | 0);
   abort();
  }
  $16_1 = $653($652($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $16_1;
  HEAP32[$5_1 >> 2] = $16_1;
  $21_1 = (HEAP32[$5_1 >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  (wasm2js_i32$0 = $654($5_1 | 0) | 0, wasm2js_i32$1 = $21_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $655($5_1 | 0, 0 | 0);
  label$4 : {
   $26_1 = $4_1 + 16 | 0;
   if ($26_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $26_1;
  }
  return;
 }
 
 function $574($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $10_1 = 0, $32_1 = 0, $31_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $31_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $31_1;
  }
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $652($6_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  label$3 : while (1) {
   $10_1 = $5_1 + 8 | 0;
   $656($10_1 | 0, $6_1 | 0, 1 | 0) | 0;
   $658(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $657(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
   HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[($6_1 + 4 | 0) >> 2] | 0) + 4 | 0;
   HEAP32[($5_1 + 24 | 0) >> 2] = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + -1 | 0;
   $659($10_1 | 0);
   if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    continue label$3
   }
   break label$3;
  };
  label$4 : {
   $32_1 = $5_1 + 32 | 0;
   if ($32_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $32_1;
  }
  return;
 }
 
 function $575($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0, $7_1 = 0, $14_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $7_1 = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $88($8_1 | 0) | 0;
  HEAP32[$8_1 >> 2] = $7_1;
  HEAP32[($8_1 + 4 | 0) >> 2] = $7_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $7_1;
  $692($8_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $8_1 | 0;
 }
 
 function $576($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $16_1 = 0, $26_1 = 0, $25_1 = 0, $21_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $25_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($693($5_1 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$3
   }
   $1024($5_1 | 0);
   abort();
  }
  $16_1 = $695($694($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $16_1;
  HEAP32[$5_1 >> 2] = $16_1;
  $21_1 = (HEAP32[$5_1 >> 2] | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 24) | 0;
  (wasm2js_i32$0 = $696($5_1 | 0) | 0, wasm2js_i32$1 = $21_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $697($5_1 | 0, 0 | 0);
  label$4 : {
   $26_1 = $4_1 + 16 | 0;
   if ($26_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $26_1;
  }
  return;
 }
 
 function $577($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $28_1 = 0, $27_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $27_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $27_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $694($5_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  label$3 : while (1) {
   $698($4_1 | 0, $5_1 | 0, 1 | 0) | 0;
   $700(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, $699(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
   HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 24 | 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + -1 | 0;
   $701($4_1 | 0);
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    continue label$3
   }
   break label$3;
  };
  label$4 : {
   $28_1 = $4_1 + 16 | 0;
   if ($28_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $28_1;
  }
  return;
 }
 
 function $578($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $24_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $23_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $712($4_1 | 0, $710($4_1 | 0) | 0 | 0, ($710($4_1 | 0) | 0) + Math_imul($711($4_1 | 0) | 0, 24) | 0 | 0, ($710($4_1 | 0) | 0) + Math_imul($727($4_1 | 0) | 0, 24) | 0 | 0, ($710($4_1 | 0) | 0) + Math_imul($711($4_1 | 0) | 0, 24) | 0 | 0);
  label$3 : {
   $24_1 = $3_1 + 16 | 0;
   if ($24_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $24_1;
  }
  return;
 }
 
 function $579($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $19_1 = 0, $18_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $5_1;
  label$3 : {
   if (!((HEAP32[$5_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $728($5_1 | 0);
   $729($694($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $719($5_1 | 0) | 0 | 0);
  }
  $15_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$4 : {
   $19_1 = $3_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  return $15_1 | 0;
 }
 
 function $580($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $24_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $23_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $670($4_1 | 0, $668($4_1 | 0) | 0 | 0, ($668($4_1 | 0) | 0) + (($669($4_1 | 0) | 0) << 2 | 0) | 0 | 0, ($668($4_1 | 0) | 0) + (($684($4_1 | 0) | 0) << 2 | 0) | 0 | 0, ($668($4_1 | 0) | 0) + (($669($4_1 | 0) | 0) << 2 | 0) | 0 | 0);
  label$3 : {
   $24_1 = $3_1 + 16 | 0;
   if ($24_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $24_1;
  }
  return;
 }
 
 function $581($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $19_1 = 0, $18_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $5_1;
  label$3 : {
   if (!((HEAP32[$5_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $685($5_1 | 0);
   $686($652($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $677($5_1 | 0) | 0 | 0);
  }
  $15_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$4 : {
   $19_1 = $3_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  return $15_1 | 0;
 }
 
 function $582($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $151_1 = 0, $154_1 = 0, $652_1 = 0, $658_1 = 0, $41_1 = 0, $67_1 = 0, $131_1 = 0, $324_1 = 0, $330_1 = 0, $350_1 = 0, $356_1 = 0, $423_1 = 0, $426_1 = 0, $526_1 = 0, $532_1 = 0, $552_1 = 0, $558_1 = 0, $625_1 = 0, $628_1 = 0, $649_1 = 0, $680_1 = 0, $679_1 = 0, $681_1 = 0.0, $682_1 = 0.0, $683_1 = 0.0, $684_1 = 0.0, $209_1 = 0, $686_1 = 0.0, $367_1 = 0, $434_1 = 0, $690_1 = 0.0, $569_1 = 0, $636_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $4_1 = global$0 - 464 | 0;
  label$1 : {
   $679_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $679_1;
  }
  HEAP32[($4_1 + 460 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 459 | 0) >> 0] = $1_1;
  $10_1 = HEAP32[($4_1 + 460 | 0) >> 2] | 0;
  $54($4_1 + 440 | 0 | 0) | 0;
  HEAP32[($4_1 + 436 | 0) >> 2] = 0;
  label$3 : {
   label$4 : {
    if (!((HEAPU8[($4_1 + 459 | 0) >> 0] | 0) & 1 | 0)) {
     break label$4
    }
    $583($4_1 + 424 | 0 | 0) | 0;
    HEAP32[($4_1 + 420 | 0) >> 2] = 0;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($4_1 + 420 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      label$7 : {
       if (!((HEAP32[($72($10_1 + 148 | 0 | 0, HEAP32[($4_1 + 420 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
        break label$7
       }
       $41_1 = $4_1 + 400 | 0;
       HEAP32[($4_1 + 436 | 0) >> 2] = (HEAP32[($4_1 + 436 | 0) >> 2] | 0) + 1 | 0;
       $584($41_1 | 0, $323($10_1 + 112 | 0 | 0, HEAP32[($4_1 + 420 | 0) >> 2] | 0 | 0) | 0 | 0, $4_1 + 420 | 0 | 0) | 0;
       (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $585($4_1 + 424 | 0 | 0, $41_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 392 | 0) >> 2] = wasm2js_i32$1;
      }
      HEAP32[($4_1 + 420 | 0) >> 2] = (HEAP32[($4_1 + 420 | 0) >> 2] | 0) + 1 | 0;
      continue label$6;
     };
    }
    $586($4_1 + 384 | 0 | 0, $4_1 + 424 | 0 | 0);
    label$8 : {
     label$9 : while (1) {
      $67_1 = $4_1 + 376 | 0;
      $587($67_1 | 0, $4_1 + 424 | 0 | 0);
      if (!(($588($4_1 + 384 | 0 | 0, $67_1 | 0) | 0) & 1 | 0)) {
       break label$8
      }
      $59($4_1 + 440 | 0 | 0, ($589($4_1 + 384 | 0 | 0) | 0) + 8 | 0 | 0);
      $590($4_1 + 368 | 0 | 0, $4_1 + 384 | 0 | 0, 0 | 0);
      continue label$9;
     };
    }
    $591($4_1 + 424 | 0 | 0) | 0;
    break label$3;
   }
   HEAP32[($4_1 + 364 | 0) >> 2] = 0;
   label$10 : {
    label$11 : while (1) {
     if (!((HEAP32[($4_1 + 364 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$10
     }
     label$12 : {
      if (!((HEAP32[($72($10_1 + 148 | 0 | 0, HEAP32[($4_1 + 364 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$12
      }
      HEAP32[($4_1 + 436 | 0) >> 2] = (HEAP32[($4_1 + 436 | 0) >> 2] | 0) + 1 | 0;
      $59($4_1 + 440 | 0 | 0, $4_1 + 364 | 0 | 0);
     }
     HEAP32[($4_1 + 364 | 0) >> 2] = (HEAP32[($4_1 + 364 | 0) >> 2] | 0) + 1 | 0;
     continue label$11;
    };
   }
  }
  $131_1 = $1015(88 | 0) | 0;
  $279($131_1 | 0, HEAP32[($4_1 + 436 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 360 | 0) >> 2] = $131_1;
  $33(22 | 0, HEAP32[($4_1 + 360 | 0) >> 2] | 0 | 0);
  HEAP32[($4_1 + 356 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 360 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($4_1 + 352 | 0) >> 2] = HEAP32[(HEAP32[$10_1 >> 2] | 0) >> 2] | 0;
  $69($4_1 + 336 | 0 | 0, HEAP32[($10_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 332 | 0) >> 2] = 0;
  label$13 : {
   label$14 : while (1) {
    if (!((HEAP32[($4_1 + 332 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 436 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$13
    }
    $151_1 = $4_1 + 440 | 0;
    $154_1 = $4_1 + 320 | 0;
    $54($154_1 | 0) | 0;
    $556($154_1 | 0, HEAP32[((HEAP32[($4_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 332 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
    $71($154_1 | 0) | 0;
    $681_1 = +HEAPF64[($323($10_1 + 100 | 0 | 0, HEAP32[($72($151_1 | 0, HEAP32[($4_1 + 332 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[((HEAP32[($4_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 332 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] = $681_1;
    $682_1 = +HEAPF64[($323($10_1 + 112 | 0 | 0, HEAP32[($72($151_1 | 0, HEAP32[($4_1 + 332 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[((HEAP32[($4_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 332 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3] = $682_1;
    $683_1 = +HEAPF64[($323($10_1 + 124 | 0 | 0, HEAP32[($72($151_1 | 0, HEAP32[($4_1 + 332 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[((HEAP32[($4_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 332 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 56 | 0) >> 3] = $683_1;
    $684_1 = +HEAPF64[($323($10_1 + 136 | 0 | 0, HEAP32[($72($151_1 | 0, HEAP32[($4_1 + 332 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) >> 3];
    HEAPF64[((HEAP32[((HEAP32[($4_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 332 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 3] = $684_1;
    $209_1 = HEAP32[($4_1 + 332 | 0) >> 2] | 0;
    (wasm2js_i32$0 = $72($4_1 + 336 | 0 | 0, HEAP32[($72($151_1 | 0, HEAP32[($4_1 + 332 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $209_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    HEAP32[($4_1 + 332 | 0) >> 2] = (HEAP32[($4_1 + 332 | 0) >> 2] | 0) + 1 | 0;
    continue label$14;
   };
  }
  $592($4_1 + 304 | 0 | 0, HEAP32[($4_1 + 436 | 0) >> 2] | 0 | 0) | 0;
  $593($4_1 + 296 | 0 | 0) | 0;
  HEAP32[($4_1 + 292 | 0) >> 2] = 0;
  label$15 : {
   label$16 : while (1) {
    if (!((HEAP32[($4_1 + 292 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$15
    }
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[($72($4_1 + 336 | 0 | 0, HEAP32[($72($10_1 + 72 | 0 | 0, HEAP32[($4_1 + 292 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 288 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $594(HEAP32[((HEAP32[($4_1 + 352 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 292 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 280 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $595(HEAP32[((HEAP32[($4_1 + 352 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 292 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 272 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $596(HEAP32[((HEAP32[($4_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 288 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 264 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $597(HEAP32[($4_1 + 280 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 272 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 264 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 256 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $73((HEAP32[((HEAP32[($4_1 + 352 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 292 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 252 | 0) >> 2] = wasm2js_i32$1;
    HEAP32[($4_1 + 248 | 0) >> 2] = 0;
    label$17 : {
     label$18 : while (1) {
      if (!((HEAP32[($4_1 + 248 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 252 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$17
      }
      (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[($77((HEAP32[((HEAP32[($4_1 + 352 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 292 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($4_1 + 248 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 244 | 0) >> 2] = wasm2js_i32$1;
      (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[($72($4_1 + 336 | 0 | 0, HEAP32[($72($10_1 + 72 | 0 | 0, HEAP32[($4_1 + 244 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 240 | 0) >> 2] = wasm2js_i32$1;
      (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = +HEAPF64[(($77((HEAP32[((HEAP32[($4_1 + 352 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 292 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($4_1 + 248 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 232 | 0) >> 3] = wasm2js_f64$0;
      label$19 : {
       if (!((HEAP32[($4_1 + 244 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 292 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$19
       }
       $324_1 = $4_1 + 296 | 0;
       $330_1 = $4_1 + 304 | 0;
       (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $599($598($330_1 | 0, HEAP32[($4_1 + 288 | 0) >> 2] | 0 | 0) | 0 | 0, $4_1 + 240 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 224 | 0) >> 2] = wasm2js_i32$1;
       HEAP32[$324_1 >> 2] = HEAP32[($4_1 + 224 | 0) >> 2] | 0;
       (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $600($598($330_1 | 0, HEAP32[($4_1 + 288 | 0) >> 2] | 0 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 216 | 0) >> 2] = wasm2js_i32$1;
       label$20 : {
        label$21 : {
         if (!(($601($324_1 | 0, $4_1 + 216 | 0 | 0) | 0) & 1 | 0)) {
          break label$21
         }
         $686_1 = +HEAPF64[($4_1 + 232 | 0) >> 3];
         $350_1 = $602($4_1 + 296 | 0 | 0) | 0;
         HEAPF64[($350_1 + 8 | 0) >> 3] = +HEAPF64[($350_1 + 8 | 0) >> 3] + $686_1;
         break label$20;
        }
        $356_1 = $4_1 + 200 | 0;
        $367_1 = $598($4_1 + 304 | 0 | 0, HEAP32[($4_1 + 288 | 0) >> 2] | 0 | 0) | 0;
        $298($356_1 | 0, $4_1 + 240 | 0 | 0, $4_1 + 232 | 0 | 0);
        $603($4_1 + 192 | 0 | 0, $367_1 | 0, $356_1 | 0);
       }
      }
      HEAP32[($4_1 + 248 | 0) >> 2] = (HEAP32[($4_1 + 248 | 0) >> 2] | 0) + 1 | 0;
      continue label$18;
     };
    }
    HEAP32[($4_1 + 292 | 0) >> 2] = (HEAP32[($4_1 + 292 | 0) >> 2] | 0) + 1 | 0;
    continue label$16;
   };
  }
  HEAP32[($4_1 + 188 | 0) >> 2] = 0;
  label$22 : {
   label$23 : while (1) {
    if (!((HEAP32[($4_1 + 188 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 436 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$22
    }
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $604($598($4_1 + 304 | 0 | 0, HEAP32[($4_1 + 188 | 0) >> 2] | 0 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 184 | 0) >> 2] = wasm2js_i32$1;
    HEAP32[($4_1 + 296 | 0) >> 2] = HEAP32[($4_1 + 184 | 0) >> 2] | 0;
    label$24 : {
     label$25 : while (1) {
      (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $600($598($4_1 + 304 | 0 | 0, HEAP32[($4_1 + 188 | 0) >> 2] | 0 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 176 | 0) >> 2] = wasm2js_i32$1;
      if (!(($601($4_1 + 296 | 0 | 0, $4_1 + 176 | 0 | 0) | 0) & 1 | 0)) {
       break label$24
      }
      label$26 : {
       if (!((HEAP32[($602($4_1 + 296 | 0 | 0) | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 188 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$26
       }
       $423_1 = $4_1 + 160 | 0;
       $426_1 = $4_1 + 296 | 0;
       $434_1 = (HEAP32[((HEAP32[($4_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 188 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0;
       $605($423_1 | 0, $602($426_1 | 0) | 0 | 0, ($602($426_1 | 0) | 0) + 8 | 0 | 0);
       $282($434_1 | 0, $423_1 | 0);
      }
      (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $606($4_1 + 296 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 152 | 0) >> 2] = wasm2js_i32$1;
      continue label$25;
     };
    }
    HEAP32[($4_1 + 188 | 0) >> 2] = (HEAP32[($4_1 + 188 | 0) >> 2] | 0) + 1 | 0;
    continue label$23;
   };
  }
  $592($4_1 + 136 | 0 | 0, HEAP32[($4_1 + 436 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 132 | 0) >> 2] = 0;
  label$27 : {
   label$28 : while (1) {
    if (!((HEAP32[($4_1 + 132 | 0) >> 2] | 0 | 0) < (HEAP32[($10_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$27
    }
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[($72($4_1 + 336 | 0 | 0, HEAP32[($72($10_1 + 72 | 0 | 0, HEAP32[($4_1 + 132 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 128 | 0) >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $73((HEAP32[((HEAP32[($4_1 + 352 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 132 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 124 | 0) >> 2] = wasm2js_i32$1;
    HEAP32[($4_1 + 120 | 0) >> 2] = 0;
    label$29 : {
     label$30 : while (1) {
      if (!((HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 124 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$29
      }
      (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[($77((HEAP32[((HEAP32[($4_1 + 352 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 132 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 116 | 0) >> 2] = wasm2js_i32$1;
      (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[($72($4_1 + 336 | 0 | 0, HEAP32[($72($10_1 + 72 | 0 | 0, HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 112 | 0) >> 2] = wasm2js_i32$1;
      (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = +HEAPF64[(($77((HEAP32[((HEAP32[($4_1 + 352 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 132 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 104 | 0) >> 3] = wasm2js_f64$0;
      label$31 : {
       if (!((HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 132 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$31
       }
       $526_1 = $4_1 + 296 | 0;
       $532_1 = $4_1 + 136 | 0;
       (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $599($598($532_1 | 0, HEAP32[($4_1 + 128 | 0) >> 2] | 0 | 0) | 0 | 0, $4_1 + 112 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 96 | 0) >> 2] = wasm2js_i32$1;
       HEAP32[$526_1 >> 2] = HEAP32[($4_1 + 96 | 0) >> 2] | 0;
       (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $600($598($532_1 | 0, HEAP32[($4_1 + 128 | 0) >> 2] | 0 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 88 | 0) >> 2] = wasm2js_i32$1;
       label$32 : {
        label$33 : {
         if (!(($601($526_1 | 0, $4_1 + 88 | 0 | 0) | 0) & 1 | 0)) {
          break label$33
         }
         $690_1 = +HEAPF64[($4_1 + 104 | 0) >> 3];
         $552_1 = $602($4_1 + 296 | 0 | 0) | 0;
         HEAPF64[($552_1 + 8 | 0) >> 3] = +HEAPF64[($552_1 + 8 | 0) >> 3] + $690_1;
         break label$32;
        }
        $558_1 = $4_1 + 72 | 0;
        $569_1 = $598($4_1 + 136 | 0 | 0, HEAP32[($4_1 + 128 | 0) >> 2] | 0 | 0) | 0;
        $298($558_1 | 0, $4_1 + 112 | 0 | 0, $4_1 + 104 | 0 | 0);
        $603($4_1 + 64 | 0 | 0, $569_1 | 0, $558_1 | 0);
       }
      }
      HEAP32[($4_1 + 120 | 0) >> 2] = (HEAP32[($4_1 + 120 | 0) >> 2] | 0) + 1 | 0;
      continue label$30;
     };
    }
    HEAP32[($4_1 + 132 | 0) >> 2] = (HEAP32[($4_1 + 132 | 0) >> 2] | 0) + 1 | 0;
    continue label$28;
   };
  }
  HEAP32[($4_1 + 60 | 0) >> 2] = 0;
  label$34 : {
   label$35 : while (1) {
    if (!((HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 436 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$34
    }
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $604($598($4_1 + 136 | 0 | 0, HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 56 | 0) >> 2] = wasm2js_i32$1;
    HEAP32[($4_1 + 296 | 0) >> 2] = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
    label$36 : {
     label$37 : while (1) {
      (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $600($598($4_1 + 136 | 0 | 0, HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 48 | 0) >> 2] = wasm2js_i32$1;
      if (!(($601($4_1 + 296 | 0 | 0, $4_1 + 48 | 0 | 0) | 0) & 1 | 0)) {
       break label$36
      }
      label$38 : {
       if (!((HEAP32[($602($4_1 + 296 | 0 | 0) | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$38
       }
       $625_1 = $4_1 + 32 | 0;
       $628_1 = $4_1 + 296 | 0;
       $636_1 = (HEAP32[((HEAP32[($4_1 + 356 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 60 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0;
       $605($625_1 | 0, $602($628_1 | 0) | 0 | 0, ($602($628_1 | 0) | 0) + 8 | 0 | 0);
       $282($636_1 | 0, $625_1 | 0);
      }
      (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $606($4_1 + 296 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
      continue label$37;
     };
    }
    HEAP32[($4_1 + 60 | 0) >> 2] = (HEAP32[($4_1 + 60 | 0) >> 2] | 0) + 1 | 0;
    continue label$35;
   };
  }
  $649_1 = 0;
  $652_1 = $4_1 + 8 | 0;
  $54($652_1 | 0) | 0;
  $556($652_1 | 0, $10_1 + 88 | 0 | 0);
  $71($652_1 | 0) | 0;
  HEAP32[($10_1 + 84 | 0) >> 2] = $649_1;
  $317(HEAP32[$10_1 >> 2] | 0 | 0, HEAP32[($4_1 + 360 | 0) >> 2] | 0 | 0);
  HEAP32[($10_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 436 | 0) >> 2] | 0;
  $658_1 = HEAP32[($4_1 + 360 | 0) >> 2] | 0;
  label$39 : {
   if (($658_1 | 0) == ($649_1 | 0) & 1 | 0) {
    break label$39
   }
   $314($658_1 | 0) | 0;
   $1017($658_1 | 0);
  }
  $34(1 | 0);
  $607($4_1 + 136 | 0 | 0) | 0;
  $607($4_1 + 304 | 0 | 0) | 0;
  $71($4_1 + 336 | 0 | 0) | 0;
  $71($4_1 + 440 | 0 | 0) | 0;
  label$40 : {
   $680_1 = $4_1 + 464 | 0;
   if ($680_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $680_1;
  }
  return;
 }
 
 function $583($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $7_1 = 0, $11_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  $6_1 = $3_1 + 8 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $608($6_1 | 0) | 0;
  $609($7_1 | 0, $6_1 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $584($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $15_1 = 0, $14_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $6_1, wasm2js_f64$0 = +HEAPF64[($287(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 3]), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = HEAP32[($310(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   $15_1 = $5_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return $6_1 | 0;
 }
 
 function $585($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $17_1 = 0, $16_1 = 0, $13_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $16_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  HEAP32[($4_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $611(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, $610(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  $612($4_1 + 24 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $13_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  label$3 : {
   $17_1 = $4_1 + 32 | 0;
   if ($17_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $17_1;
  }
  return $13_1 | 0;
 }
 
 function $586($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $613(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  $614($0_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return;
 }
 
 function $587($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $617(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  $614($0_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return;
 }
 
 function $588($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $21_1 = 0, $20_1 = 0, $17_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $20_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $615(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $615(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  $17_1 = ($616($4_1 + 16 | 0 | 0, $4_1 + 8 | 0 | 0) | 0) & 1 | 0;
  label$3 : {
   $21_1 = $4_1 + 32 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $21_1;
  }
  return $17_1 | 0;
 }
 
 function $589($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $619($618(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $590($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $12_1 = 0, $11_1 = 0, i64toi32_i32$1 = 0, $32_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  $32_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $32_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $620($6_1 + 4 | 0 | 0) | 0;
  label$3 : {
   $12_1 = $5_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return;
 }
 
 function $591($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $621($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $592($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $19_1 = 0, $18_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
  $622($6_1 | 0) | 0;
  label$3 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$3
   }
   $623($6_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
   $624($6_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  $15_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$4 : {
   $19_1 = $4_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  return $15_1 | 0;
 }
 
 function $593($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $625($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $594($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $629($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  $7_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $595($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $629($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  $7_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $596($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $12_1 = 0, $11_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $630($3_1 + 8 | 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$3 : {
   $12_1 = $3_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $8_1 | 0;
 }
 
 function $597($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $37_1 = 0, $36_1 = 0, $24_1 = 0, $27_1 = 0, $33_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 64 | 0;
  label$1 : {
   $36_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $36_1;
  }
  HEAP32[($5_1 + 48 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
  $24_1 = $626(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  $27_1 = $626(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $627(HEAP32[$5_1 >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $628($24_1 | 0, $27_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 56 | 0) >> 2] = wasm2js_i32$1;
  $33_1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
  label$3 : {
   $37_1 = $5_1 + 64 | 0;
   if ($37_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $37_1;
  }
  return $33_1 | 0;
 }
 
 function $598($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 12) | 0 | 0;
 }
 
 function $599($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $16_1 = 0, $15_1 = 0, $12_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $15_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  HEAP32[($4_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $631(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  $632($4_1 + 24 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $12_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  label$3 : {
   $16_1 = $4_1 + 32 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  return $12_1 | 0;
 }
 
 function $600($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0, $13_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $634(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $632($3_1 + 8 | 0 | 0, HEAP32[$3_1 >> 2] | 0 | 0) | 0;
  $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $10_1 | 0;
 }
 
 function $601($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0, $12_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = ($633(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  label$3 : {
   $13_1 = $4_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $9_1 | 0;
 }
 
 function $602($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $637($636($635(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $603($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $638($5_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, $331(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  $639($0_1 | 0, $5_1 | 0) | 0;
  label$3 : {
   $13_1 = $5_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $604($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0, $13_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $640(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $632($3_1 + 8 | 0 | 0, HEAP32[$3_1 >> 2] | 0 | 0) | 0;
  $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $10_1 | 0;
 }
 
 function $605($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $641($0_1 | 0, $137(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, $287(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $13_1 = $5_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $606($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0, $14_1 = 0, $13_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $8_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[$8_1 >> 2] | 0;
  $642($8_1 | 0) | 0;
  $10_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$3 : {
   $14_1 = $4_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $10_1 | 0;
 }
 
 function $607($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $643($4_1 | 0);
  $644($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $608($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $609($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0, $20_1 = 0, $19_1 = 0, $15_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $19_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $735($9_1 + 4 | 0 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  $736($9_1 + 8 | 0 | 0, $4_1 + 4 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $15_1 = $737($9_1 | 0) | 0;
  (wasm2js_i32$0 = $738($9_1 | 0) | 0, wasm2js_i32$1 = $15_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$3 : {
   $20_1 = $4_1 + 16 | 0;
   if ($20_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  return $9_1 | 0;
 }
 
 function $610($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $611($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0, $12_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $757(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, $610(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  $9_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$3 : {
   $13_1 = $4_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $9_1 | 0;
 }
 
 function $612($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  $8_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  HEAP32[$8_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $8_1 | 0;
 }
 
 function $613($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0, $13_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $799(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $612($3_1 + 8 | 0 | 0, HEAP32[$3_1 >> 2] | 0 | 0) | 0;
  $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $10_1 | 0;
 }
 
 function $614($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  $7_1 = $4_1 + 8 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  $8_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
  HEAP32[($8_1 + 4 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
  return $8_1 | 0;
 }
 
 function $615($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $616($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0, $12_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = ($802(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  label$3 : {
   $13_1 = $4_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $9_1 | 0;
 }
 
 function $617($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0, $13_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $801(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $612($3_1 + 8 | 0 | 0, HEAP32[$3_1 >> 2] | 0 | 0) | 0;
  $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $10_1 | 0;
 }
 
 function $618($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $16_1 = 0, $15_1 = 0, $12_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $15_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  $6_1 = $3_1 + 8 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[$6_1 >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $12_1 = $807($620($6_1 | 0) | 0 | 0) | 0;
  label$3 : {
   $16_1 = $3_1 + 16 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  return $12_1 | 0;
 }
 
 function $619($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $620($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $804($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $621($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $745($4_1 | 0, $744($4_1 | 0) | 0 | 0);
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $4_1 | 0;
 }
 
 function $622($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0, $7_1 = 0, $14_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $7_1 = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $88($8_1 | 0) | 0;
  HEAP32[$8_1 >> 2] = $7_1;
  HEAP32[($8_1 + 4 | 0) >> 2] = $7_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $7_1;
  $812($8_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $8_1 | 0;
 }
 
 function $623($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $16_1 = 0, $26_1 = 0, $25_1 = 0, $21_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $25_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($813($5_1 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$3
   }
   $1024($5_1 | 0);
   abort();
  }
  $16_1 = $815($814($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $16_1;
  HEAP32[$5_1 >> 2] = $16_1;
  $21_1 = (HEAP32[$5_1 >> 2] | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 12) | 0;
  (wasm2js_i32$0 = $816($5_1 | 0) | 0, wasm2js_i32$1 = $21_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $817($5_1 | 0, 0 | 0);
  label$4 : {
   $26_1 = $4_1 + 16 | 0;
   if ($26_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $26_1;
  }
  return;
 }
 
 function $624($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $28_1 = 0, $27_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $27_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $27_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $814($5_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  label$3 : while (1) {
   $818($4_1 | 0, $5_1 | 0, 1 | 0) | 0;
   $820(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, $819(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
   HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 12 | 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + -1 | 0;
   $821($4_1 | 0);
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0) {
    continue label$3
   }
   break label$3;
  };
  label$4 : {
   $28_1 = $4_1 + 16 | 0;
   if ($28_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $28_1;
  }
  return;
 }
 
 function $625($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = 0;
  return $5_1 | 0;
 }
 
 function $626($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $7_1 = $885($3_1 + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $627($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[$3_1 >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $628($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $35_1 = 0, $34_1 = 0, $16_1 = 0, $31_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $34_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $34_1;
  }
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $16_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $883($882($5_1 + 16 | 0 | 0) | 0 | 0, $16_1 | 0) | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0;
    $884($5_1 + 16 | 0 | 0) | 0;
    continue label$4;
   };
  }
  HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  $31_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  label$5 : {
   $35_1 = $5_1 + 32 | 0;
   if ($35_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $35_1;
  }
  return $31_1 | 0;
 }
 
 function $629($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0, $12_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $880($4_1 + 8 | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
  $9_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$3 : {
   $13_1 = $4_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $9_1 | 0;
 }
 
 function $630($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $11_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $881(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $5_1 | 0;
 }
 
 function $631($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $19_1 = 0, $44_1 = 0, $43_1 = 0, $40_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $43_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $43_1;
  }
  HEAP32[($4_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  $10_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $886($10_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, $867($10_1 | 0) | 0 | 0, $850($10_1 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $634($10_1 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $19_1 = 0;
  label$3 : {
   if (!(($633($4_1 + 8 | 0 | 0, $4_1 | 0) | 0) & 1 | 0)) {
    break label$3
   }
   $19_1 = ($889($887($10_1 | 0) | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, $888($4_1 + 8 | 0 | 0) | 0 | 0) | 0) ^ -1 | 0;
  }
  label$4 : {
   label$5 : {
    if (!($19_1 & 1 | 0)) {
     break label$5
    }
    HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    break label$4;
   }
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $634($10_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  }
  $40_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  label$6 : {
   $44_1 = $4_1 + 32 | 0;
   if ($44_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $44_1;
  }
  return $40_1 | 0;
 }
 
 function $632($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  $8_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  HEAP32[$8_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $8_1 | 0;
 }
 
 function $633($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0, $14_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = (($892(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0;
  label$3 : {
   $15_1 = $4_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return $11_1 | 0;
 }
 
 function $634($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $13_1 = 0, $12_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $891($3_1 + 8 | 0 | 0, $850(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$3 : {
   $13_1 = $3_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $9_1 | 0;
 }
 
 function $635($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $12_1 = 0, $11_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = $897(($895(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 16 | 0 | 0) | 0;
  label$3 : {
   $12_1 = $3_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $8_1 | 0;
 }
 
 function $636($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $637($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $876(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $638($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $899($0_1 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, $331(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  label$3 : {
   $12_1 = $5_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return;
 }
 
 function $639($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $21_1 = 0, $20_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[($900(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $632($6_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = (HEAPU8[($387((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0) | 0) >> 0] | 0) & 1 | 0), HEAP8[(wasm2js_i32$0 + 4 | 0) >> 0] = wasm2js_i32$1;
  label$3 : {
   $21_1 = $4_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $21_1;
  }
  return $6_1 | 0;
 }
 
 function $640($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0, $13_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $891($3_1 + 8 | 0 | 0, HEAP32[($851(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
  $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $10_1 | 0;
 }
 
 function $641($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $15_1 = 0, $14_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = HEAP32[($137(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $6_1, wasm2js_f64$0 = +HEAPF64[($287(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
  label$3 : {
   $15_1 = $5_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return $6_1 | 0;
 }
 
 function $642($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $940($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $643($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $24_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $23_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $832($4_1 | 0, $830($4_1 | 0) | 0 | 0, ($830($4_1 | 0) | 0) + Math_imul($831($4_1 | 0) | 0, 12) | 0 | 0, ($830($4_1 | 0) | 0) + Math_imul($857($4_1 | 0) | 0, 12) | 0 | 0, ($830($4_1 | 0) | 0) + Math_imul($831($4_1 | 0) | 0, 12) | 0 | 0);
  label$3 : {
   $24_1 = $3_1 + 16 | 0;
   if ($24_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $24_1;
  }
  return;
 }
 
 function $644($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $19_1 = 0, $18_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $5_1;
  label$3 : {
   if (!((HEAP32[$5_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $858($5_1 | 0);
   $859($814($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $839($5_1 | 0) | 0 | 0);
  }
  $15_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$4 : {
   $19_1 = $3_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  return $15_1 | 0;
 }
 
 function $645($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $649_1 = 0.0, $658_1 = 0.0, $676_1 = 0.0, $691_1 = 0.0, $369_1 = 0, $379_1 = 0, $389_1 = 0, $399_1 = 0, $410_1 = 0, $422_1 = 0, $432_1 = 0, $442_1 = 0, $452_1 = 0, $463_1 = 0, $740_1 = 0.0, $749_1 = 0.0, $767_1 = 0.0, $782_1 = 0.0, $794_1 = 0.0, $581_1 = 0, $580_1 = 0, $251_1 = 0, $641_1 = 0.0, $651_1 = 0.0, $678_1 = 0.0, $702_1 = 0.0, $705_1 = 0.0, $708_1 = 0.0, $711_1 = 0.0, $406_1 = 0, $718_1 = 0.0, $721_1 = 0.0, $724_1 = 0.0, $727_1 = 0.0, $459_1 = 0, $732_1 = 0.0, $742_1 = 0.0, $769_1 = 0.0, $570_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 112 | 0;
  label$1 : {
   $580_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $580_1;
  }
  HEAP32[($4_1 + 108 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 104 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 108 | 0) >> 2] | 0;
  HEAP32[($4_1 + 100 | 0) >> 2] = HEAP32[(HEAP32[$6_1 >> 2] | 0) >> 2] | 0;
  HEAP32[($4_1 + 96 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4_1 + 96 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 92 | 0) >> 2] = HEAP32[($4_1 + 96 | 0) >> 2] | 0;
    HEAP32[($4_1 + 88 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 104 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    label$5 : {
     if (!((HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = (+HEAPF64[($6_1 + 56 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3] + +HEAPF64[($6_1 + 64 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 56 | 0) >> 3]) * (+HEAPF64[($323($6_1 + 136 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 3])), HEAPF64[(wasm2js_i32$0 + 80 | 0) >> 3] = wasm2js_f64$0;
     (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = (+HEAPF64[($6_1 + 56 | 0) >> 3] * (+HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3]) + +HEAPF64[($6_1 + 64 | 0) >> 3] * (+HEAPF64[($323($6_1 + 124 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] - +HEAPF64[((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 56 | 0) >> 3])) * +HEAPF64[((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 72 | 0) >> 3] = wasm2js_f64$0;
     (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = (+HEAPF64[($6_1 + 56 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3] + +HEAPF64[($6_1 + 64 | 0) >> 3] * +HEAPF64[((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 56 | 0) >> 3]) * +HEAPF64[($323($6_1 + 136 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 64 | 0) >> 3] = wasm2js_f64$0;
     (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = (+HEAPF64[($6_1 + 56 | 0) >> 3] * +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($6_1 + 64 | 0) >> 3] * +HEAPF64[($323($6_1 + 124 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3]) * +HEAPF64[((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 56 | 0) >> 3] = wasm2js_f64$0;
     (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $73((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 52 | 0) >> 2] = wasm2js_i32$1;
     HEAP32[($4_1 + 48 | 0) >> 2] = 0;
     label$6 : {
      label$7 : while (1) {
       if (!((HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$6
       }
       (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[($72($6_1 + 72 | 0 | 0, HEAP32[($77((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 44 | 0) >> 2] = wasm2js_i32$1;
       (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = +HEAPF64[(($77((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 24 | 0 | 0, HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 32 | 0) >> 3] = wasm2js_f64$0;
       label$8 : {
        label$9 : {
         if (!((HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$9
         }
         HEAPF64[($4_1 + 80 | 0) >> 3] = +HEAPF64[($4_1 + 80 | 0) >> 3] + +HEAPF64[($4_1 + 32 | 0) >> 3];
         break label$8;
        }
        label$10 : {
         if (!((HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$10
         }
         HEAPF64[($4_1 + 64 | 0) >> 3] = +HEAPF64[($4_1 + 64 | 0) >> 3] + +HEAPF64[($4_1 + 32 | 0) >> 3];
        }
       }
       HEAP32[($4_1 + 48 | 0) >> 2] = (HEAP32[($4_1 + 48 | 0) >> 2] | 0) + 1 | 0;
       continue label$7;
      };
     }
     (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $73((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
     HEAP32[($4_1 + 24 | 0) >> 2] = 0;
     label$11 : {
      label$12 : while (1) {
       if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$11
       }
       (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[($72($6_1 + 72 | 0 | 0, HEAP32[($77((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
       (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = +HEAPF64[(($77((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
       label$13 : {
        label$14 : {
         if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$14
         }
         HEAPF64[($4_1 + 72 | 0) >> 3] = +HEAPF64[($4_1 + 72 | 0) >> 3] + +HEAPF64[($4_1 + 8 | 0) >> 3];
         break label$13;
        }
        label$15 : {
         if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$15
         }
         HEAPF64[($4_1 + 56 | 0) >> 3] = +HEAPF64[($4_1 + 56 | 0) >> 3] + +HEAPF64[($4_1 + 8 | 0) >> 3];
        }
       }
       HEAP32[($4_1 + 24 | 0) >> 2] = (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 1 | 0;
       continue label$12;
      };
     }
     label$16 : {
      if (HEAP32[($72($6_1 + 148 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) {
       break label$16
      }
      HEAP32[($6_1 + 84 | 0) >> 2] = (HEAP32[($6_1 + 84 | 0) >> 2] | 0) + -1 | 0;
     }
     label$17 : {
      if (!((HEAP32[($72($6_1 + 148 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) == ($68(HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
       break label$17
      }
      $251_1 = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
      (wasm2js_i32$0 = $72($6_1 + 88 | 0 | 0, HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $251_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      HEAP32[($6_1 + 84 | 0) >> 2] = (HEAP32[($6_1 + 84 | 0) >> 2] | 0) + 1 | 0;
     }
     $641_1 = +HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3];
     HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[($6_1 + 16 | 0) >> 3] - $641_1;
     label$18 : {
      label$19 : {
       if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0)) {
        break label$19
       }
       $649_1 = +HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3]));
       break label$18;
      }
      $649_1 = +(0 | 0);
     }
     $651_1 = $649_1;
     label$20 : {
      label$21 : {
       if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0)) {
        break label$21
       }
       $658_1 = +HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3] * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3]));
       break label$20;
      }
      $658_1 = +(0 | 0);
     }
     HEAPF64[($6_1 + 24 | 0) >> 3] = +HEAPF64[($6_1 + 24 | 0) >> 3] - ($651_1 + $658_1);
     label$22 : {
      label$23 : {
       if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0)) {
        break label$23
       }
       $676_1 = (+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3]) * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3]));
       break label$22;
      }
      $676_1 = +(0 | 0);
     }
     $678_1 = $676_1;
     label$24 : {
      label$25 : {
       if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0)) {
        break label$25
       }
       $691_1 = (+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3]) * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3]));
       break label$24;
      }
      $691_1 = +(0 | 0);
     }
     HEAPF64[($6_1 + 32 | 0) >> 3] = +HEAPF64[($6_1 + 32 | 0) >> 3] - ($678_1 + $691_1);
     $702_1 = +HEAPF64[((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] - +HEAPF64[($4_1 + 80 | 0) >> 3] - +HEAPF64[($4_1 + 72 | 0) >> 3];
     $369_1 = $323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0;
     HEAPF64[$369_1 >> 3] = +HEAPF64[$369_1 >> 3] - $702_1;
     $705_1 = +HEAPF64[((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3];
     $379_1 = $323($6_1 + 112 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0;
     HEAPF64[$379_1 >> 3] = +HEAPF64[$379_1 >> 3] - $705_1;
     $708_1 = +HEAPF64[((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 56 | 0) >> 3];
     $389_1 = $323($6_1 + 124 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0;
     HEAPF64[$389_1 >> 3] = +HEAPF64[$389_1 >> 3] - $708_1;
     $711_1 = +HEAPF64[((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 3];
     $399_1 = $323($6_1 + 136 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0;
     HEAPF64[$399_1 >> 3] = +HEAPF64[$399_1 >> 3] - $711_1;
     $406_1 = $68(HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0;
     $410_1 = $72($6_1 + 148 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[$410_1 >> 2] = (HEAP32[$410_1 >> 2] | 0) - $406_1 | 0;
     $718_1 = +HEAPF64[((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 64 | 0) >> 3] - +HEAPF64[($4_1 + 64 | 0) >> 3] - +HEAPF64[($4_1 + 56 | 0) >> 3];
     $422_1 = $323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0;
     HEAPF64[$422_1 >> 3] = +HEAPF64[$422_1 >> 3] + $718_1;
     $721_1 = +HEAPF64[((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 72 | 0) >> 3];
     $432_1 = $323($6_1 + 112 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0;
     HEAPF64[$432_1 >> 3] = +HEAPF64[$432_1 >> 3] + $721_1;
     $724_1 = +HEAPF64[((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 56 | 0) >> 3];
     $442_1 = $323($6_1 + 124 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0;
     HEAPF64[$442_1 >> 3] = +HEAPF64[$442_1 >> 3] + $724_1;
     $727_1 = +HEAPF64[((HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 48 | 0) >> 3];
     $452_1 = $323($6_1 + 136 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0;
     HEAPF64[$452_1 >> 3] = +HEAPF64[$452_1 >> 3] + $727_1;
     $459_1 = $68(HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 96 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0;
     $463_1 = $72($6_1 + 148 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[$463_1 >> 2] = (HEAP32[$463_1 >> 2] | 0) + $459_1 | 0;
     $732_1 = +HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3];
     HEAPF64[($6_1 + 16 | 0) >> 3] = +HEAPF64[($6_1 + 16 | 0) >> 3] + $732_1;
     label$26 : {
      label$27 : {
       if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0)) {
        break label$27
       }
       $740_1 = +HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3]));
       break label$26;
      }
      $740_1 = +(0 | 0);
     }
     $742_1 = $740_1;
     label$28 : {
      label$29 : {
       if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0)) {
        break label$29
       }
       $749_1 = +HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3] * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3]));
       break label$28;
      }
      $749_1 = +(0 | 0);
     }
     HEAPF64[($6_1 + 24 | 0) >> 3] = +HEAPF64[($6_1 + 24 | 0) >> 3] + ($742_1 + $749_1);
     label$30 : {
      label$31 : {
       if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0)) {
        break label$31
       }
       $767_1 = (+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3]) * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) | 0) >> 3]));
       break label$30;
      }
      $767_1 = +(0 | 0);
     }
     $769_1 = $767_1;
     label$32 : {
      label$33 : {
       if (!(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3] > +(0 | 0) & 1 | 0)) {
        break label$33
       }
       $782_1 = (+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3]) * +$1013(+(+HEAPF64[($323($6_1 + 100 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3] + +HEAPF64[($323($6_1 + 112 | 0 | 0, HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) >> 3]));
       break label$32;
      }
      $782_1 = +(0 | 0);
     }
     HEAPF64[($6_1 + 32 | 0) >> 3] = +HEAPF64[($6_1 + 32 | 0) >> 3] + ($769_1 + $782_1);
     label$34 : {
      label$35 : {
       if (!(+HEAPF64[($6_1 + 16 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
        break label$35
       }
       $794_1 = +HEAPF64[($6_1 + 16 | 0) >> 3] * +$1013(+(+HEAPF64[($6_1 + 16 | 0) >> 3]));
       break label$34;
      }
      $794_1 = +(0 | 0);
     }
     HEAPF64[($6_1 + 8 | 0) >> 3] = $794_1;
     HEAPF64[($6_1 + 48 | 0) >> 3] = +HEAPF64[($6_1 + 8 | 0) >> 3] - 2.0 * +HEAPF64[($6_1 + 24 | 0) >> 3] + +HEAPF64[($6_1 + 32 | 0) >> 3] - +HEAPF64[($6_1 + 40 | 0) >> 3];
     $570_1 = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
     (wasm2js_i32$0 = $72($6_1 + 72 | 0 | 0, HEAP32[($4_1 + 96 | 0) >> 2] | 0 | 0) | 0, wasm2js_i32$1 = $570_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    HEAP32[($4_1 + 96 | 0) >> 2] = (HEAP32[($4_1 + 96 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  label$36 : {
   $581_1 = $4_1 + 112 | 0;
   if ($581_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $581_1;
  }
  return;
 }
 
 function $646($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $647(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 32 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $647($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $648(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $648($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAPF64[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 3] = +(0 | 0);
  return;
 }
 
 function $649($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $650($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $11_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $660($5_1 | 0, $90(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $661($5_1 | 0) | 0;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $5_1 | 0;
 }
 
 function $651($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0, $18_1 = 0, $15_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $664($663(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $159() | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  $15_1 = HEAP32[($160($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  label$3 : {
   $19_1 = $3_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  return $15_1 | 0;
 }
 
 function $652($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $666((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $653($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $12_1 = 0, $11_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = $665(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  label$3 : {
   $12_1 = $4_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $8_1 | 0;
 }
 
 function $654($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $667((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $655($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $25_1 = 0, $24_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $24_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $24_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $670($5_1 | 0, $668($5_1 | 0) | 0 | 0, ($668($5_1 | 0) | 0) + (($669($5_1 | 0) | 0) << 2 | 0) | 0 | 0, ($668($5_1 | 0) | 0) + (($669($5_1 | 0) | 0) << 2 | 0) | 0 | 0, ($668($5_1 | 0) | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  label$3 : {
   $25_1 = $4_1 + 16 | 0;
   if ($25_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  return;
 }
 
 function $656($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $657($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $658($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $682(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, $681(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0);
  label$3 : {
   $13_1 = $5_1 + 32 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $659($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $660($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $11_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $90(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$6_1 >> 2] = 0;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $6_1 | 0;
 }
 
 function $661($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $662($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $662($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $663($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $672((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $664($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $671(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $665($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $23_1 = 0, $22_1 = 0, $19_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $22_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$3 : {
   if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 > ($673(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$3
   }
   $174(8654 | 0);
   abort();
  }
  $19_1 = $175((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 2 | 0 | 0, 4 | 0) | 0;
  label$4 : {
   $23_1 = $5_1 + 16 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return $19_1 | 0;
 }
 
 function $666($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $675(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $667($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $676(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $668($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $657(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $669($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $677(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $670($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  return;
 }
 
 function $671($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $5_1 = $673(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $672($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $674(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $673($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 1073741823 | 0;
 }
 
 function $674($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $675($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $676($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $677($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $14_1 = 0, $13_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($678($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 2 | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $10_1 | 0;
 }
 
 function $678($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $679((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $679($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $680(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $680($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $681($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $682($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  $683(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $681(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0);
  label$3 : {
   $13_1 = $5_1 + 32 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $683($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = HEAP32[($5_1 + 8 | 0) >> 2] | 0, wasm2js_i32$1 = HEAP32[($681(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$3 : {
   $13_1 = $5_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $684($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $685($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $687($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return;
 }
 
 function $686($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $688(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  label$3 : {
   $12_1 = $5_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return;
 }
 
 function $687($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $17_1 = 0, $23_1 = 0, $22_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $22_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $14_1 = $652($5_1 | 0) | 0;
    $17_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $17_1;
    $689($14_1 | 0, $657($17_1 | 0) | 0 | 0);
    continue label$4;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$5 : {
   $23_1 = $4_1 + 16 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return;
 }
 
 function $688($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $14_1 = 0, $13_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $113(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0 | 0, 4 | 0);
  label$3 : {
   $14_1 = $5_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return;
 }
 
 function $689($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $690(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 32 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $690($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $691(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $691($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $692($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $11_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $702($5_1 | 0, $90(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $703($5_1 | 0) | 0;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $5_1 | 0;
 }
 
 function $693($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0, $18_1 = 0, $15_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $706($705(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $159() | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  $15_1 = HEAP32[($160($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  label$3 : {
   $19_1 = $3_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  return $15_1 | 0;
 }
 
 function $694($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $708((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $695($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $12_1 = 0, $11_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = $707(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  label$3 : {
   $12_1 = $4_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $8_1 | 0;
 }
 
 function $696($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $709((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $697($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $25_1 = 0, $24_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $24_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $24_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $712($5_1 | 0, $710($5_1 | 0) | 0 | 0, ($710($5_1 | 0) | 0) + Math_imul($711($5_1 | 0) | 0, 24) | 0 | 0, ($710($5_1 | 0) | 0) + Math_imul($711($5_1 | 0) | 0, 24) | 0 | 0, ($710($5_1 | 0) | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 24) | 0 | 0);
  label$3 : {
   $25_1 = $4_1 + 16 | 0;
   if ($25_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  return;
 }
 
 function $698($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $699($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $700($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $723(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 32 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $701($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $702($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $11_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $90(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$6_1 >> 2] = 0;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $6_1 | 0;
 }
 
 function $703($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $704($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $704($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $705($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $714((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $706($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $713(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $707($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $23_1 = 0, $22_1 = 0, $19_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $22_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$3 : {
   if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 > ($715(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$3
   }
   $174(8654 | 0);
   abort();
  }
  $19_1 = $175(Math_imul(HEAP32[($5_1 + 8 | 0) >> 2] | 0, 24) | 0, 8 | 0) | 0;
  label$4 : {
   $23_1 = $5_1 + 16 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return $19_1 | 0;
 }
 
 function $708($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $717(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $709($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $718(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $710($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $699(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $711($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $719(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $712($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  return;
 }
 
 function $713($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $5_1 = $715(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $714($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $716(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $715($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 178956970 | 0;
 }
 
 function $716($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $717($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $718($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $719($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $14_1 = 0, $13_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($720($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (24 | 0) | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $10_1 | 0;
 }
 
 function $720($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $721((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $721($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $722(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $722($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $723($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $724(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $724($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $725(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $4_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return;
 }
 
 function $725($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $11_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = 0;
  $726($5_1 + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $5_1 | 0;
 }
 
 function $726($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $3_1 = 0, $6_1 = 0.0;
  $3_1 = global$0 - 16 | 0;
  $6_1 = +(0 | 0);
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAPF64[$5_1 >> 3] = $6_1;
  HEAPF64[($5_1 + 8 | 0) >> 3] = $6_1;
  return $5_1 | 0;
 }
 
 function $727($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (24 | 0) | 0 | 0;
 }
 
 function $728($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $730($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return;
 }
 
 function $729($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $731(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  label$3 : {
   $12_1 = $5_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return;
 }
 
 function $730($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $17_1 = 0, $23_1 = 0, $22_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $22_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $14_1 = $694($5_1 | 0) | 0;
    $17_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -24 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $17_1;
    $732($14_1 | 0, $699($17_1 | 0) | 0 | 0);
    continue label$4;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$5 : {
   $23_1 = $4_1 + 16 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return;
 }
 
 function $731($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $14_1 = 0, $13_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $113(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 24) | 0, 8 | 0);
  label$3 : {
   $14_1 = $5_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return;
 }
 
 function $732($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $733(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 32 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $733($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $734(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $734($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $735($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $359($4_1 | 0) | 0;
  $739($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $736($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $14_1 = 0, $13_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $361($6_1 | 0, $286(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $741($6_1 | 0, $740(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $14_1 = $5_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $6_1 | 0;
 }
 
 function $737($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $12_1 = 0, $11_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = $365($742((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $12_1 = $3_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $8_1 | 0;
 }
 
 function $738($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $739($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $743($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $740($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $741($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $740(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $5_1 | 0;
 }
 
 function $742($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $369(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $743($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $744($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($750(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $745($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $29_1 = 0, $28_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $28_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $28_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $745($6_1 | 0, HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0);
   $745($6_1 | 0, HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $746($6_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
   $748(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, $747((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 16 | 0 | 0) | 0 | 0);
   $749(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 1 | 0);
  }
  label$4 : {
   $29_1 = $4_1 + 16 | 0;
   if ($29_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $29_1;
  }
  return;
 }
 
 function $746($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $751((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $747($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $619($753(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $748($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $752(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 32 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $749($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $754(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  label$3 : {
   $12_1 = $5_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return;
 }
 
 function $750($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $12_1 = 0, $11_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = $365($756((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $12_1 = $3_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $8_1 | 0;
 }
 
 function $751($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $755(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $752($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  return;
 }
 
 function $753($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $754($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $14_1 = 0, $13_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $113(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 5 | 0 | 0, 8 | 0);
  label$3 : {
   $14_1 = $5_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return;
 }
 
 function $755($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $756($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $383(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $757($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $14_1 = 0, $30_1 = 0, $29_1 = 0, $26_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 48 | 0;
  label$1 : {
   $29_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $29_1;
  }
  $7_1 = $4_1 + 16 | 0;
  HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 32 | 0) >> 2] = $1_1;
  $14_1 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
  $759($7_1 | 0, $14_1 | 0, $758(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0);
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $762($14_1 | 0, $4_1 + 12 | 0 | 0, $761(($760($7_1 | 0) | 0) + 16 | 0 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  $764($14_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $763($7_1 | 0) | 0 | 0);
  $766($4_1 + 40 | 0 | 0, $765($7_1 | 0) | 0 | 0) | 0;
  $767($7_1 | 0) | 0;
  $26_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
  label$3 : {
   $30_1 = $4_1 + 48 | 0;
   if ($30_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $30_1;
  }
  return $26_1 | 0;
 }
 
 function $758($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $759($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $9_1 = 0, $36_1 = 0, $35_1 = 0, $16_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $35_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $35_1;
  }
  $9_1 = 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $746(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  HEAP8[($5_1 + 15 | 0) >> 0] = $9_1 & 1 | 0;
  $16_1 = $768(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
  $769($5_1 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $9_1 & 1 | 0 | 0) | 0;
  $770($0_1 | 0, $16_1 | 0, $5_1 | 0) | 0;
  $771(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $747(($760($0_1 | 0) | 0) + 16 | 0 | 0) | 0 | 0, $758(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0);
  (wasm2js_i32$0 = $772($0_1 | 0) | 0, wasm2js_i32$1 = 1), HEAP8[(wasm2js_i32$0 + 4 | 0) >> 0] = wasm2js_i32$1;
  HEAP8[($5_1 + 15 | 0) >> 0] = 1 & 1 | 0;
  label$3 : {
   if ((HEAPU8[($5_1 + 15 | 0) >> 0] | 0) & 1 | 0) {
    break label$3
   }
   $767($0_1 | 0) | 0;
  }
  label$4 : {
   $36_1 = $5_1 + 32 | 0;
   if ($36_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $36_1;
  }
  return;
 }
 
 function $760($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($776(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $761($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $775(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $762($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $60_1 = 0, $59_1 = 0, $52_1 = 0, $56_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $59_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $59_1;
  }
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  $7_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $744($7_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       if (!(($774($773($7_1 | 0) | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 16 | 0 | 0) | 0) & 1 | 0)) {
        break label$7
       }
       label$8 : {
        label$9 : {
         if (!((HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$9
         }
         HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
         break label$8;
        }
        HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
        HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
        break label$3;
       }
       break label$6;
      }
      label$10 : {
       label$11 : {
        if (!((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$11
        }
        HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        break label$10;
       }
       HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0;
       break label$3;
      }
     }
     continue label$5;
    };
   }
   $52_1 = $737($7_1 | 0) | 0;
   HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = $52_1;
   HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
  }
  $56_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$12 : {
   $60_1 = $5_1 + 32 | 0;
   if ($60_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $60_1;
  }
  return $56_1 | 0;
 }
 
 function $763($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($776(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $764($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0, $31_1 = 0, $38_1 = 0, $37_1 = 0, $25_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $37_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $37_1;
  }
  $7_1 = 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $8_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  HEAP32[(HEAP32[$6_1 >> 2] | 0) >> 2] = $7_1;
  HEAP32[((HEAP32[$6_1 >> 2] | 0) + 4 | 0) >> 2] = $7_1;
  HEAP32[((HEAP32[$6_1 >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($6_1 + 4 | 0) >> 2] | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
  label$3 : {
   if (!((HEAP32[(HEAP32[($738($8_1 | 0) | 0) >> 2] | 0) >> 2] | 0 | 0) != ($7_1 | 0) & 1 | 0)) {
    break label$3
   }
   $25_1 = HEAP32[(HEAP32[($738($8_1 | 0) | 0) >> 2] | 0) >> 2] | 0;
   (wasm2js_i32$0 = $738($8_1 | 0) | 0, wasm2js_i32$1 = $25_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  }
  $406(HEAP32[($737($8_1 | 0) | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($6_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0);
  $31_1 = $777($8_1 | 0) | 0;
  HEAP32[$31_1 >> 2] = (HEAP32[$31_1 >> 2] | 0) + 1 | 0;
  label$4 : {
   $38_1 = $6_1 + 16 | 0;
   if ($38_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $38_1;
  }
  return;
 }
 
 function $765($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $13_1 = 0, $12_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = HEAP32[($778($5_1 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $778($5_1 | 0) | 0, wasm2js_i32$1 = 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$3 : {
   $13_1 = $3_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $9_1 | 0;
 }
 
 function $766($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $767($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $9_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $779($5_1 | 0, 0 | 0);
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $768($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $12_1 = 0, $11_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = $780(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  label$3 : {
   $12_1 = $4_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $8_1 | 0;
 }
 
 function $769($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP8[($5_1 + 7 | 0) >> 0] = $2_1;
  $7_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP8[($7_1 + 4 | 0) >> 0] = (HEAPU8[($5_1 + 7 | 0) >> 0] | 0) & 1 | 0;
  return $7_1 | 0;
 }
 
 function $770($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $9_1 = 0, $15_1 = 0, $14_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $9_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $782($9_1 | 0, $5_1 + 8 | 0 | 0, $781(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $15_1 = $5_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return $9_1 | 0;
 }
 
 function $771($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $783(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, $758(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0);
  label$3 : {
   $13_1 = $5_1 + 32 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $772($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $784(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $773($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $792((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $774($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $16_1 = 0, $15_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $15_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $12_1 = ($793(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, $775(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) & 1 | 0;
  label$3 : {
   $16_1 = $5_1 + 16 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  return $12_1 | 0;
 }
 
 function $775($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $776($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $795(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $777($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $796((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $778($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $797(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $779($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $22_1 = 0, $21_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $21_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $21_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[($778($6_1 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  $9_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $778($6_1 | 0) | 0, wasm2js_i32$1 = $9_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$3 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $798($784($6_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  label$4 : {
   $22_1 = $4_1 + 16 | 0;
   if ($22_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  return;
 }
 
 function $780($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $23_1 = 0, $22_1 = 0, $19_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $22_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$3 : {
   if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 > ($785(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$3
   }
   $174(8654 | 0);
   abort();
  }
  $19_1 = $175((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 5 | 0 | 0, 8 | 0) | 0;
  label$4 : {
   $23_1 = $5_1 + 16 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return $19_1 | 0;
 }
 
 function $781($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $782($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $16_1 = 0, $15_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $15_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $787($6_1 | 0, $786(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $789($6_1 + 4 | 0 | 0, $788(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $16_1 = $5_1 + 16 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  return $6_1 | 0;
 }
 
 function $783($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  $790(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $758(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0);
  label$3 : {
   $13_1 = $5_1 + 32 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $784($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $791((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $785($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 134217727 | 0;
 }
 
 function $786($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $787($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $12_1 = 0, $11_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = HEAP32[($786(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$3 : {
   $12_1 = $4_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $5_1 | 0;
 }
 
 function $788($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $789($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $11_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0, $35_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$2 = $788(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $35_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $35_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $5_1 | 0;
 }
 
 function $790($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $9_1 = 0, $15_1 = 0, $14_1 = 0, $42_1 = 0, $52_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$2 = $758(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $42_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[i64toi32_i32$0 >> 2] = $42_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $9_1 = 8;
  i64toi32_i32$2 = i64toi32_i32$2 + $9_1 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $52_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + $9_1 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$3 : {
   $15_1 = $5_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return;
 }
 
 function $791($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $792($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $794(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $793($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return +HEAPF64[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 3] < +HEAPF64[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 3] & 1 | 0 | 0;
 }
 
 function $794($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $795($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $796($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $433(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $797($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $798($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $27_1 = 0, $26_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $26_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $26_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if (!((HEAPU8[($5_1 + 4 | 0) >> 0] | 0) & 1 | 0)) {
    break label$3
   }
   $748(HEAP32[$5_1 >> 2] | 0 | 0, $747((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 16 | 0 | 0) | 0 | 0);
  }
  label$4 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$4
   }
   $749(HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 1 | 0);
  }
  label$5 : {
   $27_1 = $4_1 + 16 | 0;
   if ($27_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $27_1;
  }
  return;
 }
 
 function $799($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $13_1 = 0, $12_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $800($3_1 + 8 | 0 | 0, $737(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$3 : {
   $13_1 = $3_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $9_1 | 0;
 }
 
 function $800($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $801($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0, $13_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $800($3_1 + 8 | 0 | 0, HEAP32[($738(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
  $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $10_1 | 0;
 }
 
 function $802($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0, $14_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = (($803(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0;
  label$3 : {
   $15_1 = $4_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return $11_1 | 0;
 }
 
 function $803($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0 | 0;
 }
 
 function $804($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $805(HEAP32[$4_1 >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $4_1 | 0;
 }
 
 function $805($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $28_1 = 0, $27_1 = 0, $24_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $27_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $27_1;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $806(HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
    break label$3;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
   label$5 : {
    label$6 : while (1) {
     if (!(($428(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
      break label$5
     }
     (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $427(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
     continue label$6;
    };
   }
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $427(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  }
  $24_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$7 : {
   $28_1 = $3_1 + 16 | 0;
   if ($28_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $28_1;
  }
  return $24_1 | 0;
 }
 
 function $806($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    continue label$2;
   };
  }
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $807($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $753($808(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $808($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $12_1 = 0, $11_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = $810(($809(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 16 | 0 | 0) | 0;
  label$3 : {
   $12_1 = $3_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $8_1 | 0;
 }
 
 function $809($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $810($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $811(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $811($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $812($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $11_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $822($5_1 | 0, $90(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $823($5_1 | 0) | 0;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $5_1 | 0;
 }
 
 function $813($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0, $18_1 = 0, $15_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $826($825(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $159() | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  $15_1 = HEAP32[($160($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  label$3 : {
   $19_1 = $3_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  return $15_1 | 0;
 }
 
 function $814($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $828((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $815($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $12_1 = 0, $11_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = $827(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  label$3 : {
   $12_1 = $4_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $8_1 | 0;
 }
 
 function $816($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $829((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $817($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $25_1 = 0, $24_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $24_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $24_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $832($5_1 | 0, $830($5_1 | 0) | 0 | 0, ($830($5_1 | 0) | 0) + Math_imul($831($5_1 | 0) | 0, 12) | 0 | 0, ($830($5_1 | 0) | 0) + Math_imul($831($5_1 | 0) | 0, 12) | 0 | 0, ($830($5_1 | 0) | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 12) | 0 | 0);
  label$3 : {
   $25_1 = $4_1 + 16 | 0;
   if ($25_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  return;
 }
 
 function $818($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $819($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $820($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $843(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 32 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $821($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $822($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $11_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $90(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$6_1 >> 2] = 0;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $6_1 | 0;
 }
 
 function $823($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $824($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $824($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $825($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $834((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $826($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $833(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $827($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $23_1 = 0, $22_1 = 0, $19_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $22_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$3 : {
   if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 > ($835(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$3
   }
   $174(8654 | 0);
   abort();
  }
  $19_1 = $175(Math_imul(HEAP32[($5_1 + 8 | 0) >> 2] | 0, 12) | 0, 4 | 0) | 0;
  label$4 : {
   $23_1 = $5_1 + 16 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return $19_1 | 0;
 }
 
 function $828($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $837(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $829($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $838(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $830($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $819(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $831($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $839(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $832($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  return;
 }
 
 function $833($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $5_1 = $835(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $834($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $836(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $835($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 357913941 | 0;
 }
 
 function $836($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $837($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $838($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $839($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $14_1 = 0, $13_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($840($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (12 | 0) | 0;
  label$3 : {
   $14_1 = $3_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $10_1 | 0;
 }
 
 function $840($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $841((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $841($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $842(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $842($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $843($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $844(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $844($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $845(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $4_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return;
 }
 
 function $845($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $7_1 = 0, $11_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  $6_1 = $3_1 + 8 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $846($6_1 | 0) | 0;
  $847($7_1 | 0, $6_1 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $846($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $847($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0, $20_1 = 0, $19_1 = 0, $15_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $19_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $848($9_1 + 4 | 0 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  $849($9_1 + 8 | 0 | 0, $4_1 + 4 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $15_1 = $850($9_1 | 0) | 0;
  (wasm2js_i32$0 = $851($9_1 | 0) | 0, wasm2js_i32$1 = $15_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$3 : {
   $20_1 = $4_1 + 16 | 0;
   if ($20_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  return $9_1 | 0;
 }
 
 function $848($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $359($4_1 | 0) | 0;
  $852($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $849($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $14_1 = 0, $13_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $361($6_1 | 0, $286(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $854($6_1 | 0, $853(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $14_1 = $5_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $6_1 | 0;
 }
 
 function $850($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $12_1 = 0, $11_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = $365($855((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $12_1 = $3_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $8_1 | 0;
 }
 
 function $851($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $852($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $856($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $853($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $854($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $853(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $5_1 | 0;
 }
 
 function $855($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $369(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $856($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $857($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (12 | 0) | 0 | 0;
 }
 
 function $858($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $860($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return;
 }
 
 function $859($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $861(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  label$3 : {
   $12_1 = $5_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return;
 }
 
 function $860($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $17_1 = 0, $23_1 = 0, $22_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $22_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $14_1 = $814($5_1 | 0) | 0;
    $17_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -12 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $17_1;
    $862($14_1 | 0, $819($17_1 | 0) | 0 | 0);
    continue label$4;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  label$5 : {
   $23_1 = $4_1 + 16 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return;
 }
 
 function $861($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $14_1 = 0, $13_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $113(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 12) | 0, 4 | 0);
  label$3 : {
   $14_1 = $5_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return;
 }
 
 function $862($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $863(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 32 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $863($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $864(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $864($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $865(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $4_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return;
 }
 
 function $865($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $866($4_1 | 0) | 0;
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $866($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $868($4_1 | 0, $867($4_1 | 0) | 0 | 0);
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $4_1 | 0;
 }
 
 function $867($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($873(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $868($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $29_1 = 0, $28_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $28_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $28_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $868($6_1 | 0, HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0);
   $868($6_1 | 0, HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $869($6_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
   $871(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, $870((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 16 | 0 | 0) | 0 | 0);
   $872(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 1 | 0);
  }
  label$4 : {
   $29_1 = $4_1 + 16 | 0;
   if ($29_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $29_1;
  }
  return;
 }
 
 function $869($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $874((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $870($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $876($636(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $871($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $875(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $4_1 + 32 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $872($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $877(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  label$3 : {
   $12_1 = $5_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return;
 }
 
 function $873($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $12_1 = 0, $11_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = $365($879((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $12_1 = $3_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $8_1 | 0;
 }
 
 function $874($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $878(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $875($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  return;
 }
 
 function $876($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $877($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $14_1 = 0, $13_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $113(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 5 | 0 | 0, 8 | 0);
  label$3 : {
   $14_1 = $5_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return;
 }
 
 function $878($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $879($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $383(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $880($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $881($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $882($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $883($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $11_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $59(HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $5_1 | 0;
 }
 
 function $884($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $885($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $886($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $36_1 = 0, $35_1 = 0, $7_1 = 0, $32_1 = 0;
  $6_1 = global$0 - 32 | 0;
  label$1 : {
   $35_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $35_1;
  }
  HEAP32[($6_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    label$5 : {
     label$6 : {
      if (($890($887($7_1 | 0) | 0 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 16 | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) | 0) & 1 | 0) {
       break label$6
      }
      HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
      HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
      break label$5;
     }
     HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    }
    continue label$4;
   };
  }
  $891($6_1 + 24 | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $32_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  label$7 : {
   $36_1 = $6_1 + 32 | 0;
   if ($36_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $36_1;
  }
  return $32_1 | 0;
 }
 
 function $887($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $893((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $888($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = ($895(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 16 | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $889($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $16_1 = 0, $15_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $15_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $12_1 = ($398(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, $894(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) & 1 | 0;
  label$3 : {
   $16_1 = $5_1 + 16 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  return $12_1 | 0;
 }
 
 function $890($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $16_1 = 0, $15_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $15_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $12_1 = ($398(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, $894(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  label$3 : {
   $16_1 = $5_1 + 16 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  return $12_1 | 0;
 }
 
 function $891($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $892($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0 | 0;
 }
 
 function $893($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $896(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $894($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $895($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $896($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $897($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $898(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $898($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $899($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($5_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $2_1;
  $901($0_1 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, $331(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0);
  label$3 : {
   $12_1 = $5_1 + 32 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return;
 }
 
 function $900($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $901($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$5_1 >> 2] = $2_1;
  $902($0_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $331(HEAP32[$5_1 >> 2] | 0 | 0) | 0 | 0);
  label$3 : {
   $13_1 = $5_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $902($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $26_1 = 0, $12_1 = 0, $42_1 = 0, $41_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 48 | 0;
  label$1 : {
   $41_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $41_1;
  }
  HEAP32[($6_1 + 44 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $3_1;
  $12_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $903($12_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
  HEAP8[($6_1 + 23 | 0) >> 0] = 0;
  label$3 : {
   if (!((HEAP32[(HEAP32[($6_1 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
    break label$3
   }
   $26_1 = $6_1 + 8 | 0;
   $904($26_1 | 0, $12_1 | 0, $331(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0);
   $906($12_1 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $905($26_1 | 0) | 0 | 0);
   (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $907($26_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
   HEAP8[($6_1 + 23 | 0) >> 0] = 1;
   $908($26_1 | 0) | 0;
  }
  $909($6_1 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $910($0_1 | 0, $6_1 | 0, $6_1 + 23 | 0 | 0) | 0;
  label$4 : {
   $42_1 = $6_1 + 48 | 0;
   if ($42_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $42_1;
  }
  return;
 }
 
 function $903($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $78_1 = 0, $77_1 = 0, $70_1 = 0, $74_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $77_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $77_1;
  }
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  $7_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $867($7_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $911($7_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       if (!(($889($887($7_1 | 0) | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 16 | 0 | 0) | 0) & 1 | 0)) {
        break label$7
       }
       label$8 : {
        label$9 : {
         if (!((HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$9
         }
         (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $399(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
         HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
         break label$8;
        }
        HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
        HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
        break label$3;
       }
       break label$6;
      }
      label$10 : {
       label$11 : {
        if (!(($890($887($7_1 | 0) | 0 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 16 | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
         break label$11
        }
        label$12 : {
         label$13 : {
          if (!((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$13
          }
          (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $399((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
          HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
          break label$12;
         }
         HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
         HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0;
         break label$3;
        }
        break label$10;
       }
       HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       break label$3;
      }
     }
     continue label$5;
    };
   }
   $70_1 = $850($7_1 | 0) | 0;
   HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] = $70_1;
   HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
  }
  $74_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$14 : {
   $78_1 = $5_1 + 32 | 0;
   if ($78_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $78_1;
  }
  return $74_1 | 0;
 }
 
 function $904($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $9_1 = 0, $36_1 = 0, $35_1 = 0, $16_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $35_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $35_1;
  }
  $9_1 = 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $869(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  HEAP8[($5_1 + 15 | 0) >> 0] = $9_1 & 1 | 0;
  $16_1 = $912(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
  $913($5_1 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $9_1 & 1 | 0 | 0) | 0;
  $914($0_1 | 0, $16_1 | 0, $5_1 | 0) | 0;
  $916(HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $870(($915($0_1 | 0) | 0) + 16 | 0 | 0) | 0 | 0, $331(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0);
  (wasm2js_i32$0 = $917($0_1 | 0) | 0, wasm2js_i32$1 = 1), HEAP8[(wasm2js_i32$0 + 4 | 0) >> 0] = wasm2js_i32$1;
  HEAP8[($5_1 + 15 | 0) >> 0] = 1 & 1 | 0;
  label$3 : {
   if ((HEAPU8[($5_1 + 15 | 0) >> 0] | 0) & 1 | 0) {
    break label$3
   }
   $908($0_1 | 0) | 0;
  }
  label$4 : {
   $36_1 = $5_1 + 32 | 0;
   if ($36_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $36_1;
  }
  return;
 }
 
 function $905($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($919(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $906($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0, $31_1 = 0, $38_1 = 0, $37_1 = 0, $25_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $37_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $37_1;
  }
  $7_1 = 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $8_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  HEAP32[(HEAP32[$6_1 >> 2] | 0) >> 2] = $7_1;
  HEAP32[((HEAP32[$6_1 >> 2] | 0) + 4 | 0) >> 2] = $7_1;
  HEAP32[((HEAP32[$6_1 >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($6_1 + 4 | 0) >> 2] | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
  label$3 : {
   if (!((HEAP32[(HEAP32[($851($8_1 | 0) | 0) >> 2] | 0) >> 2] | 0 | 0) != ($7_1 | 0) & 1 | 0)) {
    break label$3
   }
   $25_1 = HEAP32[(HEAP32[($851($8_1 | 0) | 0) >> 2] | 0) >> 2] | 0;
   (wasm2js_i32$0 = $851($8_1 | 0) | 0, wasm2js_i32$1 = $25_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  }
  $406(HEAP32[($850($8_1 | 0) | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($6_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0);
  $31_1 = $918($8_1 | 0) | 0;
  HEAP32[$31_1 >> 2] = (HEAP32[$31_1 >> 2] | 0) + 1 | 0;
  label$4 : {
   $38_1 = $6_1 + 16 | 0;
   if ($38_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $38_1;
  }
  return;
 }
 
 function $907($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $13_1 = 0, $12_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = HEAP32[($920($5_1 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $920($5_1 | 0) | 0, wasm2js_i32$1 = 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $9_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$3 : {
   $13_1 = $3_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $9_1 | 0;
 }
 
 function $908($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $9_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $921($5_1 | 0, 0 | 0);
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $909($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $910($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $18_1 = 0, $17_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $17_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $17_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = HEAP32[($900(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = (HEAPU8[($411(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 0] | 0) & 1 | 0), HEAP8[(wasm2js_i32$0 + 4 | 0) >> 0] = wasm2js_i32$1;
  label$3 : {
   $18_1 = $5_1 + 16 | 0;
   if ($18_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  return $6_1 | 0;
 }
 
 function $911($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $399($873(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $912($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $12_1 = 0, $11_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = $922(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  label$3 : {
   $12_1 = $4_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $8_1 | 0;
 }
 
 function $913($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP8[($5_1 + 7 | 0) >> 0] = $2_1;
  $7_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP8[($7_1 + 4 | 0) >> 0] = (HEAPU8[($5_1 + 7 | 0) >> 0] | 0) & 1 | 0;
  return $7_1 | 0;
 }
 
 function $914($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $9_1 = 0, $15_1 = 0, $14_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $9_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $924($9_1 | 0, $5_1 + 8 | 0 | 0, $923(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $15_1 = $5_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return $9_1 | 0;
 }
 
 function $915($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($919(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $916($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $925(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, $331(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0);
  label$3 : {
   $13_1 = $5_1 + 32 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $917($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $926(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $918($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $937((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $919($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $935(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $920($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $938(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $921($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $22_1 = 0, $21_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $21_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $21_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = HEAP32[($920($6_1 | 0) | 0) >> 2] | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  $9_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $920($6_1 | 0) | 0, wasm2js_i32$1 = $9_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$3 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $939($926($6_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  label$4 : {
   $22_1 = $4_1 + 16 | 0;
   if ($22_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  return;
 }
 
 function $922($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $23_1 = 0, $22_1 = 0, $19_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $22_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$3 : {
   if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 > ($927(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$3
   }
   $174(8654 | 0);
   abort();
  }
  $19_1 = $175((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 5 | 0 | 0, 8 | 0) | 0;
  label$4 : {
   $23_1 = $5_1 + 16 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return $19_1 | 0;
 }
 
 function $923($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $924($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $16_1 = 0, $15_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $15_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $929($6_1 | 0, $928(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  $931($6_1 + 4 | 0 | 0, $930(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $16_1 = $5_1 + 16 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  return $6_1 | 0;
 }
 
 function $925($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $13_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  $932(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, $331(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0);
  label$3 : {
   $13_1 = $5_1 + 32 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $926($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $936((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $927($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 134217727 | 0;
 }
 
 function $928($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $929($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $12_1 = 0, $11_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = HEAP32[($928(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$3 : {
   $12_1 = $4_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $5_1 | 0;
 }
 
 function $930($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $931($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $11_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0, $35_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$2 = $930(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $35_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $35_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$3 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $5_1 | 0;
 }
 
 function $932($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $933(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, $331(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $12_1 = $5_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return;
 }
 
 function $933($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $16_1 = 0, $15_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $15_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = HEAP32[($286(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5_1, wasm2js_f64$0 = +HEAPF64[($934((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0 | 0) | 0) >> 3]), HEAPF64[(wasm2js_i32$0 + 8 | 0) >> 3] = wasm2js_f64$0;
  label$3 : {
   $16_1 = $4_1 + 16 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  return $5_1 | 0;
 }
 
 function $934($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $935($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $936($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $937($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $433(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $938($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $939($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $27_1 = 0, $26_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $26_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $26_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if (!((HEAPU8[($5_1 + 4 | 0) >> 0] | 0) & 1 | 0)) {
    break label$3
   }
   $871(HEAP32[$5_1 >> 2] | 0 | 0, $870((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 16 | 0 | 0) | 0 | 0);
  }
  label$4 : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$4
   }
   $872(HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 1 | 0);
  }
  label$5 : {
   $27_1 = $4_1 + 16 | 0;
   if ($27_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $27_1;
  }
  return;
 }
 
 function $940($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $442(HEAP32[$4_1 >> 2] | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $4_1 | 0;
 }
 
 function $941($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  label$1 : {
   if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF64[$5_1 >> 3] = +HEAPF64[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
   HEAPF64[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3];
   HEAPF64[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[$5_1 >> 3];
   HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   HEAP32[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 2 | 0;
   HEAP32[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 2 | 0;
   HEAP32[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   HEAP32[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  }
  return;
 }
 
 function $942($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $47_1 = 0, $46_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $46_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $46_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$3 : {
   label$4 : {
    label$5 : {
     if (!(HEAP32[($4_1 + 8 | 0) >> 2] | 0)) {
      break label$5
     }
     if (!(+HEAPF64[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +HEAPF64[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + (((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0) / (2 | 0) | 0) - 1 | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
      break label$4
     }
    }
    break label$3;
   }
   $941(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, (((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0) / (2 | 0) | 0) - 1 | 0 | 0);
   $942(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, (((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0) / (2 | 0) | 0) - 1 | 0 | 0);
  }
  label$6 : {
   $47_1 = $4_1 + 16 | 0;
   if ($47_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $47_1;
  }
  return;
 }
 
 function $943($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $129_1 = 0, $128_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $128_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $128_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $944(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!(((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0) << 1 | 0) - 1 | 0 | 0) >= (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    break label$3;
   }
   label$5 : {
    label$6 : {
     label$7 : {
      if ((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0) << 1 | 0 | 0) == (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0) {
       break label$7
      }
      if (!(+HEAPF64[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + (((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0) << 1 | 0) - 1 | 0) << 3 | 0) | 0) >> 3] >= +HEAPF64[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0) << 1 | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
       break label$6
      }
     }
     label$8 : {
      if (!(+HEAPF64[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +HEAPF64[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + (((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0) << 1 | 0) - 1 | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
       break label$8
      }
      $941(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, (((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0) << 1 | 0) - 1 | 0 | 0);
      $943(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, (((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0) << 1 | 0) - 1 | 0 | 0);
     }
     break label$5;
    }
    label$9 : {
     if (!(+HEAPF64[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] < +HEAPF64[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0) << 1 | 0) << 3 | 0) | 0) >> 3] & 1 | 0)) {
      break label$9
     }
     $941(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0) << 1 | 0 | 0);
     $943(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1 | 0) << 1 | 0 | 0);
    }
   }
  }
  label$10 : {
   $129_1 = $4_1 + 16 | 0;
   if ($129_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $129_1;
  }
  return;
 }
 
 function $944($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $490((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $945($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $56_1 = 0, $55_1 = 0, $52_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $55_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $55_1;
  }
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $516((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 28 | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!(HEAP32[($4_1 + 16 | 0) >> 2] | 0)) {
     break label$4
    }
    $28(8740 | 0, 8722 | 0, 927 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break label$3;
   }
   $33(23 | 0, (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 28 | 0 | 0);
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $486((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
   label$5 : {
    if (!(HEAP32[($4_1 + 12 | 0) >> 2] | 0)) {
     break label$5
    }
    $28(8740 | 0, 8722 | 0, 929 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    break label$3;
   }
   $33(1 | 0, (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0 | 0);
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $516((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 16 | 0 | 0, 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
   label$6 : {
    if (!(HEAP32[($4_1 + 8 | 0) >> 2] | 0)) {
     break label$6
    }
    $28(8740 | 0, 8722 | 0, 930 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    break label$3;
   }
   $34(2 | 0);
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $52_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$7 : {
   $56_1 = $4_1 + 32 | 0;
   if ($56_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $56_1;
  }
  return $52_1 | 0;
 }
 
 function $946($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $16_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $15_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $488((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0);
  $517((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0 | 0);
  $517((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 28 | 0 | 0);
  label$3 : {
   $16_1 = $3_1 + 16 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  return;
 }
 
 function $947($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $491((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $948($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  var $5_1 = 0, $47_1 = 0, $46_1 = 0, $43_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 48 | 0;
  label$1 : {
   $46_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $46_1;
  }
  HEAP32[($5_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $1_1;
  HEAPF64[($5_1 + 24 | 0) >> 3] = $2_1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $490((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 4 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 20 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $493((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 4 | 0 | 0, +(+HEAPF64[($5_1 + 24 | 0) >> 3])) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!(HEAP32[($5_1 + 16 | 0) >> 2] | 0)) {
     break label$4
    }
    $28(8740 | 0, 8722 | 0, 960 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
    break label$3;
   }
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $520((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 16 | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
   label$5 : {
    if (!(HEAP32[($5_1 + 12 | 0) >> 2] | 0)) {
     break label$5
    }
    $28(8740 | 0, 8722 | 0, 961 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    break label$3;
   }
   HEAP32[((HEAP32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 36 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 2 | 0;
   $942(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
   HEAP32[($5_1 + 44 | 0) >> 2] = 0;
  }
  $43_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  label$6 : {
   $47_1 = $5_1 + 48 | 0;
   if ($47_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $47_1;
  }
  return $43_1 | 0;
 }
 
 function $949($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $950($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $31_1 = 0, $30_1 = 0, $33_1 = 0.0;
  $3_1 = global$0 - 32 | 0;
  label$1 : {
   $30_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $30_1;
  }
  $4_1 = 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAPF64[($3_1 + 16 | 0) >> 3] = +HEAPF64[(HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 3];
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >> 2] | 0;
  $941(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0, $4_1 | 0, ($944(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0) - 1 | 0 | 0);
  +$499((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 4 | 0 | 0);
  $522((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 16 | 0 | 0) | 0;
  HEAP32[((HEAP32[((HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $4_1;
  $943(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0, $4_1 | 0);
  $33_1 = +HEAPF64[($3_1 + 16 | 0) >> 3];
  label$3 : {
   $31_1 = $3_1 + 32 | 0;
   if ($31_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $31_1;
  }
  return +$33_1;
 }
 
 function $951($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  var $5_1 = 0, $29_1 = 0, $28_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $28_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $28_1;
  }
  $6_1 = 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAPF64[($5_1 + 16 | 0) >> 3] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) - 2 | 0;
  HEAPF64[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0) >> 3] = +HEAPF64[($5_1 + 16 | 0) >> 3];
  $943(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
  $942(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
  label$3 : {
   $29_1 = $5_1 + 32 | 0;
   if ($29_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $29_1;
  }
  return $6_1 | 0;
 }
 
 function $952($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $28_1 = 0, $53_1 = 0, $90_1 = 0, $200_1 = 0, $363_1 = 0, $409_1 = 0, $6_1 = 0, $11_1 = 0, $50_1 = 0, $131_1 = 0, $208_1 = 0, $303_1 = 0, $312_1 = 0, $322_1 = 0, $381_1 = 0, $421_1 = 0, $420_1 = 0, $117_1 = 0, $164_1 = 0, $216_1 = 0, $267_1 = 0, $417_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 144 | 0;
  label$1 : {
   $420_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $420_1;
  }
  $6_1 = 0;
  HEAP32[($4_1 + 136 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 135 | 0) >> 0] = $1_1;
  $11_1 = $1015(88 | 0) | 0;
  $289($11_1 | 0, HEAP32[($4_1 + 136 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 124 | 0) >> 2] = $11_1;
  $33(22 | 0, HEAP32[($4_1 + 124 | 0) >> 2] | 0 | 0);
  HEAP32[($4_1 + 120 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 124 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 116 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 92 | 0) >> 2] = $6_1;
  HEAP8[($4_1 + 91 | 0) >> 0] = 1;
  label$3 : {
   label$4 : while (1) {
    HEAPF64[($4_1 + 104 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 136 | 0) >> 2] | 0) + 80 | 0) >> 3];
    label$5 : {
     if (!((HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$5
     }
     $28_1 = HEAP32[($4_1 + 120 | 0) >> 2] | 0;
     (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1016((($28_1 & 1073741823 | 0 | 0) != ($28_1 | 0) & 1 | 0 ? -1 : $28_1 << 2 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 92 | 0) >> 2] = wasm2js_i32$1;
     $33(24 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0);
     HEAP8[($4_1 + 91 | 0) >> 0] = 0;
     HEAP32[($4_1 + 84 | 0) >> 2] = 0;
     label$6 : {
      label$7 : {
       if ((HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0) % (2 | 0) | 0) {
        break label$7
       }
       if (!((HEAP32[((HEAP32[($4_1 + 136 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
        break label$7
       }
       $50_1 = 0;
       $53_1 = HEAP32[($4_1 + 120 | 0) >> 2] | 0;
       (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1016((($53_1 & 1073741823 | 0 | 0) != ($53_1 | 0) & 1 | 0 ? -1 : $53_1 << 2 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 84 | 0) >> 2] = wasm2js_i32$1;
       $33(24 | 0, HEAP32[($4_1 + 84 | 0) >> 2] | 0 | 0);
       HEAP32[($4_1 + 80 | 0) >> 2] = $50_1;
       HEAP32[($4_1 + 76 | 0) >> 2] = $50_1;
       label$8 : {
        label$9 : while (1) {
         if (!((HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($4_1 + 136 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$8
         }
         (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $68(HEAP32[((HEAP32[(HEAP32[($4_1 + 136 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 76 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 72 | 0) >> 2] = wasm2js_i32$1;
         label$10 : {
          label$11 : {
           if (!((HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
            break label$11
           }
           $90_1 = HEAP32[($4_1 + 72 | 0) >> 2] | 0;
           (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1016((($90_1 & 1073741823 | 0 | 0) != ($90_1 | 0) & 1 | 0 ? -1 : $90_1 << 2 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 68 | 0) >> 2] = wasm2js_i32$1;
           $33(24 | 0, HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0);
           HEAP32[($4_1 + 64 | 0) >> 2] = 0;
           label$12 : {
            label$13 : while (1) {
             if (!((HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$12
             }
             $117_1 = HEAP32[($72(HEAP32[((HEAP32[(HEAP32[($4_1 + 136 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 76 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
             HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 64 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $117_1;
             HEAP32[($4_1 + 64 | 0) >> 2] = (HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 1 | 0;
             continue label$13;
            };
           }
           $131_1 = $1015(88 | 0) | 0;
           $290($131_1 | 0, HEAP32[($4_1 + 124 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) | 0;
           HEAP32[($4_1 + 60 | 0) >> 2] = $131_1;
           $33(22 | 0, HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0);
           $319(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0);
           $952(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0) | 0;
           HEAP32[($4_1 + 56 | 0) >> 2] = 0;
           label$14 : {
            label$15 : while (1) {
             if (!((HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($4_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$14
             }
             (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $68(HEAP32[((HEAP32[(HEAP32[($4_1 + 60 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 52 | 0) >> 2] = wasm2js_i32$1;
             HEAP32[($4_1 + 48 | 0) >> 2] = 0;
             label$16 : {
              label$17 : while (1) {
               if (!((HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
                break label$16
               }
               $164_1 = HEAP32[($4_1 + 80 | 0) >> 2] | 0;
               (wasm2js_i32$0 = (HEAP32[($4_1 + 84 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($72(HEAP32[((HEAP32[(HEAP32[($4_1 + 60 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << 2 | 0) | 0, wasm2js_i32$1 = $164_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
               HEAP32[($4_1 + 48 | 0) >> 2] = (HEAP32[($4_1 + 48 | 0) >> 2] | 0) + 1 | 0;
               continue label$17;
              };
             }
             HEAP32[((HEAP32[($4_1 + 92 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
             HEAP32[($4_1 + 80 | 0) >> 2] = (HEAP32[($4_1 + 80 | 0) >> 2] | 0) + 1 | 0;
             HEAP32[($4_1 + 56 | 0) >> 2] = (HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 1 | 0;
             continue label$15;
            };
           }
           $200_1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
           label$18 : {
            if (($200_1 | 0) == (0 | 0) & 1 | 0) {
             break label$18
            }
            $314($200_1 | 0) | 0;
            $1017($200_1 | 0);
           }
           $34(1 | 0);
           $208_1 = HEAP32[($4_1 + 68 | 0) >> 2] | 0;
           label$19 : {
            if (($208_1 | 0) == (0 | 0) & 1 | 0) {
             break label$19
            }
            $1018($208_1 | 0);
           }
           $34(1 | 0);
           break label$10;
          }
          $216_1 = HEAP32[($4_1 + 80 | 0) >> 2] | 0;
          (wasm2js_i32$0 = (HEAP32[($4_1 + 84 | 0) >> 2] | 0) + ((HEAP32[($72(HEAP32[((HEAP32[(HEAP32[($4_1 + 136 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 76 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 0 | 0) | 0) >> 2] | 0) << 2 | 0) | 0, wasm2js_i32$1 = $216_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
          HEAP32[((HEAP32[($4_1 + 92 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
          HEAP32[($4_1 + 80 | 0) >> 2] = (HEAP32[($4_1 + 80 | 0) >> 2] | 0) + 1 | 0;
         }
         HEAP32[($4_1 + 76 | 0) >> 2] = (HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 1 | 0;
         continue label$9;
        };
       }
       break label$6;
      }
      HEAP32[($4_1 + 44 | 0) >> 2] = 0;
      label$20 : {
       label$21 : while (1) {
        if (!((HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($4_1 + 136 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$20
        }
        (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $68(HEAP32[((HEAP32[(HEAP32[($4_1 + 136 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 44 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 40 | 0) >> 2] = wasm2js_i32$1;
        HEAP32[($4_1 + 36 | 0) >> 2] = 0;
        label$22 : {
         label$23 : while (1) {
          if (!((HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$22
          }
          $267_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
          (wasm2js_i32$0 = (HEAP32[($4_1 + 92 | 0) >> 2] | 0) + ((HEAP32[($72(HEAP32[((HEAP32[(HEAP32[($4_1 + 136 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 44 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) << 2 | 0) | 0, wasm2js_i32$1 = $267_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
          HEAP32[($4_1 + 36 | 0) >> 2] = (HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 1 | 0;
          continue label$23;
         };
        }
        HEAP32[($4_1 + 44 | 0) >> 2] = (HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 1 | 0;
        continue label$21;
       };
      }
     }
     $330(HEAP32[($4_1 + 136 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 124 | 0) >> 2] | 0 | 0);
     label$24 : {
      if (!((HEAP32[($4_1 + 84 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$24
      }
      $303_1 = $1015(160 | 0) | 0;
      $554($303_1 | 0, HEAP32[($4_1 + 136 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($4_1 + 32 | 0) >> 2] = $303_1;
      $33(25 | 0, HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0);
      $645(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 84 | 0) >> 2] | 0 | 0);
      $582(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0);
      $564(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0);
      $34(1 | 0);
      $312_1 = HEAP32[($4_1 + 84 | 0) >> 2] | 0;
      label$25 : {
       if (($312_1 | 0) == (0 | 0) & 1 | 0) {
        break label$25
       }
       $1018($312_1 | 0);
      }
      $34(1 | 0);
     }
    }
    label$26 : while (1) {
     $322_1 = $1015(160 | 0) | 0;
     $554($322_1 | 0, HEAP32[($4_1 + 136 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($4_1 + 128 | 0) >> 2] = $322_1;
     $33(25 | 0, HEAP32[($4_1 + 128 | 0) >> 2] | 0 | 0);
     label$27 : {
      if ((HEAPU8[($4_1 + 91 | 0) >> 0] | 0) & 1 | 0) {
       break label$27
      }
      if (!((HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$27
      }
      HEAP8[($4_1 + 91 | 0) >> 0] = 1;
      $645(HEAP32[($4_1 + 128 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0);
     }
     HEAPF64[($4_1 + 24 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 128 | 0) >> 2] | 0) + 48 | 0) >> 3];
     HEAP8[($4_1 + 23 | 0) >> 0] = 1;
     HEAP32[($4_1 + 16 | 0) >> 2] = 0;
     HEAPF64[($4_1 + 8 | 0) >> 3] = 1.0e3;
     label$28 : {
      label$29 : while (1) {
       if (!((HEAPU8[($4_1 + 23 | 0) >> 0] | 0) & 1 | 0)) {
        break label$28
       }
       HEAPF64[($4_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 128 | 0) >> 2] | 0) + 48 | 0) >> 3];
       (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = ($565(HEAP32[($4_1 + 128 | 0) >> 2] | 0 | 0) | 0) & 1 | 0), HEAP8[(wasm2js_i32$0 + 23 | 0) >> 0] = wasm2js_i32$1;
       HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
       label$30 : {
        if (!(Math_abs(+HEAPF64[((HEAP32[($4_1 + 128 | 0) >> 2] | 0) + 48 | 0) >> 3] - +HEAPF64[($4_1 + 8 | 0) >> 3]) < 1.0e-10 & 1 | 0)) {
         break label$30
        }
        HEAP8[($4_1 + 23 | 0) >> 0] = 0;
       }
       continue label$29;
      };
     }
     $582(HEAP32[($4_1 + 128 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0);
     HEAPF64[($4_1 + 96 | 0) >> 3] = +HEAPF64[((HEAP32[($4_1 + 128 | 0) >> 2] | 0) + 48 | 0) >> 3];
     $363_1 = HEAP32[($4_1 + 128 | 0) >> 2] | 0;
     label$31 : {
      if (($363_1 | 0) == (0 | 0) & 1 | 0) {
       break label$31
      }
      $563($363_1 | 0) | 0;
      $1017($363_1 | 0);
     }
     $34(1 | 0);
     if (+HEAPF64[($4_1 + 24 | 0) >> 3] - +HEAPF64[($4_1 + 96 | 0) >> 3] > 1.0e-10 & 1 | 0) {
      continue label$26
     }
     break label$26;
    };
    label$32 : {
     if (!((HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$32
     }
     $381_1 = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
     label$33 : {
      if (($381_1 | 0) == (0 | 0) & 1 | 0) {
       break label$33
      }
      $1018($381_1 | 0);
     }
     $34(1 | 0);
    }
    HEAP32[($4_1 + 116 | 0) >> 2] = (HEAP32[($4_1 + 116 | 0) >> 2] | 0) + 1 | 0;
    label$34 : {
     if ((HEAPU8[($4_1 + 135 | 0) >> 0] | 0) & 1 | 0) {
      break label$34
     }
     label$35 : {
      if (!((HEAP32[(0 + 11876 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$35
      }
      label$36 : {
       if (!($265(0 | 0) | 0)) {
        break label$36
       }
       HEAP32[($4_1 + 140 | 0) >> 2] = 13;
       break label$3;
      }
     }
    }
    if (+HEAPF64[($4_1 + 104 | 0) >> 3] - +HEAPF64[($4_1 + 96 | 0) >> 3] > 1.0e-10 & 1 | 0) {
     continue label$4
    }
    break label$4;
   };
   $409_1 = HEAP32[($4_1 + 124 | 0) >> 2] | 0;
   label$37 : {
    if (($409_1 | 0) == (0 | 0) & 1 | 0) {
     break label$37
    }
    $314($409_1 | 0) | 0;
    $1017($409_1 | 0);
   }
   $34(1 | 0);
   HEAP32[($4_1 + 140 | 0) >> 2] = 0;
  }
  $417_1 = HEAP32[($4_1 + 140 | 0) >> 2] | 0;
  label$38 : {
   $421_1 = $4_1 + 144 | 0;
   if ($421_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $421_1;
  }
  return $417_1 | 0;
 }
 
 function $953($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $113_1 = 0, $12_1 = 0, $40_1 = 0, $125_1 = 0, $124_1 = 0, $130_1 = 0.0, $134_1 = 0.0, $121_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0.0;
  $8_1 = global$0 - 80 | 0;
  label$1 : {
   $124_1 = $8_1;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $124_1;
  }
  HEAP32[($8_1 + 72 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 68 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 64 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 60 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 52 | 0) >> 2] = $5_1;
  $12_1 = $1015(88 | 0) | 0;
  $280($12_1 | 0, HEAP32[($8_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($8_1 + 48 | 0) >> 2] = $12_1;
  $33(22 | 0, HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0);
  $319(HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0);
  HEAPF64[($8_1 + 32 | 0) >> 3] = 1.0e3;
  HEAP32[($8_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($8_1 + 48 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $494(HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 24 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!(HEAP32[($8_1 + 24 | 0) >> 2] | 0)) {
     break label$4
    }
    $28(8741 | 0, 8742 | 0, 291 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($8_1 + 76 | 0) >> 2] = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
    break label$3;
   }
   HEAP32[($8_1 + 20 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     $40_1 = $1015(88 | 0) | 0;
     $289($40_1 | 0, HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($8_1 + 44 | 0) >> 2] = $40_1;
     $33(22 | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0);
     (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $952(HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
     label$7 : {
      if (!(HEAP32[($8_1 + 16 | 0) >> 2] | 0)) {
       break label$7
      }
      $28(8741 | 0, 8742 | 0, 298 | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($8_1 + 76 | 0) >> 2] = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
      break label$3;
     }
     label$8 : {
      if (!(+HEAPF64[((HEAP32[($8_1 + 44 | 0) >> 2] | 0) + 80 | 0) >> 3] < +HEAPF64[($8_1 + 32 | 0) >> 3] & 1 | 0)) {
       break label$8
      }
      HEAPF64[($8_1 + 32 | 0) >> 3] = +HEAPF64[((HEAP32[($8_1 + 44 | 0) >> 2] | 0) + 80 | 0) >> 3];
      HEAP32[($8_1 + 12 | 0) >> 2] = 0;
      label$9 : {
       label$10 : while (1) {
        if (!((HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($8_1 + 44 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$9
        }
        (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $68(HEAP32[((HEAP32[(HEAP32[($8_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($8_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
        HEAP32[($8_1 + 4 | 0) >> 2] = 0;
        label$11 : {
         label$12 : while (1) {
          if (!((HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$11
          }
          $130_1 = +(HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0);
          (wasm2js_i32$0 = (HEAP32[(HEAP32[($8_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($72(HEAP32[((HEAP32[(HEAP32[($8_1 + 44 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($8_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0) << 3 | 0) | 0, wasm2js_f64$0 = $130_1), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
          HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) + 1 | 0;
          continue label$12;
         };
        }
        HEAP32[($8_1 + 12 | 0) >> 2] = (HEAP32[($8_1 + 12 | 0) >> 2] | 0) + 1 | 0;
        continue label$10;
       };
      }
     }
     $316(HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0);
     $34(1 | 0);
     HEAP32[($8_1 + 20 | 0) >> 2] = (HEAP32[($8_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
   $134_1 = +HEAPF64[($8_1 + 32 | 0) >> 3] / +$1013(+(2.0));
   HEAPF64[(HEAP32[($8_1 + 52 | 0) >> 2] | 0) >> 3] = $134_1;
   $113_1 = HEAP32[($8_1 + 48 | 0) >> 2] | 0;
   label$13 : {
    if (($113_1 | 0) == (0 | 0) & 1 | 0) {
     break label$13
    }
    $314($113_1 | 0) | 0;
    $1017($113_1 | 0);
   }
   $34(1 | 0);
   HEAP32[($8_1 + 76 | 0) >> 2] = 0;
  }
  $121_1 = HEAP32[($8_1 + 76 | 0) >> 2] | 0;
  label$14 : {
   $125_1 = $8_1 + 80 | 0;
   if ($125_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $125_1;
  }
  return $121_1 | 0;
 }
 
 function $954($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $121_1 = 0, $176_1 = 0;
  $3_1 = global$0 - 32 | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 2496 | 0) >> 2] | 0 | 0) >= (624 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) < (227 | 0) & 1 | 0)) {
      break label$2
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) & -2147483648 | 0 | ((HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0) & 2147483647 | 0) | 0;
     HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = ((HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 397 | 0) << 2 | 0) | 0) >> 2] | 0) ^ ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 1 | 0) | 0) ^ ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) & 1 | 0 ? -1727483681 : 0) | 0;
     HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   label$4 : {
    label$5 : while (1) {
     if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) < (623 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) & -2147483648 | 0 | ((HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0) & 2147483647 | 0) | 0;
     HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = ((HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + -227 | 0) << 2 | 0) | 0) >> 2] | 0) ^ ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) >>> 1 | 0) | 0) ^ ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) & 1 | 0 ? -1727483681 : 0) | 0;
     HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$5;
    };
   }
   $121_1 = 0;
   HEAP32[$3_1 >> 2] = (HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 2492 | 0) >> 2] | 0) & -2147483648 | 0 | ((HEAP32[(HEAP32[($3_1 + 16 | 0) >> 2] | 0) >> 2] | 0) & 2147483647 | 0) | 0;
   HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 2492 | 0) >> 2] = ((HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 1584 | 0) >> 2] | 0) ^ ((HEAP32[$3_1 >> 2] | 0) >>> 1 | 0) | 0) ^ ((HEAP32[$3_1 >> 2] | 0) & 1 | 0 ? -1727483681 : $121_1) | 0;
   HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 2496 | 0) >> 2] = $121_1;
  }
  HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 2496 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) ^ ((HEAP32[($3_1 + 20 | 0) >> 2] | 0) >>> 11 | 0) | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) ^ (((HEAP32[($3_1 + 20 | 0) >> 2] | 0) << 7 | 0) & -1658038656 | 0) | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) ^ (((HEAP32[($3_1 + 20 | 0) >> 2] | 0) << 15 | 0) & -272236544 | 0) | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) ^ ((HEAP32[($3_1 + 20 | 0) >> 2] | 0) >>> 18 | 0) | 0;
  $176_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  HEAP32[($176_1 + 2496 | 0) >> 2] = (HEAP32[($176_1 + 2496 | 0) >> 2] | 0) + 1 | 0;
  return HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0;
 }
 
 function $955($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0, $12_1 = 0.0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $12_1 = +(($954(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0) / 4294967296.0;
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return +$12_1;
 }
 
 function $956($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $53_1 = 0, $64_1 = 0, $63_1 = 0, $58_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $63_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $63_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1071(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, 0 | 0, 2500 | 0) | 0;
  label$3 : {
   if (HEAP32[($4_1 + 8 | 0) >> 2] | 0) {
    break label$3
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = 4357;
  }
  HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 1;
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) < (624 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_imul((HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + (((HEAP32[$4_1 >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0) ^ ((HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + (((HEAP32[$4_1 >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0) >>> 30 | 0) | 0, 1812433253) + (HEAP32[$4_1 >> 2] | 0) | 0;
    $53_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0;
    HEAP32[$53_1 >> 2] = HEAP32[$53_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    continue label$5;
   };
  }
  $58_1 = 0;
  HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 2496 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
  label$6 : {
   $64_1 = $4_1 + 16 | 0;
   if ($64_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $64_1;
  }
  return $58_1 | 0;
 }
 
 function $957($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0, $18_1 = 0, $26_1 = 0, $25_1 = 0, $22_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $25_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $1068(1 | 0, 2500 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if ((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$4
    }
    $14_1 = 2;
    $28(8764 | 0, 8786 | 0, 417 | 0, $14_1 | 0) | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $14_1;
    break label$3;
   }
   $18_1 = 0;
   HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   $956(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, $18_1 | 0) | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = $18_1;
  }
  $22_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$5 : {
   $26_1 = $3_1 + 16 | 0;
   if ($26_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $26_1;
  }
  return $22_1 | 0;
 }
 
 function $958($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1064(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $959() {
  return 10116 | 0;
 }
 
 function $960($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $26_1 = 0, $25_1 = 0, $22_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $25_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0](HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  label$3 : {
   label$4 : {
    if (!(HEAP32[($4_1 + 12 | 0) >> 2] | 0)) {
     break label$4
    }
    $28(8868 | 0, 8786 | 0, 691 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    break label$3;
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  }
  $22_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$5 : {
   $26_1 = $4_1 + 32 | 0;
   if ($26_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $26_1;
  }
  return $22_1 | 0;
 }
 
 function $961($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $73_1 = 0.0, $29_1 = 0, $84_1 = 0.0, $57_1 = 0, $60_1 = 0, $68_1 = 0, $67_1 = 0, $64_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $67_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $67_1;
  }
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 24 | 0) >> 2] | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    if (!((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    $73_1 = +FUNCTION_TABLE[HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0](HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) * +(((HEAP32[($5_1 + 16 | 0) >> 2] | 0) - (HEAP32[($5_1 + 20 | 0) >> 2] | 0) | 0) + 1 | 0 | 0) + +(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
    label$5 : {
     label$6 : {
      if (!(Math_abs($73_1) < 2147483648.0)) {
       break label$6
      }
      $29_1 = ~~$73_1;
      break label$5;
     }
     $29_1 = -2147483648;
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = $29_1;
    break label$3;
   }
   label$7 : {
    if (!((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$7
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    $84_1 = +((FUNCTION_TABLE[HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0](HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) | 0) >>> 0) / (+((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0) + 1.0) * +(((HEAP32[($5_1 + 16 | 0) >> 2] | 0) - (HEAP32[($5_1 + 20 | 0) >> 2] | 0) | 0) + 1 | 0 | 0) + +(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
    label$8 : {
     label$9 : {
      if (!(Math_abs($84_1) < 2147483648.0)) {
       break label$9
      }
      $57_1 = ~~$84_1;
      break label$8;
     }
     $57_1 = -2147483648;
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = $57_1;
    break label$3;
   }
   $60_1 = 38;
   $28(8869 | 0, 8786 | 0, 767 | 0, $60_1 | 0) | 0;
   HEAP32[($5_1 + 28 | 0) >> 2] = $60_1;
  }
  $64_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$10 : {
   $68_1 = $5_1 + 32 | 0;
   if ($68_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $68_1;
  }
  return $64_1 | 0;
 }
 
 function $962($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $25_1 = 0, $24_1 = 0, $21_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $24_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $24_1;
  }
  $5_1 = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 80 | 0) >> 2] = $5_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[(0 + 14384 | 0) >> 2] | 0 | 0) != ($5_1 | 0) & 1 | 0)) {
     break label$4
    }
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[(HEAP32[(0 + 14384 | 0) >> 2] | 0) >> 2] | 0](HEAP32[($4_1 + 8 | 0) >> 2] | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
    break label$3;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  $21_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$5 : {
   $25_1 = $4_1 + 16 | 0;
   if ($25_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  return $21_1 | 0;
 }
 
 function $963($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0, $18_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if (!((HEAP32[(0 + 14384 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[(0 + 14384 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0](HEAP32[($3_1 + 12 | 0) >> 2] | 0);
  }
  label$4 : {
   $19_1 = $3_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  return;
 }
 
 function $964($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $30_1 = 0, $29_1 = 0, $26_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 32 | 0;
  label$1 : {
   $29_1 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $29_1;
  }
  HEAP32[($7_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[(0 + 14384 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[(0 + 14384 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0](HEAP32[($7_1 + 24 | 0) >> 2] | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
    break label$3;
   }
   HEAP32[($7_1 + 28 | 0) >> 2] = 0;
  }
  $26_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  label$5 : {
   $30_1 = $7_1 + 32 | 0;
   if ($30_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $30_1;
  }
  return $26_1 | 0;
 }
 
 function $965($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $26_1 = 0, $25_1 = 0, $22_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $25_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$5_1 >> 2] = $2_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[(0 + 14384 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[(0 + 14384 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0](HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0, HEAP32[$5_1 >> 2] | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
    break label$3;
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  }
  $22_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  label$5 : {
   $26_1 = $5_1 + 16 | 0;
   if ($26_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $26_1;
  }
  return $22_1 | 0;
 }
 
 function $966($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $26_1 = 0, $25_1 = 0, $22_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $25_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $25_1;
  }
  HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$5_1 >> 2] = $2_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[(0 + 14384 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[(0 + 14384 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0](HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0, HEAP32[$5_1 >> 2] | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
    break label$3;
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  }
  $22_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  label$5 : {
   $26_1 = $5_1 + 16 | 0;
   if ($26_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $26_1;
  }
  return $22_1 | 0;
 }
 
 function $967($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAPU8[$1_1 >> 0] | 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   if (($3_1 | 0) != ($2_1 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    if (!$3_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) == ($2_1 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 - ($2_1 & 255 | 0) | 0 | 0;
 }
 
 function $968($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $969() {
  return 14388 | 0;
 }
 
 function $970() {
  return 10128 | 0;
 }
 
 function $971($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$3
     }
     return $972($0_1 | 0) | 0 | 0;
    }
    $1_1 = $1075($0_1 | 0) | 0;
    $2_1 = $972($0_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $1076($0_1 | 0);
    return $2_1 | 0;
   }
   $2_1 = 0;
   label$4 : {
    if (!(HEAP32[(0 + 10504 | 0) >> 2] | 0)) {
     break label$4
    }
    $2_1 = $971(HEAP32[(0 + 10504 | 0) >> 2] | 0 | 0) | 0;
   }
   label$5 : {
    $0_1 = HEAP32[($997() | 0) >> 2] | 0;
    if (!$0_1) {
     break label$5
    }
    label$6 : while (1) {
     $1_1 = 0;
     label$7 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$7
      }
      $1_1 = $1075($0_1 | 0) | 0;
     }
     label$8 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      $2_1 = $972($0_1 | 0) | 0 | $2_1 | 0;
     }
     label$9 : {
      if (!$1_1) {
       break label$9
      }
      $1076($0_1 | 0);
     }
     $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$6
     }
     break label$6;
    };
   }
   $998();
  }
  return $2_1 | 0;
 }
 
 function $972($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0]($0_1, 0, 0) | 0;
   if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
    break label$1
   }
   return -1 | 0;
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$2
   }
   i64toi32_i32$1 = $1_1 - $2_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  return 0 | 0;
 }
 
 function $973($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  i64toi32_i32$0 = $1$hi;
  $1009($1096(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 & 255 | 0 | 0, $3_1 + 8 | 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $1_1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  label$3 : {
   $5_1 = $3_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $974($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ($1_1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[(($975() | 0) + 176 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      (wasm2js_i32$0 = $969() | 0, wasm2js_i32$1 = 25), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$3;
     }
     label$5 : {
      if ($1_1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1_1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     (wasm2js_i32$0 = $969() | 0, wasm2js_i32$1 = 25), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return 1 | 0;
 }
 
 function $975() {
  return $970() | 0 | 0;
 }
 
 function $976($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $974($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $977($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!$2_1) {
       break label$4
      }
      if (!($0_1 & 3 | 0)) {
       break label$4
      }
      $4_1 = $1_1 & 255 | 0;
      label$5 : while (1) {
       if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
        break label$3
       }
       $0_1 = $0_1 + 1 | 0;
       $2_1 = $2_1 + -1 | 0;
       $3_1 = ($2_1 | 0) != (0 | 0);
       if (!$2_1) {
        break label$4
       }
       if ($0_1 & 3 | 0) {
        continue label$5
       }
       break label$5;
      };
     }
     if (!$3_1) {
      break label$2
     }
    }
    if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
     break label$1
    }
    label$6 : {
     label$7 : {
      if ($2_1 >>> 0 < 4 >>> 0) {
       break label$7
      }
      $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
      label$8 : while (1) {
       $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
       if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
        break label$6
       }
       $0_1 = $0_1 + 4 | 0;
       $2_1 = $2_1 + -4 | 0;
       if ($2_1 >>> 0 > 3 >>> 0) {
        continue label$8
       }
       break label$8;
      };
     }
     if (!$2_1) {
      break label$2
     }
    }
    $3_1 = $1_1 & 255 | 0;
    label$9 : while (1) {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($3_1 | 0)) {
      break label$1
     }
     $0_1 = $0_1 + 1 | 0;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue label$9
     }
     break label$9;
    };
   }
   return 0 | 0;
  }
  return $0_1 | 0;
 }
 
 function $978($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $10_1 = 0, $3$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $3_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $10_1 & 2047 | 0;
   if (($2_1 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($2_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0_1 != 0.0) {
       break label$4
      }
      $2_1 = 0;
      break label$3;
     }
     $0_1 = +$978(+($0_1 * 18446744073709551615.0), $1_1 | 0);
     $2_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $2_1;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1022 | 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $979($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0;
  label$1 : {
   $5_1 = global$0 - 208 | 0;
   $8_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
  $2_1 = 0;
  $1071($5_1 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    if (($980(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$4
    }
    $1_1 = -1;
    break label$3;
   }
   label$5 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$5
    }
    $2_1 = $1075($0_1 | 0) | 0;
   }
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$6 : {
    if ((HEAP8[($0_1 + 74 | 0) >> 0] | 0 | 0) > (0 | 0)) {
     break label$6
    }
    HEAP32[$0_1 >> 2] = $6_1 & -33 | 0;
   }
   $6_1 = $6_1 & 32 | 0;
   label$7 : {
    label$8 : {
     if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
      break label$8
     }
     $1_1 = $980($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
     break label$7;
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = 80;
    HEAP32[($0_1 + 16 | 0) >> 2] = $5_1 + 80 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
    $7_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
    $1_1 = $980($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
    if (!$7_1) {
     break label$7
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $7_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    $1_1 = $3_1 ? $1_1 : -1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $3_1 | $6_1 | 0;
   $1_1 = $3_1 & 32 | 0 ? -1 : $1_1;
   if (!$2_1) {
    break label$3
   }
   $1076($0_1 | 0);
  }
  label$9 : {
   $9_1 = $5_1 + 208 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $1_1 | 0;
 }
 
 function $980($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $19_1 = 0, i64toi32_i32$5 = 0, $12_1 = 0, i64toi32_i32$3 = 0, $20_1 = 0, $11_1 = 0, $17_1 = 0, $18_1 = 0, i64toi32_i32$2 = 0, $16_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, $24_1 = 0, $24$hi = 0, $10_1 = 0, $21_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $23_1 = 0, $22_1 = 0, $8_1 = 0, $282_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   $7_1 = global$0 - 80 | 0;
   $22_1 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
  $8_1 = $7_1 + 55 | 0;
  $9_1 = $7_1 + 56 | 0;
  $10_1 = 0;
  $11_1 = 0;
  $1_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : while (1) {
     label$6 : {
      if (($11_1 | 0) < (0 | 0)) {
       break label$6
      }
      label$7 : {
       if (($1_1 | 0) <= (2147483647 - $11_1 | 0 | 0)) {
        break label$7
       }
       (wasm2js_i32$0 = $969() | 0, wasm2js_i32$1 = 61), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       $11_1 = -1;
       break label$6;
      }
      $11_1 = $1_1 + $11_1 | 0;
     }
     $12_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
     $1_1 = $12_1;
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           label$14 : {
            label$15 : {
             label$16 : {
              label$17 : {
               label$18 : {
                label$19 : {
                 label$20 : {
                  label$21 : {
                   $13_1 = HEAPU8[$1_1 >> 0] | 0;
                   if (!$13_1) {
                    break label$21
                   }
                   label$22 : {
                    label$23 : while (1) {
                     label$24 : {
                      label$25 : {
                       label$26 : {
                        $13_1 = $13_1 & 255 | 0;
                        if ($13_1) {
                         break label$26
                        }
                        $13_1 = $1_1;
                        break label$25;
                       }
                       if (($13_1 | 0) != (37 | 0)) {
                        break label$24
                       }
                       $13_1 = $1_1;
                       label$27 : while (1) {
                        if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (37 | 0)) {
                         break label$25
                        }
                        $14_1 = $1_1 + 2 | 0;
                        HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
                        $13_1 = $13_1 + 1 | 0;
                        $15_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
                        $1_1 = $14_1;
                        if (($15_1 | 0) == (37 | 0)) {
                         continue label$27
                        }
                        break label$27;
                       };
                      }
                      $1_1 = $13_1 - $12_1 | 0;
                      label$28 : {
                       if (!$0_1) {
                        break label$28
                       }
                       $981($0_1 | 0, $12_1 | 0, $1_1 | 0);
                      }
                      if ($1_1) {
                       continue label$5
                      }
                      $16_1 = -1;
                      $13_1 = 1;
                      $14_1 = $968(HEAP8[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0 | 0) | 0;
                      $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                      label$29 : {
                       if (!$14_1) {
                        break label$29
                       }
                       if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                        break label$29
                       }
                       $16_1 = (HEAP8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0;
                       $10_1 = 1;
                       $13_1 = 3;
                      }
                      $1_1 = $1_1 + $13_1 | 0;
                      HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
                      $13_1 = 0;
                      label$30 : {
                       label$31 : {
                        $17_1 = HEAP8[$1_1 >> 0] | 0;
                        $15_1 = $17_1 + -32 | 0;
                        if ($15_1 >>> 0 <= 31 >>> 0) {
                         break label$31
                        }
                        $14_1 = $1_1;
                        break label$30;
                       }
                       $14_1 = $1_1;
                       $15_1 = 1 << $15_1 | 0;
                       if (!($15_1 & 75913 | 0)) {
                        break label$30
                       }
                       label$32 : while (1) {
                        $14_1 = $1_1 + 1 | 0;
                        HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
                        $13_1 = $15_1 | $13_1 | 0;
                        $17_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
                        $15_1 = $17_1 + -32 | 0;
                        if ($15_1 >>> 0 > 31 >>> 0) {
                         break label$30
                        }
                        $1_1 = $14_1;
                        $15_1 = 1 << $15_1 | 0;
                        if ($15_1 & 75913 | 0) {
                         continue label$32
                        }
                        break label$32;
                       };
                      }
                      label$33 : {
                       label$34 : {
                        if (($17_1 | 0) != (42 | 0)) {
                         break label$34
                        }
                        label$35 : {
                         label$36 : {
                          if (!($968(HEAP8[($14_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                           break label$36
                          }
                          $14_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                          if ((HEAPU8[($14_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                           break label$36
                          }
                          HEAP32[((((HEAP8[($14_1 + 1 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
                          $1_1 = $14_1 + 3 | 0;
                          $18_1 = HEAP32[((((HEAP8[($14_1 + 1 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
                          $10_1 = 1;
                          break label$35;
                         }
                         if ($10_1) {
                          break label$4
                         }
                         $10_1 = 0;
                         $18_1 = 0;
                         label$37 : {
                          if (!$0_1) {
                           break label$37
                          }
                          $1_1 = HEAP32[$2_1 >> 2] | 0;
                          HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
                          $18_1 = HEAP32[$1_1 >> 2] | 0;
                         }
                         $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0;
                        }
                        HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
                        if (($18_1 | 0) > (-1 | 0)) {
                         break label$33
                        }
                        $18_1 = 0 - $18_1 | 0;
                        $13_1 = $13_1 | 8192 | 0;
                        break label$33;
                       }
                       $18_1 = $982($7_1 + 76 | 0 | 0) | 0;
                       if (($18_1 | 0) < (0 | 0)) {
                        break label$4
                       }
                       $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                      }
                      $19_1 = -1;
                      label$38 : {
                       if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (46 | 0)) {
                        break label$38
                       }
                       label$39 : {
                        if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
                         break label$39
                        }
                        label$40 : {
                         if (!($968(HEAP8[($1_1 + 2 | 0) >> 0] | 0 | 0) | 0)) {
                          break label$40
                         }
                         $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                         if ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                          break label$40
                         }
                         HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
                         $19_1 = HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
                         $1_1 = $1_1 + 4 | 0;
                         HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
                         break label$38;
                        }
                        if ($10_1) {
                         break label$4
                        }
                        label$41 : {
                         label$42 : {
                          if ($0_1) {
                           break label$42
                          }
                          $19_1 = 0;
                          break label$41;
                         }
                         $1_1 = HEAP32[$2_1 >> 2] | 0;
                         HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
                         $19_1 = HEAP32[$1_1 >> 2] | 0;
                        }
                        $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 2 | 0;
                        HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
                        break label$38;
                       }
                       HEAP32[($7_1 + 76 | 0) >> 2] = $1_1 + 1 | 0;
                       $19_1 = $982($7_1 + 76 | 0 | 0) | 0;
                       $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                      }
                      $14_1 = 0;
                      label$43 : while (1) {
                       $15_1 = $14_1;
                       $20_1 = -1;
                       if (((HEAP8[$1_1 >> 0] | 0) + -65 | 0) >>> 0 > 57 >>> 0) {
                        break label$3
                       }
                       $17_1 = $1_1 + 1 | 0;
                       HEAP32[($7_1 + 76 | 0) >> 2] = $17_1;
                       $14_1 = HEAP8[$1_1 >> 0] | 0;
                       $1_1 = $17_1;
                       $14_1 = HEAPU8[(($14_1 + Math_imul($15_1, 58) | 0) + 8863 | 0) >> 0] | 0;
                       if (($14_1 + -1 | 0) >>> 0 < 8 >>> 0) {
                        continue label$43
                       }
                       break label$43;
                      };
                      if (!$14_1) {
                       break label$3
                      }
                      label$44 : {
                       label$45 : {
                        label$46 : {
                         label$47 : {
                          if (($14_1 | 0) != (19 | 0)) {
                           break label$47
                          }
                          $20_1 = -1;
                          if (($16_1 | 0) <= (-1 | 0)) {
                           break label$46
                          }
                          break label$3;
                         }
                         if (($16_1 | 0) < (0 | 0)) {
                          break label$45
                         }
                         HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $14_1;
                         i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
                         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                         $282_1 = i64toi32_i32$0;
                         i64toi32_i32$0 = $7_1;
                         HEAP32[($7_1 + 64 | 0) >> 2] = $282_1;
                         HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$1;
                        }
                        $1_1 = 0;
                        if (!$0_1) {
                         continue label$5
                        }
                        break label$44;
                       }
                       if (!$0_1) {
                        break label$8
                       }
                       $983($7_1 + 64 | 0 | 0, $14_1 | 0, $2_1 | 0, $6_1 | 0);
                       $17_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                      }
                      $21_1 = $13_1 & -65537 | 0;
                      $13_1 = $13_1 & 8192 | 0 ? $21_1 : $13_1;
                      $20_1 = 0;
                      $16_1 = 8901;
                      $14_1 = $9_1;
                      $1_1 = HEAP8[($17_1 + -1 | 0) >> 0] | 0;
                      $1_1 = $15_1 ? (($1_1 & 15 | 0 | 0) == (3 | 0) ? $1_1 & -33 | 0 : $1_1) : $1_1;
                      $17_1 = $1_1 + -88 | 0;
                      if ($17_1 >>> 0 <= 32 >>> 0) {
                       break label$22
                      }
                      label$48 : {
                       label$49 : {
                        label$50 : {
                         label$51 : {
                          label$52 : {
                           $15_1 = $1_1 + -65 | 0;
                           if ($15_1 >>> 0 <= 6 >>> 0) {
                            break label$52
                           }
                           if (($1_1 | 0) != (83 | 0)) {
                            break label$9
                           }
                           if (!$19_1) {
                            break label$51
                           }
                           $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                           break label$49;
                          }
                          switch ($15_1 | 0) {
                          case 2:
                           break label$50;
                          case 1:
                          case 3:
                           break label$9;
                          default:
                           break label$20;
                          };
                         }
                         $1_1 = 0;
                         $984($0_1 | 0, 32 | 0, $18_1 | 0, 0 | 0, $13_1 | 0);
                         break label$48;
                        }
                        HEAP32[($7_1 + 12 | 0) >> 2] = 0;
                        i64toi32_i32$2 = $7_1;
                        i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                        i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                        HEAP32[($7_1 + 8 | 0) >> 2] = i64toi32_i32$1;
                        HEAP32[($7_1 + 64 | 0) >> 2] = $7_1 + 8 | 0;
                        $19_1 = -1;
                        $14_1 = $7_1 + 8 | 0;
                       }
                       $1_1 = 0;
                       label$53 : {
                        label$54 : while (1) {
                         $15_1 = HEAP32[$14_1 >> 2] | 0;
                         if (!$15_1) {
                          break label$53
                         }
                         label$55 : {
                          $15_1 = $976($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
                          $12_1 = ($15_1 | 0) < (0 | 0);
                          if ($12_1) {
                           break label$55
                          }
                          if ($15_1 >>> 0 > ($19_1 - $1_1 | 0) >>> 0) {
                           break label$55
                          }
                          $14_1 = $14_1 + 4 | 0;
                          $1_1 = $15_1 + $1_1 | 0;
                          if ($19_1 >>> 0 > $1_1 >>> 0) {
                           continue label$54
                          }
                          break label$53;
                         }
                         break label$54;
                        };
                        $20_1 = -1;
                        if ($12_1) {
                         break label$3
                        }
                       }
                       $984($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 | 0);
                       label$56 : {
                        if ($1_1) {
                         break label$56
                        }
                        $1_1 = 0;
                        break label$48;
                       }
                       $15_1 = 0;
                       $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                       label$57 : while (1) {
                        $12_1 = HEAP32[$14_1 >> 2] | 0;
                        if (!$12_1) {
                         break label$48
                        }
                        $12_1 = $976($7_1 + 4 | 0 | 0, $12_1 | 0) | 0;
                        $15_1 = $12_1 + $15_1 | 0;
                        if (($15_1 | 0) > ($1_1 | 0)) {
                         break label$48
                        }
                        $981($0_1 | 0, $7_1 + 4 | 0 | 0, $12_1 | 0);
                        $14_1 = $14_1 + 4 | 0;
                        if ($15_1 >>> 0 < $1_1 >>> 0) {
                         continue label$57
                        }
                        break label$57;
                       };
                      }
                      $984($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 ^ 8192 | 0 | 0);
                      $1_1 = ($18_1 | 0) > ($1_1 | 0) ? $18_1 : $1_1;
                      continue label$5;
                     }
                     $14_1 = $1_1 + 1 | 0;
                     HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
                     $13_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
                     $1_1 = $14_1;
                     continue label$23;
                    };
                   }
                   switch ($17_1 | 0) {
                   case 29:
                    break label$12;
                   case 22:
                    break label$13;
                   case 24:
                    break label$15;
                   case 23:
                    break label$16;
                   case 12:
                   case 17:
                    break label$17;
                   case 11:
                    break label$18;
                   case 27:
                    break label$19;
                   case 9:
                   case 13:
                   case 14:
                   case 15:
                    break label$20;
                   case 1:
                   case 2:
                   case 3:
                   case 4:
                   case 5:
                   case 6:
                   case 7:
                   case 8:
                   case 10:
                   case 16:
                   case 18:
                   case 19:
                   case 20:
                   case 21:
                   case 25:
                   case 26:
                   case 28:
                   case 30:
                   case 31:
                    break label$9;
                   default:
                    break label$14;
                   };
                  }
                  $20_1 = $11_1;
                  if ($0_1) {
                   break label$3
                  }
                  if (!$10_1) {
                   break label$8
                  }
                  $1_1 = 1;
                  label$58 : {
                   label$59 : while (1) {
                    $13_1 = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
                    if (!$13_1) {
                     break label$58
                    }
                    $983($3_1 + ($1_1 << 3 | 0) | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
                    $20_1 = 1;
                    $1_1 = $1_1 + 1 | 0;
                    if (($1_1 | 0) != (10 | 0)) {
                     continue label$59
                    }
                    break label$3;
                   };
                  }
                  $20_1 = 1;
                  if ($1_1 >>> 0 > 9 >>> 0) {
                   break label$3
                  }
                  label$60 : {
                   label$61 : while (1) {
                    $13_1 = $1_1;
                    $1_1 = $1_1 + 1 | 0;
                    if (($1_1 | 0) == (10 | 0)) {
                     break label$60
                    }
                    if (!(HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0)) {
                     continue label$61
                    }
                    break label$61;
                   };
                  }
                  $20_1 = $13_1 >>> 0 < 9 >>> 0 ? -1 : 1;
                  break label$3;
                 }
                 $1_1 = FUNCTION_TABLE[$5_1]($0_1, +HEAPF64[($7_1 + 64 | 0) >> 3], $18_1, $19_1, $13_1, $1_1) | 0;
                 continue label$5;
                }
                $20_1 = 0;
                $1_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                $12_1 = $1_1 ? $1_1 : 8911;
                $1_1 = $977($12_1 | 0, 0 | 0, $19_1 | 0) | 0;
                $14_1 = $1_1 ? $1_1 : $12_1 + $19_1 | 0;
                $13_1 = $21_1;
                $19_1 = $1_1 ? $1_1 - $12_1 | 0 : $19_1;
                break label$9;
               }
               i64toi32_i32$2 = $7_1;
               i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
               i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
               HEAP8[($7_1 + 55 | 0) >> 0] = i64toi32_i32$0;
               $19_1 = 1;
               $12_1 = $8_1;
               $14_1 = $9_1;
               $13_1 = $21_1;
               break label$9;
              }
              label$62 : {
               i64toi32_i32$2 = $7_1;
               i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
               i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
               $24_1 = i64toi32_i32$1;
               $24$hi = i64toi32_i32$0;
               i64toi32_i32$2 = i64toi32_i32$1;
               i64toi32_i32$1 = -1;
               i64toi32_i32$3 = -1;
               if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                $32_1 = 1
               } else {
                if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                 if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                  $33_1 = 0
                 } else {
                  $33_1 = 1
                 }
                 $34_1 = $33_1;
                } else {
                 $34_1 = 0
                }
                $32_1 = $34_1;
               }
               if ($32_1) {
                break label$62
               }
               i64toi32_i32$2 = $24$hi;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 0;
               i64toi32_i32$0 = $24$hi;
               i64toi32_i32$1 = $24_1;
               i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
               i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
               $24_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
               $24$hi = i64toi32_i32$5;
               i64toi32_i32$3 = $7_1;
               HEAP32[($7_1 + 64 | 0) >> 2] = $24_1;
               HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$5;
               $20_1 = 1;
               $16_1 = 8901;
               break label$11;
              }
              label$63 : {
               if (!($13_1 & 2048 | 0)) {
                break label$63
               }
               $20_1 = 1;
               $16_1 = 8902;
               break label$11;
              }
              $20_1 = $13_1 & 1 | 0;
              $16_1 = $20_1 ? 8903 : 8901;
              break label$11;
             }
             $20_1 = 0;
             $16_1 = 8901;
             i64toi32_i32$2 = $7_1;
             i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
             i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
             $12_1 = $985(i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, $9_1 | 0) | 0;
             if (!($13_1 & 8 | 0)) {
              break label$10
             }
             $1_1 = $9_1 - $12_1 | 0;
             $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1 + 1 | 0;
             break label$10;
            }
            $19_1 = $19_1 >>> 0 > 8 >>> 0 ? $19_1 : 8;
            $13_1 = $13_1 | 8 | 0;
            $1_1 = 120;
           }
           $20_1 = 0;
           $16_1 = 8901;
           i64toi32_i32$2 = $7_1;
           i64toi32_i32$3 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
           i64toi32_i32$5 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
           $12_1 = $986(i64toi32_i32$3 | 0, i64toi32_i32$5 | 0, $9_1 | 0, $1_1 & 32 | 0 | 0) | 0;
           if (!($13_1 & 8 | 0)) {
            break label$10
           }
           i64toi32_i32$2 = $7_1;
           i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
           i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
           if (!(i64toi32_i32$5 | i64toi32_i32$3 | 0)) {
            break label$10
           }
           $16_1 = ($1_1 >>> 4 | 0) + 8901 | 0;
           $20_1 = 2;
           break label$10;
          }
          $1_1 = 0;
          $13_1 = $15_1 & 255 | 0;
          if ($13_1 >>> 0 > 7 >>> 0) {
           continue label$5
          }
          label$64 : {
           switch ($13_1 | 0) {
           default:
            HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
            continue label$5;
           case 1:
            HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
            continue label$5;
           case 2:
            i64toi32_i32$5 = $11_1;
            i64toi32_i32$3 = i64toi32_i32$5 >> 31 | 0;
            i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
            HEAP32[i64toi32_i32$5 >> 2] = $11_1;
            HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$3;
            continue label$5;
           case 3:
            HEAP16[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 1] = $11_1;
            continue label$5;
           case 4:
            HEAP8[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 0] = $11_1;
            continue label$5;
           case 6:
            HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
            continue label$5;
           case 5:
            continue label$5;
           case 7:
            break label$64;
           };
          }
          i64toi32_i32$5 = $11_1;
          i64toi32_i32$3 = i64toi32_i32$5 >> 31 | 0;
          i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
          HEAP32[i64toi32_i32$5 >> 2] = $11_1;
          HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$3;
          continue label$5;
         }
         $20_1 = 0;
         $16_1 = 8901;
         i64toi32_i32$2 = $7_1;
         i64toi32_i32$3 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
         $24_1 = i64toi32_i32$3;
         $24$hi = i64toi32_i32$5;
        }
        i64toi32_i32$5 = $24$hi;
        $12_1 = $987($24_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
       }
       $13_1 = ($19_1 | 0) > (-1 | 0) ? $13_1 & -65537 | 0 : $13_1;
       i64toi32_i32$2 = $7_1;
       i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
       $24_1 = i64toi32_i32$5;
       $24$hi = i64toi32_i32$3;
       label$71 : {
        label$72 : {
         if ($19_1) {
          break label$72
         }
         i64toi32_i32$3 = $24$hi;
         if (!!($24_1 | i64toi32_i32$3 | 0)) {
          break label$72
         }
         $19_1 = 0;
         $12_1 = $9_1;
         break label$71;
        }
        i64toi32_i32$3 = $24$hi;
        $1_1 = ($9_1 - $12_1 | 0) + !($24_1 | i64toi32_i32$3 | 0) | 0;
        $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1;
       }
       $14_1 = $9_1;
      }
      $15_1 = $14_1 - $12_1 | 0;
      $17_1 = ($19_1 | 0) < ($15_1 | 0) ? $15_1 : $19_1;
      $14_1 = $20_1 + $17_1 | 0;
      $1_1 = ($18_1 | 0) < ($14_1 | 0) ? $14_1 : $18_1;
      $984($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 | 0);
      $981($0_1 | 0, $16_1 | 0, $20_1 | 0);
      $984($0_1 | 0, 48 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 65536 | 0 | 0);
      $984($0_1 | 0, 48 | 0, $17_1 | 0, $15_1 | 0, 0 | 0);
      $981($0_1 | 0, $12_1 | 0, $15_1 | 0);
      $984($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 8192 | 0 | 0);
      continue label$5;
     }
     break label$5;
    };
    $20_1 = 0;
    break label$3;
   }
   $20_1 = -1;
  }
  label$73 : {
   $23_1 = $7_1 + 80 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return $20_1 | 0;
 }
 
 function $981($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   $1074($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  }
 }
 
 function $982($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = 0;
  label$1 : {
   if (!($968(HEAP8[(HEAP32[$0_1 >> 2] | 0) >> 0] | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = HEAP8[$2_1 >> 0] | 0;
    HEAP32[$0_1 >> 2] = $2_1 + 1 | 0;
    $1_1 = ($3_1 + Math_imul($1_1, 10) | 0) + -48 | 0;
    if ($968(HEAP8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $983($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $26_1 = 0, $34_1 = 0, $44_1 = 0, $52_1 = 0, $60_1 = 0, $68_1 = 0, $76_1 = 0, $86_1 = 0;
  label$1 : {
   if ($1_1 >>> 0 > 20 >>> 0) {
    break label$1
   }
   $1_1 = $1_1 + -9 | 0;
   if ($1_1 >>> 0 > 9 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($1_1 | 0) {
    default:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     return;
    case 1:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $26_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $26_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 2:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = 0;
     $34_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $34_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 3:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $44_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $44_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 4:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $52_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $52_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 5:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
     i64toi32_i32$1 = 0;
     $60_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $60_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 6:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $68_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $68_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 7:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
     i64toi32_i32$1 = 0;
     $76_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $76_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 8:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $86_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $86_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 9:
     break label$2;
    };
   }
   FUNCTION_TABLE[$3_1]($0_1, $2_1);
  }
 }
 
 function $984($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $5_1 = global$0 - 256 | 0;
   $6_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$3
   }
   if ($4_1 & 73728 | 0) {
    break label$3
   }
   $2_1 = $2_1 - $3_1 | 0;
   $3_1 = $2_1 >>> 0 < 256 >>> 0;
   $1071($5_1 | 0, $1_1 | 0, ($3_1 ? $2_1 : 256) | 0) | 0;
   label$4 : {
    if ($3_1) {
     break label$4
    }
    label$5 : while (1) {
     $981($0_1 | 0, $5_1 | 0, 256 | 0);
     $2_1 = $2_1 + -256 | 0;
     if ($2_1 >>> 0 > 255 >>> 0) {
      continue label$5
     }
     break label$5;
    };
   }
   $981($0_1 | 0, $5_1 | 0, $2_1 | 0);
  }
  label$6 : {
   $7_1 = $5_1 + 256 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
 }
 
 function $985($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $8_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 3;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $8_1;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $986($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $9_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 9392 | 0) >> 0] | 0 | $2_1 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $9_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $9_1;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $987($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $5$hi = 0, $3_1 = 0, $16_1 = 0, $16$hi = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $5_1 = $0_1;
    $5$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $5_1 = i64toi32_i32$0;
    $5$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($5_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $2_1 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $5$hi;
    $0_1 = $5_1;
    $0$hi = i64toi32_i32$2;
    if ($2_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $5$hi;
   $2_1 = $5_1;
   if (!$2_1) {
    break label$4
   }
   label$5 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $3_1 = ($2_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1_1 >> 0] = $2_1 - Math_imul($3_1, 10) | 0 | 48 | 0;
    $4_1 = $2_1 >>> 0 > 9 >>> 0;
    $2_1 = $3_1;
    if ($4_1) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1_1 | 0;
 }
 
 function $988($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $979($0_1 | 0, $1_1 | 0, $2_1 | 0, 31 | 0, 32 | 0) | 0 | 0;
 }
 
 function $989($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $10_1 = 0, $17_1 = 0, $16_1 = 0, $14_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $13_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $20_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $15_1 = 0, $21_1 = 0, $11_1 = 0, $12_1 = 0, $18_1 = 0, $26_1 = 0.0, $7_1 = 0, $24_1 = 0, $19_1 = 0, $24$hi = 0, $8_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $25$hi = 0, $47_1 = 0, $23_1 = 0, $22_1 = 0, $25_1 = 0, $163_1 = 0, $165$hi = 0, $167$hi = 0, $169_1 = 0, $169$hi = 0, $171$hi = 0, $175_1 = 0, $175$hi = 0, $811_1 = 0;
  label$1 : {
   $6_1 = global$0 - 560 | 0;
   $22_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$3 : {
   label$4 : {
    i64toi32_i32$0 = $991(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $44_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $45_1 = 0
      } else {
       $45_1 = 1
      }
      $46_1 = $45_1;
     } else {
      $46_1 = 0
     }
     $44_1 = $46_1;
    }
    if ($44_1) {
     break label$4
    }
    $7_1 = 1;
    $8_1 = 9408;
    $1_1 = -$1_1;
    i64toi32_i32$2 = $991(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$2;
    $24$hi = i64toi32_i32$1;
    break label$3;
   }
   label$5 : {
    if (!($4_1 & 2048 | 0)) {
     break label$5
    }
    $7_1 = 1;
    $8_1 = 9411;
    break label$3;
   }
   $7_1 = $4_1 & 1 | 0;
   $8_1 = $7_1 ? 9414 : 9409;
  }
  label$6 : {
   label$7 : {
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $24_1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$7
    }
    $9_1 = $7_1 + 3 | 0;
    $984($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 & -65537 | 0 | 0);
    $981($0_1 | 0, $8_1 | 0, $7_1 | 0);
    $10_1 = ($5_1 >>> 5 | 0) & 1 | 0;
    $981($0_1 | 0, ($1_1 != $1_1 ? ($10_1 ? 9435 : 9439) : $10_1 ? 9427 : 9431) | 0, 3 | 0);
    $984($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$6;
   }
   $11_1 = $6_1 + 16 | 0;
   label$8 : {
    label$9 : {
     label$10 : {
      label$11 : {
       $1_1 = +$978(+$1_1, $6_1 + 44 | 0 | 0);
       $1_1 = $1_1 + $1_1;
       if ($1_1 == 0.0) {
        break label$11
       }
       $10_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $10_1 + -1 | 0;
       $12_1 = $5_1 | 32 | 0;
       if (($12_1 | 0) != (97 | 0)) {
        break label$10
       }
       break label$8;
      }
      $12_1 = $5_1 | 32 | 0;
      if (($12_1 | 0) == (97 | 0)) {
       break label$8
      }
      $13_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
      $14_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      break label$9;
     }
     $14_1 = $10_1 + -29 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $14_1;
     $13_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
     $1_1 = $1_1 * 268435456.0;
    }
    $15_1 = ($14_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 : $6_1 + 336 | 0;
    $16_1 = $15_1;
    label$12 : while (1) {
     label$13 : {
      label$14 : {
       if (!($1_1 < 4294967296.0 & $1_1 >= 0.0 | 0)) {
        break label$14
       }
       $10_1 = ~~$1_1 >>> 0;
       break label$13;
      }
      $10_1 = 0;
     }
     HEAP32[$16_1 >> 2] = $10_1;
     $16_1 = $16_1 + 4 | 0;
     $1_1 = ($1_1 - +($10_1 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue label$12
     }
     break label$12;
    };
    label$15 : {
     label$16 : {
      if (($14_1 | 0) >= (1 | 0)) {
       break label$16
      }
      $10_1 = $16_1;
      $17_1 = $15_1;
      break label$15;
     }
     $17_1 = $15_1;
     label$17 : while (1) {
      $14_1 = ($14_1 | 0) < (29 | 0) ? $14_1 : 29;
      label$18 : {
       $10_1 = $16_1 + -4 | 0;
       if ($10_1 >>> 0 < $17_1 >>> 0) {
        break label$18
       }
       i64toi32_i32$1 = 0;
       $25_1 = $14_1;
       $25$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $24_1 = 0;
       $24$hi = i64toi32_i32$1;
       label$19 : while (1) {
        $163_1 = $10_1;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = HEAP32[$10_1 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $165$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $25$hi;
        i64toi32_i32$2 = $165$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $25$hi;
        i64toi32_i32$3 = $25_1;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $47_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $47_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $167$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $24$hi;
        i64toi32_i32$2 = $24_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $169_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $169$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $167$hi;
        i64toi32_i32$1 = $47_1;
        i64toi32_i32$2 = $169$hi;
        i64toi32_i32$3 = $169_1;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $24_1 = i64toi32_i32$4;
        $24$hi = i64toi32_i32$5;
        $171$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $24_1 = i64toi32_i32$1;
        $24$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $175_1 = i64toi32_i32$1;
        $175$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $171$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$1 = $175$hi;
        i64toi32_i32$3 = $175_1;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        HEAP32[$163_1 >> 2] = i64toi32_i32$2;
        $10_1 = $10_1 + -4 | 0;
        if ($10_1 >>> 0 >= $17_1 >>> 0) {
         continue label$19
        }
        break label$19;
       };
       i64toi32_i32$4 = $24$hi;
       $10_1 = $24_1;
       if (!$10_1) {
        break label$18
       }
       $17_1 = $17_1 + -4 | 0;
       HEAP32[$17_1 >> 2] = $10_1;
      }
      label$20 : {
       label$21 : while (1) {
        $10_1 = $16_1;
        if ($10_1 >>> 0 <= $17_1 >>> 0) {
         break label$20
        }
        $16_1 = $10_1 + -4 | 0;
        if (!(HEAP32[$16_1 >> 2] | 0)) {
         continue label$21
        }
        break label$21;
       };
      }
      $14_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $14_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $14_1;
      $16_1 = $10_1;
      if (($14_1 | 0) > (0 | 0)) {
       continue label$17
      }
      break label$17;
     };
    }
    label$22 : {
     if (($14_1 | 0) > (-1 | 0)) {
      break label$22
     }
     $18_1 = (($13_1 + 25 | 0 | 0) / (9 | 0) | 0) + 1 | 0;
     $19_1 = ($12_1 | 0) == (102 | 0);
     label$23 : while (1) {
      $9_1 = ($14_1 | 0) < (-9 | 0) ? 9 : 0 - $14_1 | 0;
      label$24 : {
       label$25 : {
        if ($17_1 >>> 0 < $10_1 >>> 0) {
         break label$25
        }
        $17_1 = HEAP32[$17_1 >> 2] | 0 ? $17_1 : $17_1 + 4 | 0;
        break label$24;
       }
       $20_1 = 1e9 >>> $9_1 | 0;
       $21_1 = (-1 << $9_1 | 0) ^ -1 | 0;
       $14_1 = 0;
       $16_1 = $17_1;
       label$26 : while (1) {
        $3_1 = HEAP32[$16_1 >> 2] | 0;
        HEAP32[$16_1 >> 2] = ($3_1 >>> $9_1 | 0) + $14_1 | 0;
        $14_1 = Math_imul($3_1 & $21_1 | 0, $20_1);
        $16_1 = $16_1 + 4 | 0;
        if ($16_1 >>> 0 < $10_1 >>> 0) {
         continue label$26
        }
        break label$26;
       };
       $17_1 = HEAP32[$17_1 >> 2] | 0 ? $17_1 : $17_1 + 4 | 0;
       if (!$14_1) {
        break label$24
       }
       HEAP32[$10_1 >> 2] = $14_1;
       $10_1 = $10_1 + 4 | 0;
      }
      $14_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $9_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $14_1;
      $16_1 = $19_1 ? $15_1 : $17_1;
      $10_1 = (($10_1 - $16_1 | 0) >> 2 | 0 | 0) > ($18_1 | 0) ? $16_1 + ($18_1 << 2 | 0) | 0 : $10_1;
      if (($14_1 | 0) < (0 | 0)) {
       continue label$23
      }
      break label$23;
     };
    }
    $16_1 = 0;
    label$27 : {
     if ($17_1 >>> 0 >= $10_1 >>> 0) {
      break label$27
     }
     $16_1 = Math_imul(($15_1 - $17_1 | 0) >> 2 | 0, 9);
     $14_1 = 10;
     $3_1 = HEAP32[$17_1 >> 2] | 0;
     if ($3_1 >>> 0 < 10 >>> 0) {
      break label$27
     }
     label$28 : while (1) {
      $16_1 = $16_1 + 1 | 0;
      $14_1 = Math_imul($14_1, 10);
      if ($3_1 >>> 0 >= $14_1 >>> 0) {
       continue label$28
      }
      break label$28;
     };
    }
    label$29 : {
     $14_1 = ($13_1 - (($12_1 | 0) == (102 | 0) ? 0 : $16_1) | 0) - (($13_1 | 0) != (0 | 0) & ($12_1 | 0) == (103 | 0) | 0) | 0;
     if (($14_1 | 0) >= (Math_imul(($10_1 - $15_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$29
     }
     $3_1 = $14_1 + 9216 | 0;
     $20_1 = ($3_1 | 0) / (9 | 0) | 0;
     $9_1 = (($20_1 << 2 | 0) + $15_1 | 0) + -4092 | 0;
     $14_1 = 10;
     label$30 : {
      $3_1 = $3_1 - Math_imul($20_1, 9) | 0;
      if (($3_1 | 0) > (7 | 0)) {
       break label$30
      }
      label$31 : while (1) {
       $14_1 = Math_imul($14_1, 10);
       $3_1 = $3_1 + 1 | 0;
       if (($3_1 | 0) != (8 | 0)) {
        continue label$31
       }
       break label$31;
      };
     }
     $20_1 = HEAP32[$9_1 >> 2] | 0;
     $21_1 = ($20_1 >>> 0) / ($14_1 >>> 0) | 0;
     $3_1 = $20_1 - Math_imul($21_1, $14_1) | 0;
     label$32 : {
      label$33 : {
       $18_1 = $9_1 + 4 | 0;
       if (($18_1 | 0) != ($10_1 | 0)) {
        break label$33
       }
       if (!$3_1) {
        break label$32
       }
      }
      $19_1 = $14_1 >>> 1 | 0;
      $26_1 = $3_1 >>> 0 < $19_1 >>> 0 ? .5 : ($18_1 | 0) == ($10_1 | 0) ? (($3_1 | 0) == ($19_1 | 0) ? 1.0 : 1.5) : 1.5;
      $1_1 = $21_1 & 1 | 0 ? 9007199254740994.0 : 9007199254740992.0;
      label$34 : {
       if (!$7_1) {
        break label$34
       }
       if ((HEAPU8[$8_1 >> 0] | 0 | 0) != (45 | 0)) {
        break label$34
       }
       $26_1 = -$26_1;
       $1_1 = -$1_1;
      }
      $3_1 = $20_1 - $3_1 | 0;
      HEAP32[$9_1 >> 2] = $3_1;
      if ($1_1 + $26_1 == $1_1) {
       break label$32
      }
      $16_1 = $3_1 + $14_1 | 0;
      HEAP32[$9_1 >> 2] = $16_1;
      label$35 : {
       if ($16_1 >>> 0 < 1e9 >>> 0) {
        break label$35
       }
       label$36 : while (1) {
        HEAP32[$9_1 >> 2] = 0;
        label$37 : {
         $9_1 = $9_1 + -4 | 0;
         if ($9_1 >>> 0 >= $17_1 >>> 0) {
          break label$37
         }
         $17_1 = $17_1 + -4 | 0;
         HEAP32[$17_1 >> 2] = 0;
        }
        $16_1 = (HEAP32[$9_1 >> 2] | 0) + 1 | 0;
        HEAP32[$9_1 >> 2] = $16_1;
        if ($16_1 >>> 0 > 999999999 >>> 0) {
         continue label$36
        }
        break label$36;
       };
      }
      $16_1 = Math_imul(($15_1 - $17_1 | 0) >> 2 | 0, 9);
      $14_1 = 10;
      $3_1 = HEAP32[$17_1 >> 2] | 0;
      if ($3_1 >>> 0 < 10 >>> 0) {
       break label$32
      }
      label$38 : while (1) {
       $16_1 = $16_1 + 1 | 0;
       $14_1 = Math_imul($14_1, 10);
       if ($3_1 >>> 0 >= $14_1 >>> 0) {
        continue label$38
       }
       break label$38;
      };
     }
     $14_1 = $9_1 + 4 | 0;
     $10_1 = $10_1 >>> 0 > $14_1 >>> 0 ? $14_1 : $10_1;
    }
    label$39 : {
     label$40 : while (1) {
      label$41 : {
       $14_1 = $10_1;
       if ($10_1 >>> 0 > $17_1 >>> 0) {
        break label$41
       }
       $19_1 = 0;
       break label$39;
      }
      $10_1 = $14_1 + -4 | 0;
      if (!(HEAP32[$10_1 >> 2] | 0)) {
       continue label$40
      }
      break label$40;
     };
     $19_1 = 1;
    }
    label$42 : {
     label$43 : {
      if (($12_1 | 0) == (103 | 0)) {
       break label$43
      }
      $21_1 = $4_1 & 8 | 0;
      break label$42;
     }
     $10_1 = $13_1 ? $13_1 : 1;
     $3_1 = ($10_1 | 0) > ($16_1 | 0) & ($16_1 | 0) > (-5 | 0) | 0;
     $13_1 = ($3_1 ? $16_1 ^ -1 | 0 : -1) + $10_1 | 0;
     $5_1 = ($3_1 ? -1 : -2) + $5_1 | 0;
     $21_1 = $4_1 & 8 | 0;
     if ($21_1) {
      break label$42
     }
     $10_1 = 9;
     label$44 : {
      if (!$19_1) {
       break label$44
      }
      $10_1 = 9;
      $9_1 = HEAP32[($14_1 + -4 | 0) >> 2] | 0;
      if (!$9_1) {
       break label$44
      }
      $3_1 = 10;
      $10_1 = 0;
      if (($9_1 >>> 0) % (10 >>> 0) | 0) {
       break label$44
      }
      label$45 : while (1) {
       $10_1 = $10_1 + 1 | 0;
       $3_1 = Math_imul($3_1, 10);
       if (!(($9_1 >>> 0) % ($3_1 >>> 0) | 0)) {
        continue label$45
       }
       break label$45;
      };
     }
     $3_1 = Math_imul(($14_1 - $15_1 | 0) >> 2 | 0, 9) + -9 | 0;
     label$46 : {
      if (($5_1 | 32 | 0 | 0) != (102 | 0)) {
       break label$46
      }
      $21_1 = 0;
      $10_1 = $3_1 - $10_1 | 0;
      $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
      $13_1 = ($13_1 | 0) < ($10_1 | 0) ? $13_1 : $10_1;
      break label$42;
     }
     $21_1 = 0;
     $10_1 = ($3_1 + $16_1 | 0) - $10_1 | 0;
     $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
     $13_1 = ($13_1 | 0) < ($10_1 | 0) ? $13_1 : $10_1;
    }
    $12_1 = $13_1 | $21_1 | 0;
    $3_1 = ($12_1 | 0) != (0 | 0);
    label$47 : {
     label$48 : {
      $20_1 = $5_1 | 32 | 0;
      if (($20_1 | 0) != (102 | 0)) {
       break label$48
      }
      $10_1 = ($16_1 | 0) > (0 | 0) ? $16_1 : 0;
      break label$47;
     }
     label$49 : {
      $10_1 = $16_1 >> 31 | 0;
      i64toi32_i32$4 = 0;
      $10_1 = $987(($16_1 + $10_1 | 0) ^ $10_1 | 0 | 0, i64toi32_i32$4 | 0, $11_1 | 0) | 0;
      if (($11_1 - $10_1 | 0 | 0) > (1 | 0)) {
       break label$49
      }
      label$50 : while (1) {
       $10_1 = $10_1 + -1 | 0;
       HEAP8[$10_1 >> 0] = 48;
       if (($11_1 - $10_1 | 0 | 0) < (2 | 0)) {
        continue label$50
       }
       break label$50;
      };
     }
     $18_1 = $10_1 + -2 | 0;
     HEAP8[$18_1 >> 0] = $5_1;
     HEAP8[($10_1 + -1 | 0) >> 0] = ($16_1 | 0) < (0 | 0) ? 45 : 43;
     $10_1 = $11_1 - $18_1 | 0;
    }
    $9_1 = ((($7_1 + $13_1 | 0) + $3_1 | 0) + $10_1 | 0) + 1 | 0;
    $984($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 | 0);
    $981($0_1 | 0, $8_1 | 0, $7_1 | 0);
    $984($0_1 | 0, 48 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 65536 | 0 | 0);
    label$51 : {
     label$52 : {
      label$53 : {
       label$54 : {
        if (($20_1 | 0) != (102 | 0)) {
         break label$54
        }
        $20_1 = $6_1 + 16 | 0 | 8 | 0;
        $16_1 = $6_1 + 16 | 0 | 9 | 0;
        $3_1 = $17_1 >>> 0 > $15_1 >>> 0 ? $15_1 : $17_1;
        $17_1 = $3_1;
        label$55 : while (1) {
         i64toi32_i32$5 = $17_1;
         i64toi32_i32$4 = HEAP32[$17_1 >> 2] | 0;
         i64toi32_i32$0 = 0;
         $10_1 = $987(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $16_1 | 0) | 0;
         label$56 : {
          label$57 : {
           if (($17_1 | 0) == ($3_1 | 0)) {
            break label$57
           }
           if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$56
           }
           label$58 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$58
            }
            break label$56;
           };
          }
          if (($10_1 | 0) != ($16_1 | 0)) {
           break label$56
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $10_1 = $20_1;
         }
         $981($0_1 | 0, $10_1 | 0, $16_1 - $10_1 | 0 | 0);
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 <= $15_1 >>> 0) {
          continue label$55
         }
         break label$55;
        };
        label$59 : {
         if (!$12_1) {
          break label$59
         }
         $981($0_1 | 0, 9443 | 0, 1 | 0);
        }
        if ($17_1 >>> 0 >= $14_1 >>> 0) {
         break label$53
        }
        if (($13_1 | 0) < (1 | 0)) {
         break label$53
        }
        label$60 : while (1) {
         label$61 : {
          i64toi32_i32$5 = $17_1;
          i64toi32_i32$0 = HEAP32[$17_1 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $10_1 = $987(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $16_1 | 0) | 0;
          if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
           break label$61
          }
          label$62 : while (1) {
           $10_1 = $10_1 + -1 | 0;
           HEAP8[$10_1 >> 0] = 48;
           if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
            continue label$62
           }
           break label$62;
          };
         }
         $981($0_1 | 0, $10_1 | 0, (($13_1 | 0) < (9 | 0) ? $13_1 : 9) | 0);
         $10_1 = $13_1 + -9 | 0;
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 >= $14_1 >>> 0) {
          break label$52
         }
         $3_1 = ($13_1 | 0) > (9 | 0);
         $13_1 = $10_1;
         if ($3_1) {
          continue label$60
         }
         break label$52;
        };
       }
       label$63 : {
        if (($13_1 | 0) < (0 | 0)) {
         break label$63
        }
        $20_1 = $19_1 ? $14_1 : $17_1 + 4 | 0;
        $15_1 = $6_1 + 16 | 0 | 8 | 0;
        $14_1 = $6_1 + 16 | 0 | 9 | 0;
        $16_1 = $17_1;
        label$64 : while (1) {
         label$65 : {
          i64toi32_i32$5 = $16_1;
          i64toi32_i32$4 = HEAP32[$16_1 >> 2] | 0;
          i64toi32_i32$0 = 0;
          $10_1 = $987(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $14_1 | 0) | 0;
          if (($10_1 | 0) != ($14_1 | 0)) {
           break label$65
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $10_1 = $15_1;
         }
         label$66 : {
          label$67 : {
           if (($16_1 | 0) == ($17_1 | 0)) {
            break label$67
           }
           if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$66
           }
           label$68 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$68
            }
            break label$66;
           };
          }
          $981($0_1 | 0, $10_1 | 0, 1 | 0);
          $10_1 = $10_1 + 1 | 0;
          label$69 : {
           if ($21_1) {
            break label$69
           }
           if (($13_1 | 0) < (1 | 0)) {
            break label$66
           }
          }
          $981($0_1 | 0, 9443 | 0, 1 | 0);
         }
         $3_1 = $14_1 - $10_1 | 0;
         $981($0_1 | 0, $10_1 | 0, (($13_1 | 0) > ($3_1 | 0) ? $3_1 : $13_1) | 0);
         $13_1 = $13_1 - $3_1 | 0;
         $16_1 = $16_1 + 4 | 0;
         if ($16_1 >>> 0 >= $20_1 >>> 0) {
          break label$63
         }
         if (($13_1 | 0) > (-1 | 0)) {
          continue label$64
         }
         break label$64;
        };
       }
       $984($0_1 | 0, 48 | 0, $13_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
       $981($0_1 | 0, $18_1 | 0, $11_1 - $18_1 | 0 | 0);
       break label$51;
      }
      $10_1 = $13_1;
     }
     $984($0_1 | 0, 48 | 0, $10_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    $984($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$6;
   }
   $16_1 = $5_1 & 32 | 0;
   $13_1 = $16_1 ? $8_1 + 9 | 0 : $8_1;
   label$70 : {
    if ($3_1 >>> 0 > 11 >>> 0) {
     break label$70
    }
    $10_1 = 12 - $3_1 | 0;
    if (!$10_1) {
     break label$70
    }
    $26_1 = 8.0;
    label$71 : while (1) {
     $26_1 = $26_1 * 16.0;
     $10_1 = $10_1 + -1 | 0;
     if ($10_1) {
      continue label$71
     }
     break label$71;
    };
    label$72 : {
     if ((HEAPU8[$13_1 >> 0] | 0 | 0) != (45 | 0)) {
      break label$72
     }
     $1_1 = -($26_1 + (-$1_1 - $26_1));
     break label$70;
    }
    $1_1 = $1_1 + $26_1 - $26_1;
   }
   label$73 : {
    $10_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $811_1 = $10_1;
    $10_1 = $10_1 >> 31 | 0;
    i64toi32_i32$0 = 0;
    $10_1 = $987(($811_1 + $10_1 | 0) ^ $10_1 | 0 | 0, i64toi32_i32$0 | 0, $11_1 | 0) | 0;
    if (($10_1 | 0) != ($11_1 | 0)) {
     break label$73
    }
    HEAP8[($6_1 + 15 | 0) >> 0] = 48;
    $10_1 = $6_1 + 15 | 0;
   }
   $21_1 = $7_1 | 2 | 0;
   $17_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
   $20_1 = $10_1 + -2 | 0;
   HEAP8[$20_1 >> 0] = $5_1 + 15 | 0;
   HEAP8[($10_1 + -1 | 0) >> 0] = ($17_1 | 0) < (0 | 0) ? 45 : 43;
   $14_1 = $4_1 & 8 | 0;
   $17_1 = $6_1 + 16 | 0;
   label$74 : while (1) {
    $10_1 = $17_1;
    label$75 : {
     label$76 : {
      if (!(Math_abs($1_1) < 2147483648.0)) {
       break label$76
      }
      $17_1 = ~~$1_1;
      break label$75;
     }
     $17_1 = -2147483648;
    }
    HEAP8[$10_1 >> 0] = HEAPU8[($17_1 + 9392 | 0) >> 0] | 0 | $16_1 | 0;
    $1_1 = ($1_1 - +($17_1 | 0)) * 16.0;
    label$77 : {
     $17_1 = $10_1 + 1 | 0;
     if (($17_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$77
     }
     label$78 : {
      if ($14_1) {
       break label$78
      }
      if (($3_1 | 0) > (0 | 0)) {
       break label$78
      }
      if ($1_1 == 0.0) {
       break label$77
      }
     }
     HEAP8[($10_1 + 1 | 0) >> 0] = 46;
     $17_1 = $10_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue label$74
    }
    break label$74;
   };
   label$79 : {
    label$80 : {
     if (!$3_1) {
      break label$80
     }
     if ((($17_1 - ($6_1 + 16 | 0) | 0) + -2 | 0 | 0) >= ($3_1 | 0)) {
      break label$80
     }
     $10_1 = (($3_1 + $11_1 | 0) - $20_1 | 0) + 2 | 0;
     break label$79;
    }
    $10_1 = (($11_1 - ($6_1 + 16 | 0) | 0) - $20_1 | 0) + $17_1 | 0;
   }
   $9_1 = $10_1 + $21_1 | 0;
   $984($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 | 0);
   $981($0_1 | 0, $13_1 | 0, $21_1 | 0);
   $984($0_1 | 0, 48 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 65536 | 0 | 0);
   $17_1 = $17_1 - ($6_1 + 16 | 0) | 0;
   $981($0_1 | 0, $6_1 + 16 | 0 | 0, $17_1 | 0);
   $16_1 = $11_1 - $20_1 | 0;
   $984($0_1 | 0, 48 | 0, $10_1 - ($17_1 + $16_1 | 0) | 0 | 0, 0 | 0, 0 | 0);
   $981($0_1 | 0, $20_1 | 0, $16_1 | 0);
   $984($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 8192 | 0 | 0);
  }
  label$81 : {
   $23_1 = $6_1 + 560 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return (($9_1 | 0) < ($2_1 | 0) ? $2_1 : $9_1) | 0;
 }
 
 function $990($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $12_1 = 0, $12$hi = 0, $14_1 = 0, $14$hi = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 15 | 0) & -16 | 0;
  HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $14$hi;
  (wasm2js_i32$0 = $0_1, wasm2js_f64$0 = +$1012($12_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
 }
 
 function $991($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $992($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $993($0_1) {
  $0_1 = $0_1 | 0;
  return fimport$5($992(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $994($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $988($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  label$3 : {
   $5_1 = $3_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $2_1 | 0;
 }
 
 function $995($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $996($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function $997() {
  $1007(15504 | 0);
  return 15512 | 0;
 }
 
 function $998() {
  $1008(15504 | 0);
 }
 
 function $999($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = $1_1 + $2_1 | 0;
  $6_1 = 2;
  $1_1 = $3_1 + 16 | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if ($1009(fimport$6(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
       break label$6
      }
      label$7 : while (1) {
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($4_1 | 0)) {
        break label$5
       }
       if (($4_1 | 0) <= (-1 | 0)) {
        break label$4
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       $8_1 = $4_1 >>> 0 > $7_1 >>> 0;
       $1_1 = $8_1 ? $1_1 + 8 | 0 : $1_1;
       $7_1 = $4_1 - ($8_1 ? $7_1 : 0) | 0;
       HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) + $7_1 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - $7_1 | 0;
       $5_1 = $5_1 - $4_1 | 0;
       $6_1 = $6_1 - $8_1 | 0;
       if (!($1009(fimport$6(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$7
       }
       break label$7;
      };
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = -1;
     if (($5_1 | 0) != (-1 | 0)) {
      break label$4
     }
    }
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    $4_1 = $2_1;
    break label$3;
   }
   $4_1 = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
   if (($6_1 | 0) == (2 | 0)) {
    break label$3
   }
   $4_1 = $2_1 - (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0;
  }
  label$8 : {
   $10_1 = $3_1 + 32 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $4_1 | 0;
 }
 
 function $1000($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $8_1 = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0, $10_1 = 0, $9_1 = 0, $39_1 = 0;
  label$1 : {
   $4_1 = global$0 - 208 | 0;
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 8 | 0) >> 2] = 1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  label$3 : {
   $5_1 = Math_imul($2_1, $1_1);
   if (!$5_1) {
    break label$3
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = $2_1;
   HEAP32[($4_1 + 20 | 0) >> 2] = $2_1;
   $6_1 = 0 - $2_1 | 0;
   $1_1 = $2_1;
   $7_1 = $1_1;
   $8_1 = 2;
   label$4 : while (1) {
    $39_1 = $7_1 + $2_1 | 0;
    $7_1 = $1_1;
    $1_1 = $39_1 + $1_1 | 0;
    HEAP32[(($4_1 + 16 | 0) + ($8_1 << 2 | 0) | 0) >> 2] = $1_1;
    $8_1 = $8_1 + 1 | 0;
    if ($1_1 >>> 0 < $5_1 >>> 0) {
     continue label$4
    }
    break label$4;
   };
   label$5 : {
    label$6 : {
     $7_1 = ($0_1 + $5_1 | 0) + $6_1 | 0;
     if ($7_1 >>> 0 > $0_1 >>> 0) {
      break label$6
     }
     $8_1 = 1;
     $1_1 = 1;
     break label$5;
    }
    $8_1 = 1;
    $1_1 = 1;
    label$7 : while (1) {
     label$8 : {
      label$9 : {
       if (($8_1 & 3 | 0 | 0) != (3 | 0)) {
        break label$9
       }
       $1001($0_1 | 0, $2_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 + 16 | 0 | 0);
       $1002($4_1 + 8 | 0 | 0, 2 | 0);
       $1_1 = $1_1 + 2 | 0;
       break label$8;
      }
      label$10 : {
       label$11 : {
        $8_1 = $1_1 + -1 | 0;
        if ((HEAP32[(($4_1 + 16 | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0) >>> 0 < ($7_1 - $0_1 | 0) >>> 0) {
         break label$11
        }
        $1003($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 + 8 | 0 | 0, $1_1 | 0, 0 | 0, $4_1 + 16 | 0 | 0);
        break label$10;
       }
       $1001($0_1 | 0, $2_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 + 16 | 0 | 0);
      }
      label$12 : {
       if (($1_1 | 0) != (1 | 0)) {
        break label$12
       }
       $1004($4_1 + 8 | 0 | 0, 1 | 0);
       $1_1 = 0;
       break label$8;
      }
      $1004($4_1 + 8 | 0 | 0, $8_1 | 0);
      $1_1 = 1;
     }
     $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 1 | 0;
     HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
     $0_1 = $0_1 + $2_1 | 0;
     if ($0_1 >>> 0 < $7_1 >>> 0) {
      continue label$7
     }
     break label$7;
    };
   }
   $1003($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 + 8 | 0 | 0, $1_1 | 0, 0 | 0, $4_1 + 16 | 0 | 0);
   label$13 : while (1) {
    label$14 : {
     label$15 : {
      label$16 : {
       label$17 : {
        if (($1_1 | 0) != (1 | 0)) {
         break label$17
        }
        if (($8_1 | 0) != (1 | 0)) {
         break label$17
        }
        if (HEAP32[($4_1 + 12 | 0) >> 2] | 0) {
         break label$16
        }
        break label$3;
       }
       if (($1_1 | 0) > (1 | 0)) {
        break label$15
       }
      }
      $8_1 = $1005($4_1 + 8 | 0 | 0) | 0;
      $1002($4_1 + 8 | 0 | 0, $8_1 | 0);
      $1_1 = $8_1 + $1_1 | 0;
      $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      break label$14;
     }
     $1004($4_1 + 8 | 0 | 0, 2 | 0);
     HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) ^ 7 | 0;
     $1002($4_1 + 8 | 0 | 0, 1 | 0);
     $5_1 = $0_1 + $6_1 | 0;
     $7_1 = $1_1 + -2 | 0;
     $1003($5_1 - (HEAP32[(($4_1 + 16 | 0) + ($7_1 << 2 | 0) | 0) >> 2] | 0) | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 + 8 | 0 | 0, $1_1 + -1 | 0 | 0, 1 | 0, $4_1 + 16 | 0 | 0);
     $1004($4_1 + 8 | 0 | 0, 1 | 0);
     $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 1 | 0;
     HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
     $1003($5_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 + 8 | 0 | 0, $7_1 | 0, 1 | 0, $4_1 + 16 | 0 | 0);
     $1_1 = $7_1;
    }
    $0_1 = $0_1 + $6_1 | 0;
    continue label$13;
   };
  }
  label$18 : {
   $10_1 = $4_1 + 208 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
 }
 
 function $1001($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $8_1 = 0, $6_1 = 0, $9_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0, $7_1 = 0;
  label$1 : {
   $5_1 = global$0 - 240 | 0;
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[$5_1 >> 2] = $0_1;
  $6_1 = 1;
  label$3 : {
   if (($3_1 | 0) < (2 | 0)) {
    break label$3
   }
   $7_1 = 0 - $1_1 | 0;
   $6_1 = 1;
   $8_1 = $0_1;
   label$4 : while (1) {
    label$5 : {
     $9_1 = $8_1 + $7_1 | 0;
     $10_1 = $3_1 + -2 | 0;
     $8_1 = $9_1 - (HEAP32[($4_1 + ($10_1 << 2 | 0) | 0) >> 2] | 0) | 0;
     if ((FUNCTION_TABLE[$2_1]($0_1, $8_1) | 0 | 0) < (0 | 0)) {
      break label$5
     }
     if ((FUNCTION_TABLE[$2_1]($0_1, $9_1) | 0 | 0) > (-1 | 0)) {
      break label$3
     }
    }
    $0_1 = $5_1 + ($6_1 << 2 | 0) | 0;
    label$6 : {
     label$7 : {
      if ((FUNCTION_TABLE[$2_1]($8_1, $9_1) | 0 | 0) < (0 | 0)) {
       break label$7
      }
      HEAP32[$0_1 >> 2] = $8_1;
      $10_1 = $3_1 + -1 | 0;
      break label$6;
     }
     HEAP32[$0_1 >> 2] = $9_1;
     $8_1 = $9_1;
    }
    $6_1 = $6_1 + 1 | 0;
    if (($10_1 | 0) < (2 | 0)) {
     break label$3
    }
    $0_1 = HEAP32[$5_1 >> 2] | 0;
    $3_1 = $10_1;
    continue label$4;
   };
  }
  $1006($1_1 | 0, $5_1 | 0, $6_1 | 0);
  label$8 : {
   $12_1 = $5_1 + 240 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
 }
 
 function $1002($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if ($1_1 >>> 0 > 31 >>> 0) {
     break label$2
    }
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    break label$1;
   }
   $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $2_1 = 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = $3_1;
   $1_1 = $1_1 + -32 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 >>> $1_1 | 0;
  HEAP32[$0_1 >> 2] = $2_1 << (32 - $1_1 | 0) | 0 | ($3_1 >>> $1_1 | 0) | 0;
 }
 
 function $1003($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $13_1 = 0, $12_1 = 0, $10_1 = 0;
  label$1 : {
   $7_1 = global$0 - 240 | 0;
   $12_1 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  $8_1 = HEAP32[$3_1 >> 2] | 0;
  HEAP32[($7_1 + 232 | 0) >> 2] = $8_1;
  $3_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = $0_1;
  HEAP32[($7_1 + 236 | 0) >> 2] = $3_1;
  $9_1 = 1;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if (($8_1 | 0) != (1 | 0)) {
        break label$7
       }
       if (!$3_1) {
        break label$6
       }
      }
      $9_1 = 1;
      $8_1 = $0_1 - (HEAP32[($6_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0) | 0;
      if ((FUNCTION_TABLE[$2_1]($8_1, $0_1) | 0 | 0) < (1 | 0)) {
       break label$6
      }
      $10_1 = 0 - $1_1 | 0;
      $11_1 = !$5_1;
      $9_1 = 1;
      label$8 : {
       label$9 : while (1) {
        $3_1 = $8_1;
        label$10 : {
         if (!($11_1 & 1 | 0)) {
          break label$10
         }
         if (($4_1 | 0) < (2 | 0)) {
          break label$10
         }
         $8_1 = HEAP32[((($4_1 << 2 | 0) + $6_1 | 0) + -8 | 0) >> 2] | 0;
         $11_1 = $0_1 + $10_1 | 0;
         if ((FUNCTION_TABLE[$2_1]($11_1, $3_1) | 0 | 0) > (-1 | 0)) {
          break label$8
         }
         if ((FUNCTION_TABLE[$2_1]($11_1 - $8_1 | 0, $3_1) | 0 | 0) > (-1 | 0)) {
          break label$8
         }
        }
        HEAP32[($7_1 + ($9_1 << 2 | 0) | 0) >> 2] = $3_1;
        $0_1 = $1005($7_1 + 232 | 0 | 0) | 0;
        $1002($7_1 + 232 | 0 | 0, $0_1 | 0);
        $9_1 = $9_1 + 1 | 0;
        $4_1 = $0_1 + $4_1 | 0;
        label$11 : {
         if ((HEAP32[($7_1 + 232 | 0) >> 2] | 0 | 0) != (1 | 0)) {
          break label$11
         }
         if (!(HEAP32[($7_1 + 236 | 0) >> 2] | 0)) {
          break label$4
         }
        }
        $5_1 = 0;
        $11_1 = 1;
        $0_1 = $3_1;
        $8_1 = $3_1 - (HEAP32[($6_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0) | 0;
        if ((FUNCTION_TABLE[$2_1]($8_1, HEAP32[$7_1 >> 2] | 0) | 0 | 0) > (0 | 0)) {
         continue label$9
        }
        break label$5;
       };
      }
      $3_1 = $0_1;
      break label$4;
     }
     $3_1 = $0_1;
    }
    if ($5_1) {
     break label$3
    }
   }
   $1006($1_1 | 0, $7_1 | 0, $9_1 | 0);
   $1001($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 | 0, $6_1 | 0);
  }
  label$12 : {
   $13_1 = $7_1 + 240 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
 }
 
 function $1004($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if ($1_1 >>> 0 > 31 >>> 0) {
     break label$2
    }
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    break label$1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
   $2_1 = 0;
   HEAP32[$0_1 >> 2] = 0;
   $1_1 = $1_1 + -32 | 0;
  }
  HEAP32[$0_1 >> 2] = $2_1 << $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 >>> (32 - $1_1 | 0) | 0 | ($3_1 << $1_1 | 0) | 0;
 }
 
 function $1005($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = __wasm_ctz_i32((HEAP32[$0_1 >> 2] | 0) + -1 | 0 | 0) | 0;
   if ($1_1) {
    break label$1
   }
   $0_1 = __wasm_ctz_i32(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   return ($0_1 ? $0_1 + 32 | 0 : 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $1006($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $6_1 = 0, $7_1 = 0, $4_1 = 0, $9_1 = 0, $8_1 = 0;
  label$1 : {
   $3_1 = global$0 - 256 | 0;
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   if (($2_1 | 0) < (2 | 0)) {
    break label$3
   }
   $4_1 = $1_1 + ($2_1 << 2 | 0) | 0;
   HEAP32[$4_1 >> 2] = $3_1;
   if (!$0_1) {
    break label$3
   }
   $5_1 = $3_1;
   label$4 : while (1) {
    $6_1 = $0_1 >>> 0 < 256 >>> 0 ? $0_1 : 256;
    $1070($5_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $6_1 | 0) | 0;
    $5_1 = 0;
    label$5 : while (1) {
     $7_1 = $1_1 + ($5_1 << 2 | 0) | 0;
     $5_1 = $5_1 + 1 | 0;
     $1070(HEAP32[$7_1 >> 2] | 0 | 0, HEAP32[($1_1 + ($5_1 << 2 | 0) | 0) >> 2] | 0 | 0, $6_1 | 0) | 0;
     HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + $6_1 | 0;
     if (($5_1 | 0) != ($2_1 | 0)) {
      continue label$5
     }
     break label$5;
    };
    $0_1 = $0_1 - $6_1 | 0;
    if (!$0_1) {
     break label$3
    }
    $5_1 = HEAP32[$4_1 >> 2] | 0;
    continue label$4;
   };
  }
  label$6 : {
   $9_1 = $3_1 + 256 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
 }
 
 function $1007($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1008($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1009($0_1) {
  $0_1 = $0_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  (wasm2js_i32$0 = $969() | 0, wasm2js_i32$1 = $0_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  return -1 | 0;
 }
 
 function $1010($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2_1 = $18_1;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1_1 = $22_1;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $1011($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $18_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $22_1;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $1012($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $6$hi = 0, $7$hi = 0, $7_1 = 0, $2_1 = 0, $3_1 = 0, $44_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $51_1 = 0, $52_1 = 0, $5_1 = 0, $4_1 = 0, $18_1 = 0, $18$hi = 0, $20$hi = 0, $23_1 = 0, $23$hi = 0, $25$hi = 0, $39$hi = 0, $43_1 = 0, $45_1 = 0, $50_1 = 0, $50$hi = 0, $52$hi = 0, $80_1 = 0, $80$hi = 0, $84$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $89$hi = 0, $93_1 = 0, $93$hi = 0, $95_1 = 0, $96$hi = 0, $106$hi = 0, $117_1 = 0, $117$hi = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $6_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $18_1 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $20$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$5 = $18_1;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$4
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $44_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $44_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $23_1 = $44_1;
    $23$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $46_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $46_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $25$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$4 = $23_1;
    i64toi32_i32$5 = $25$hi;
    i64toi32_i32$1 = $46_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $6_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $6$hi = i64toi32_i32$5;
    label$5 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$5
     }
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $7_1 = i64toi32_i32$0;
     $7$hi = i64toi32_i32$2;
     break label$3;
    }
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $7_1 = i64toi32_i32$4;
    $7$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $39$hi = i64toi32_i32$5;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$5 = $39$hi;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7_1 = i64toi32_i32$1;
    $7$hi = i64toi32_i32$4;
    break label$3;
   }
   label$6 : {
    i64toi32_i32$4 = $0$hi;
    $43_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$2 = 0;
    $45_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0 ? $43_1 : $45_1) {
     break label$6
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $47_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $47_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
    }
    $50_1 = $47_1;
    $50$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $48_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $48_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $52$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $50$hi;
    i64toi32_i32$5 = $50_1;
    i64toi32_i32$2 = $52$hi;
    i64toi32_i32$4 = $48_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    i64toi32_i32$5 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $7_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $7$hi = i64toi32_i32$0;
    break label$3;
   }
   i64toi32_i32$0 = 2146435072;
   $7_1 = 0;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$5 = $6_1;
   i64toi32_i32$2 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$3
   }
   i64toi32_i32$5 = 0;
   $7_1 = 0;
   $7$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $6$hi;
   i64toi32_i32$4 = $6_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $49_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    $49_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $3_1 = $49_1;
   if ($3_1 >>> 0 < 15249 >>> 0) {
    break label$3
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $6_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$0 = $6$hi;
   $1010($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$5 | 0, $6_1 | 0, i64toi32_i32$0 | 0, $3_1 + -15233 | 0 | 0);
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $6$hi;
   $1011($2_1 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $6_1 | 0, i64toi32_i32$5 | 0, 15361 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$5;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 60;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $51_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $51_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $80_1 = $51_1;
   $80$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 4;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $52_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $52_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $84$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $80$hi;
   i64toi32_i32$4 = $80_1;
   i64toi32_i32$0 = $84$hi;
   i64toi32_i32$2 = $52_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $7_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $7$hi = i64toi32_i32$0;
   label$7 : {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$2 = -1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $87_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    $89_1 = i64toi32_i32$4;
    $89$hi = i64toi32_i32$5;
    i64toi32_i32$0 = (i64toi32_i32$0 + 16 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $93_1 = i64toi32_i32$5;
    $93$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $89$hi;
    i64toi32_i32$0 = $89_1;
    i64toi32_i32$5 = $93$hi;
    i64toi32_i32$2 = $93_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    $95_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $96$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $87$hi;
    i64toi32_i32$2 = $87_1;
    i64toi32_i32$5 = $96$hi;
    i64toi32_i32$0 = $95_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $6_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$2 = 134217728;
    i64toi32_i32$0 = 1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$7
    }
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $7_1 = i64toi32_i32$3;
    $7$hi = i64toi32_i32$1;
    break label$3;
   }
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$4 = $6_1;
   i64toi32_i32$0 = 134217728;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
    break label$3
   }
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $106$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = $106$hi;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $7_1 = i64toi32_i32$5;
   $7$hi = i64toi32_i32$3;
  }
  label$8 : {
   $5_1 = $2_1 + 32 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  i64toi32_i32$3 = $7$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $117_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
  $117$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$0 = $117$hi;
  i64toi32_i32$4 = $117_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$4 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $1013($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $5_1 = 0.0, $4_1 = 0, $1_1 = 0, $4$hi = 0, $2_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $3_1 = 0, $27_1 = 0, $28_1 = 0, $6_1 = 0.0, $50_1 = 0.0, $55$hi = 0, $57_1 = 0, $57$hi = 0, $61_1 = 0.0, $63_1 = 0.0, $68_1 = 0.0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       wasm2js_scratch_store_f64(+$0_1);
       i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
       $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
       $4$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
        $20_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $21_1 = 0
         } else {
          $21_1 = 1
         }
         $22_1 = $21_1;
        } else {
         $22_1 = 0
        }
        $20_1 = $22_1;
       }
       if ($20_1) {
        break label$5
       }
       i64toi32_i32$2 = $4$hi;
       i64toi32_i32$3 = $4_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = 32;
       i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $23_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
       }
       $1_1 = $23_1;
       if ($1_1 >>> 0 > 1048575 >>> 0) {
        break label$4
       }
      }
      label$6 : {
       i64toi32_i32$0 = $4$hi;
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$3 = 2147483647;
       i64toi32_i32$1 = -1;
       i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | 0) {
        break label$6
       }
       return +(-1.0 / ($0_1 * $0_1));
      }
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = -1;
      if ((i64toi32_i32$0 | 0) > (i64toi32_i32$3 | 0)) {
       $24_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$2 >>> 0) {
         $25_1 = 0
        } else {
         $25_1 = 1
        }
        $26_1 = $25_1;
       } else {
        $26_1 = 0
       }
       $24_1 = $26_1;
      }
      if ($24_1) {
       break label$3
      }
      return +(($0_1 - $0_1) / 0.0);
     }
     if ($1_1 >>> 0 > 2146435071 >>> 0) {
      break label$1
     }
     $2_1 = 1072693248;
     $3_1 = -1023;
     label$7 : {
      if (($1_1 | 0) == (1072693248 | 0)) {
       break label$7
      }
      $2_1 = $1_1;
      break label$2;
     }
     i64toi32_i32$1 = $4$hi;
     if ($4_1) {
      break label$2
     }
     return +(0.0);
    }
    wasm2js_scratch_store_f64(+($0_1 * 18014398509481984.0));
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $27_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $27_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $27_1;
    $3_1 = -1077;
   }
   $1_1 = $2_1 + 614242 | 0;
   $5_1 = +($3_1 + ($1_1 >>> 20 | 0) | 0 | 0);
   $50_1 = $5_1 * .6931471803691238;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = ($1_1 & 1048575 | 0) + 1072079006 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $28_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $28_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $55$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $57_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   $57$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $55$hi;
   i64toi32_i32$2 = $28_1;
   i64toi32_i32$0 = $57$hi;
   i64toi32_i32$3 = $57_1;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64() + -1.0;
   $61_1 = $0_1;
   $63_1 = $5_1 * 1.9082149292705877e-10;
   $5_1 = $0_1 / ($0_1 + 2.0);
   $68_1 = $5_1;
   $6_1 = $0_1 * ($0_1 * .5);
   $5_1 = $5_1 * $5_1;
   $0_1 = $5_1 * $5_1;
   $0_1 = $50_1 + ($61_1 + ($63_1 + $68_1 * ($6_1 + ($0_1 * ($0_1 * ($0_1 * .15313837699209373 + .22222198432149784) + .3999999999940942) + $5_1 * ($0_1 * ($0_1 * ($0_1 * .14798198605116586 + .1818357216161805) + .2857142874366239) + .6666666666666735))) - $6_1));
  }
  return +$0_1;
 }
 
 function $1014() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $0_1 = global$0 - 16 | 0;
   $3_1 = $0_1;
   if ($0_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   if (fimport$7($0_1 + 12 | 0 | 0, $0_1 + 8 | 0 | 0) | 0) {
    break label$3
   }
   $1_1 = $1062(((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) + 4 | 0 | 0) | 0;
   HEAP32[(0 + 15516 | 0) >> 2] = $1_1;
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    label$5 : {
     $1_1 = $1062(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
     if (!$1_1) {
      break label$5
     }
     $2_1 = HEAP32[(0 + 15516 | 0) >> 2] | 0;
     if ($2_1) {
      break label$4
     }
    }
    HEAP32[(0 + 15516 | 0) >> 2] = 0;
    break label$3;
   }
   HEAP32[($2_1 + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
   if (!(fimport$8(HEAP32[(0 + 15516 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0)) {
    break label$3
   }
   HEAP32[(0 + 15516 | 0) >> 2] = 0;
  }
  label$6 : {
   $4_1 = $0_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
 }
 
 function $1015($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = $0_1 ? $0_1 : 1;
  label$1 : {
   label$2 : while (1) {
    $2_1 = $1062($1_1 | 0) | 0;
    if ($2_1) {
     break label$1
    }
    $0_1 = $1026() | 0;
    if (!$0_1) {
     break label$1
    }
    FUNCTION_TABLE[$0_1]();
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1016($0_1) {
  $0_1 = $0_1 | 0;
  return $1015($0_1 | 0) | 0 | 0;
 }
 
 function $1017($0_1) {
  $0_1 = $0_1 | 0;
  $1064($0_1 | 0);
 }
 
 function $1018($0_1) {
  $0_1 = $0_1 | 0;
  $1017($0_1 | 0);
 }
 
 function $1019($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 9484;
  return $0_1 | 0;
 }
 
 function $1020($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = $1077($1_1 | 0) | 0;
  $3_1 = $1015($2_1 + 13 | 0 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$3_1 >> 2] = $2_1;
  (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = $1070($1021($3_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  return $0_1 | 0;
 }
 
 function $1021($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 12 | 0 | 0;
 }
 
 function $1022($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1019($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 9528;
  $1020($0_1 + 4 | 0 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1023($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1024($0_1) {
  $0_1 = $0_1 | 0;
  $174(9452 | 0);
  abort();
 }
 
 function $1025($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1026() {
  return $1025(15520 | 0) | 0 | 0;
 }
 
 function $1027($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1028($0_1) {
  $0_1 = $0_1 | 0;
  $1017($0_1 | 0);
 }
 
 function $1029($0_1) {
  $0_1 = $0_1 | 0;
  return 9459 | 0;
 }
 
 function $1030($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 9528;
  $1031($0_1 + 4 | 0 | 0) | 0;
  $1027($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1031($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!($1023($0_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = $1032(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   if (($1033($1_1 + 8 | 0 | 0) | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   $1017($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1032($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + -12 | 0 | 0;
 }
 
 function $1033($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + -1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $1034($0_1) {
  $0_1 = $0_1 | 0;
  $1017($1030($0_1 | 0) | 0 | 0);
 }
 
 function $1035($0_1) {
  $0_1 = $0_1 | 0;
  return $1036($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1036($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1037($0_1) {
  $0_1 = $0_1 | 0;
  $1030($0_1 | 0) | 0;
  $1017($0_1 | 0);
 }
 
 function $1038($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1039($0_1) {
  $0_1 = $0_1 | 0;
  $1038($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1040($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1041($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1042($0_1) {
  $0_1 = $0_1 | 0;
  $1039($0_1 | 0) | 0;
  $1017($0_1 | 0);
 }
 
 function $1043($0_1) {
  $0_1 = $0_1 | 0;
  $1039($0_1 | 0) | 0;
  $1017($0_1 | 0);
 }
 
 function $1044($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return $1045($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  label$2 : {
   if (($0_1 | 0) != ($1_1 | 0)) {
    break label$2
   }
   return 1 | 0;
  }
  return !($967($1046($0_1 | 0) | 0 | 0, $1046($1_1 | 0) | 0 | 0) | 0) | 0;
 }
 
 function $1045($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0;
 }
 
 function $1046($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1047($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $4_1 = 1;
  label$3 : {
   if ($1044($0_1 | 0, $1_1 | 0, 0 | 0) | 0) {
    break label$3
   }
   $4_1 = 0;
   if (!$1_1) {
    break label$3
   }
   $4_1 = 0;
   $1_1 = $1048($1_1 | 0, 9680 | 0, 9728 | 0, 0 | 0) | 0;
   if (!$1_1) {
    break label$3
   }
   HEAP32[($3_1 + 20 | 0) >> 2] = -1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
   $4_1 = 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   $1071($3_1 + 24 | 0 | 0, 0 | 0, 39 | 0) | 0;
   HEAP32[($3_1 + 56 | 0) >> 2] = 1;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($1_1, $3_1 + 8 | 0, HEAP32[$2_1 >> 2] | 0, 1);
   if ((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break label$3
   }
   HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
   $4_1 = 1;
  }
  label$4 : {
   $6_1 = $3_1 + 64 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $1048($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
  label$1 : {
   $4_1 = global$0 - 64 | 0;
   $7_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  $5_1 = HEAP32[$0_1 >> 2] | 0;
  $6_1 = HEAP32[($5_1 + -4 | 0) >> 2] | 0;
  $5_1 = HEAP32[($5_1 + -8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
  $1_1 = 0;
  $1071($4_1 + 24 | 0 | 0, 0 | 0, 39 | 0) | 0;
  $0_1 = $0_1 + $5_1 | 0;
  label$3 : {
   label$4 : {
    if (!($1044($6_1 | 0, $2_1 | 0, 0 | 0) | 0)) {
     break label$4
    }
    HEAP32[($4_1 + 56 | 0) >> 2] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($6_1, $4_1 + 8 | 0, $0_1, $0_1, 1, 0);
    $1_1 = (HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0) ? $0_1 : 0;
    break label$3;
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($6_1, $4_1 + 8 | 0, $0_1, 1, 0);
   $0_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
   if ($0_1 >>> 0 > 1 >>> 0) {
    break label$3
   }
   label$5 : {
    switch ($0_1 | 0) {
    default:
     $1_1 = (wasm2js_i32$0 = (wasm2js_i32$3 = (wasm2js_i32$6 = HEAP32[($4_1 + 28 | 0) >> 2] | 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = (HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), wasm2js_i32$4 = 0, wasm2js_i32$5 = (HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     break label$3;
    case 1:
     break label$5;
    };
   }
   label$7 : {
    if ((HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break label$7
    }
    if (HEAP32[($4_1 + 48 | 0) >> 2] | 0) {
     break label$3
    }
    if ((HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$3
    }
    if ((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$3
    }
   }
   $1_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  }
  label$8 : {
   $8_1 = $4_1 + 64 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $1_1 | 0;
 }
 
 function $1049($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   if ($4_1) {
    break label$1
   }
   HEAP32[($1_1 + 36 | 0) >> 2] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   return;
  }
  label$2 : {
   label$3 : {
    if (($4_1 | 0) != ($2_1 | 0)) {
     break label$3
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
    return;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = 2;
   HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function $1050($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($1044($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $1049($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
 }
 
 function $1051($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($1044($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $1049($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $1052($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 1;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
    break label$1
   }
   HEAP8[($1_1 + 52 | 0) >> 0] = 1;
   label$2 : {
    $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    HEAP32[($1_1 + 36 | 0) >> 2] = 1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
    if (($4_1 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   label$3 : {
    if (($3_1 | 0) != ($2_1 | 0)) {
     break label$3
    }
    label$4 : {
     $3_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     if (($3_1 | 0) != (2 | 0)) {
      break label$4
     }
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     $3_1 = $4_1;
    }
    if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    if (($3_1 | 0) != (1 | 0)) {
     break label$1
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function $1053($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
    break label$1
   }
   if ((HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $3_1;
  }
 }
 
 function $1054($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($1044($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $1053($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($1044($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     HEAP16[($1_1 + 52 | 0) >> 1] = 0;
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $2_1, 1, $4_1);
     label$7 : {
      if (!(HEAPU8[($1_1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP32[($1_1 + 44 | 0) >> 2] = 3;
      if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
       break label$6
      }
      break label$2;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = 4;
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1);
  }
 }
 
 function $1055($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($1044($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $1053($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   if (!($1044($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
      break label$4
     }
     if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
     }
    }
    if (($3_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = 1;
    return;
   }
   HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
   label$5 : {
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$5
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$5
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   }
   HEAP32[($1_1 + 44 | 0) >> 2] = 4;
  }
 }
 
 function $1056($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($1044($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $1052($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $1057($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($1044($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $1052($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
  }
 }
 
 function $1058() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0;
  $0_1 = 0;
  label$1 : while (1) {
   $1_1 = $0_1 << 4 | 0;
   $2_1 = $1_1 + 15536 | 0;
   HEAP32[($1_1 + 15540 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 15544 | 0) >> 2] = $2_1;
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != (64 | 0)) {
    continue label$1
   }
   break label$1;
  };
  $1059(48 | 0) | 0;
 }
 
 function $1059($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $16_1 = 0, $187_1 = 0, $187$hi = 0, $189$hi = 0, $190$hi = 0, $191_1 = 0;
  $1_1 = 0;
  label$1 : {
   $2_1 = $1069($0_1 | 0) | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $3_1 = 16;
   $4_1 = $2_1 + $0_1 | 0;
   $1_1 = $4_1 + -16 | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = 16;
   HEAP32[$1_1 >> 2] = 16;
   label$2 : {
    label$3 : {
     label$4 : {
      $0_1 = HEAP32[(0 + 16560 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$4
      }
      if (($2_1 | 0) != (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      $3_1 = HEAP32[($2_1 + -4 | 0) >> 2] | 0;
      $5_1 = $2_1 - (($3_1 >> 31 | 0) ^ $3_1 | 0) | 0;
      $6_1 = HEAP32[($5_1 + -4 | 0) >> 2] | 0;
      HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
      $3_1 = -16;
      $0_1 = $5_1 - ($6_1 ^ ($6_1 >> 31 | 0) | 0) | 0;
      if ((HEAP32[(($0_1 + (HEAP32[$0_1 >> 2] | 0) | 0) + -4 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
       break label$3
      }
      $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $2_1;
      $2_1 = $1_1 - $0_1 | 0;
      HEAP32[$0_1 >> 2] = $2_1;
      HEAP32[((($2_1 & -4 | 0) + $0_1 | 0) + -4 | 0) >> 2] = $2_1 ^ -1 | 0;
      label$5 : {
       label$6 : {
        $2_1 = (HEAP32[$0_1 >> 2] | 0) + -8 | 0;
        if ($2_1 >>> 0 > 127 >>> 0) {
         break label$6
        }
        $2_1 = ($2_1 >>> 3 | 0) + -1 | 0;
        break label$5;
       }
       $1_1 = Math_clz32($2_1);
       label$7 : {
        if ($2_1 >>> 0 > 4095 >>> 0) {
         break label$7
        }
        $2_1 = ((($2_1 >>> (29 - $1_1 | 0) | 0) ^ 4 | 0) - ($1_1 << 2 | 0) | 0) + 110 | 0;
        break label$5;
       }
       $2_1 = ((($2_1 >>> (30 - $1_1 | 0) | 0) ^ 2 | 0) - ($1_1 << 1 | 0) | 0) + 71 | 0;
       $2_1 = $2_1 >>> 0 < 63 >>> 0 ? $2_1 : 63;
      }
      $1_1 = $2_1 << 4 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 15536 | 0;
      $1_1 = $1_1 + 15544 | 0;
      HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
      break label$2;
     }
     HEAP32[($2_1 + 12 | 0) >> 2] = 16;
     HEAP32[$2_1 >> 2] = 16;
     HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
     HEAP32[(0 + 16560 | 0) >> 2] = $2_1;
    }
    $0_1 = $2_1 + $3_1 | 0;
    $2_1 = $1_1 - $0_1 | 0;
    HEAP32[$0_1 >> 2] = $2_1;
    HEAP32[((($2_1 & -4 | 0) + $0_1 | 0) + -4 | 0) >> 2] = $2_1 ^ -1 | 0;
    label$8 : {
     label$9 : {
      $2_1 = (HEAP32[$0_1 >> 2] | 0) + -8 | 0;
      if ($2_1 >>> 0 > 127 >>> 0) {
       break label$9
      }
      $2_1 = ($2_1 >>> 3 | 0) + -1 | 0;
      break label$8;
     }
     $1_1 = Math_clz32($2_1);
     label$10 : {
      if ($2_1 >>> 0 > 4095 >>> 0) {
       break label$10
      }
      $2_1 = ((($2_1 >>> (29 - $1_1 | 0) | 0) ^ 4 | 0) - ($1_1 << 2 | 0) | 0) + 110 | 0;
      break label$8;
     }
     $2_1 = ((($2_1 >>> (30 - $1_1 | 0) | 0) ^ 2 | 0) - ($1_1 << 1 | 0) | 0) + 71 | 0;
     $2_1 = $2_1 >>> 0 < 63 >>> 0 ? $2_1 : 63;
    }
    $1_1 = $2_1 << 4 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 15536 | 0;
    $1_1 = $1_1 + 15544 | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
   }
   HEAP32[$1_1 >> 2] = $0_1;
   HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $0_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16568 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16572 | 0) >> 2] | 0;
   $187_1 = i64toi32_i32$0;
   $187$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   $189$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 1;
   i64toi32_i32$0 = $189$hi;
   i64toi32_i32$4 = $2_1 & 31 | 0;
   if (32 >>> 0 <= ($2_1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $16_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $16_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $190$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $187$hi;
   i64toi32_i32$1 = $187_1;
   i64toi32_i32$2 = $190$hi;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $191_1 = i64toi32_i32$1 | $16_1 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[(i64toi32_i32$1 + 16568 | 0) >> 2] = $191_1;
   HEAP32[(i64toi32_i32$1 + 16572 | 0) >> 2] = i64toi32_i32$2;
   $1_1 = 1;
  }
  return $1_1 | 0;
 }
 
 function $1060($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $4_1 = 0, $6_1 = 0, $8_1 = 0, $8$hi = 0, $7$hi = 0, $7_1 = 0, $23_1 = 0, $24_1 = 0, $5_1 = 0, $25_1 = 0, $26_1 = 0, $58$hi = 0, $110_1 = 0, $110$hi = 0, $112$hi = 0, $113_1 = 0, $113$hi = 0, $114_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if ($0_1 & ($0_1 + -1 | 0) | 0) {
      break label$2
     }
     $2_1 = $0_1 >>> 0 > 8 >>> 0;
     label$4 : {
      label$5 : {
       $1_1 = $1_1 >>> 0 > 8 >>> 0 ? ($1_1 + 3 | 0) & -4 | 0 : 8;
       if ($1_1 >>> 0 > 127 >>> 0) {
        break label$5
       }
       $3_1 = ($1_1 >>> 3 | 0) + -1 | 0;
       break label$4;
      }
      $3_1 = Math_clz32($1_1);
      label$6 : {
       if ($1_1 >>> 0 > 4095 >>> 0) {
        break label$6
       }
       $3_1 = ((($1_1 >>> (29 - $3_1 | 0) | 0) ^ 4 | 0) - ($3_1 << 2 | 0) | 0) + 110 | 0;
       break label$4;
      }
      $3_1 = ((($1_1 >>> (30 - $3_1 | 0) | 0) ^ 2 | 0) - ($3_1 << 1 | 0) | 0) + 71 | 0;
      $3_1 = $3_1 >>> 0 < 63 >>> 0 ? $3_1 : 63;
     }
     $0_1 = $2_1 ? $0_1 : 8;
     label$7 : {
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16568 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16572 | 0) >> 2] | 0;
      $7_1 = i64toi32_i32$0;
      $7$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $58$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $7$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = $58$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $23_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $8_1 = $23_1;
      $8$hi = i64toi32_i32$0;
      if (!($8_1 | i64toi32_i32$0 | 0)) {
       break label$7
      }
      label$8 : while (1) {
       i64toi32_i32$0 = $8$hi;
       i64toi32_i32$0 = __wasm_ctz_i64($8_1 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $8$hi;
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$0 = $7$hi;
       i64toi32_i32$3 = $7_1;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $24_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        $24_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
       }
       $8_1 = $24_1;
       $8$hi = i64toi32_i32$0;
       label$9 : {
        label$10 : {
         i64toi32_i32$0 = $7$hi;
         $3_1 = $3_1 + $7_1 | 0;
         $4_1 = $3_1 << 4 | 0;
         $2_1 = HEAP32[($4_1 + 15544 | 0) >> 2] | 0;
         $5_1 = $4_1 + 15536 | 0;
         if (($2_1 | 0) == ($5_1 | 0)) {
          break label$10
         }
         $6_1 = $1061($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
         if ($6_1) {
          break label$1
         }
         $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
         HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
         HEAP32[((HEAP32[($2_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $6_1;
         HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
         $4_1 = $4_1 + 15540 | 0;
         HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
         HEAP32[$4_1 >> 2] = $2_1;
         HEAP32[((HEAP32[($2_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] = $2_1;
         i64toi32_i32$0 = $8$hi;
         i64toi32_i32$2 = $8_1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 1;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $25_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
          $25_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
         }
         $8_1 = $25_1;
         $8$hi = i64toi32_i32$1;
         $3_1 = $3_1 + 1 | 0;
         break label$9;
        }
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 16568 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 16572 | 0) >> 2] | 0;
        $110_1 = i64toi32_i32$1;
        $110$hi = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        $112$hi = i64toi32_i32$2;
        i64toi32_i32$2 = -1;
        i64toi32_i32$1 = $112$hi;
        i64toi32_i32$1 = __wasm_rotl_i64(-2 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $113_1 = i64toi32_i32$1;
        $113$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $110$hi;
        i64toi32_i32$0 = $110_1;
        i64toi32_i32$1 = $113$hi;
        i64toi32_i32$3 = $113_1;
        i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
        $114_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
        i64toi32_i32$0 = 0;
        HEAP32[(i64toi32_i32$0 + 16568 | 0) >> 2] = $114_1;
        HEAP32[(i64toi32_i32$0 + 16572 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$1 = $8$hi;
        i64toi32_i32$2 = $8_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 1;
        i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
        $8_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
        $8$hi = i64toi32_i32$0;
       }
       i64toi32_i32$0 = $8$hi;
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
        continue label$8
       }
       break label$8;
      };
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 16568 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 16572 | 0) >> 2] | 0;
      $7_1 = i64toi32_i32$1;
      $7$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$2 = Math_clz32(i64toi32_i32$0);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) == (32 | 0)) {
      $26_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
     } else {
      $26_1 = i64toi32_i32$2
     }
     $2_1 = (63 - $26_1 | 0) << 4 | 0;
     $4_1 = $2_1 + 15536 | 0;
     $2_1 = HEAP32[($2_1 + 15544 | 0) >> 2] | 0;
     label$11 : {
      i64toi32_i32$3 = $7$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 1073741824;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
       break label$11
      }
      $3_1 = 99;
      if (($2_1 | 0) == ($4_1 | 0)) {
       break label$11
      }
      label$12 : while (1) {
       if (!$3_1) {
        break label$11
       }
       $6_1 = $1061($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
       if ($6_1) {
        break label$1
       }
       $3_1 = $3_1 + -1 | 0;
       $2_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
       if (($2_1 | 0) != ($4_1 | 0)) {
        continue label$12
       }
       break label$12;
      };
      $2_1 = $4_1;
     }
     if ($1059($1_1 + 48 | 0 | 0) | 0) {
      continue label$3
     }
     break label$3;
    };
    if (($2_1 | 0) == ($4_1 | 0)) {
     break label$2
    }
    label$13 : while (1) {
     $6_1 = $1061($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
     if ($6_1) {
      break label$1
     }
     $2_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
     if (($2_1 | 0) != ($4_1 | 0)) {
      continue label$13
     }
     break label$13;
    };
   }
   $6_1 = 0;
  }
  return $6_1 | 0;
 }
 
 function $1061($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $15_1 = 0, $139_1 = 0, $139$hi = 0, $141$hi = 0, $142$hi = 0, $143_1 = 0;
  $3_1 = 0;
  label$1 : {
   $4_1 = $0_1 + 4 | 0;
   $5_1 = (($1_1 + $4_1 | 0) + -1 | 0) & (0 - $1_1 | 0) | 0;
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (($5_1 + $2_1 | 0) >>> 0 > (($0_1 + $1_1 | 0) + -4 | 0) >>> 0) {
    break label$1
   }
   $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $3_1;
   label$2 : {
    if (($4_1 | 0) == ($5_1 | 0)) {
     break label$2
    }
    $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
    $3_1 = $0_1 - (($3_1 >> 31 | 0) ^ $3_1 | 0) | 0;
    $4_1 = $5_1 - $4_1 | 0;
    $5_1 = (HEAP32[$3_1 >> 2] | 0) + $4_1 | 0;
    HEAP32[$3_1 >> 2] = $5_1;
    HEAP32[((($5_1 & -4 | 0) + $3_1 | 0) + -4 | 0) >> 2] = $5_1;
    $0_1 = $0_1 + $4_1 | 0;
    $1_1 = $1_1 - $4_1 | 0;
    HEAP32[$0_1 >> 2] = $1_1;
   }
   label$3 : {
    label$4 : {
     if (($2_1 + 24 | 0) >>> 0 > $1_1 >>> 0) {
      break label$4
     }
     $3_1 = ($0_1 + $2_1 | 0) + 8 | 0;
     $1_1 = $1_1 - $2_1 | 0;
     $4_1 = $1_1 + -8 | 0;
     HEAP32[$3_1 >> 2] = $4_1;
     HEAP32[((($4_1 & -4 | 0) + $3_1 | 0) + -4 | 0) >> 2] = 7 - $1_1 | 0;
     label$5 : {
      label$6 : {
       $1_1 = (HEAP32[$3_1 >> 2] | 0) + -8 | 0;
       if ($1_1 >>> 0 > 127 >>> 0) {
        break label$6
       }
       $1_1 = ($1_1 >>> 3 | 0) + -1 | 0;
       break label$5;
      }
      $4_1 = Math_clz32($1_1);
      label$7 : {
       if ($1_1 >>> 0 > 4095 >>> 0) {
        break label$7
       }
       $1_1 = ((($1_1 >>> (29 - $4_1 | 0) | 0) ^ 4 | 0) - ($4_1 << 2 | 0) | 0) + 110 | 0;
       break label$5;
      }
      $1_1 = ((($1_1 >>> (30 - $4_1 | 0) | 0) ^ 2 | 0) - ($4_1 << 1 | 0) | 0) + 71 | 0;
      $1_1 = $1_1 >>> 0 < 63 >>> 0 ? $1_1 : 63;
     }
     $4_1 = $1_1 << 4 | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = $4_1 + 15536 | 0;
     $4_1 = $4_1 + 15544 | 0;
     HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $3_1;
     HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $3_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16568 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16572 | 0) >> 2] | 0;
     $139_1 = i64toi32_i32$0;
     $139$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $141$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$0 = $141$hi;
     i64toi32_i32$4 = $1_1 & 31 | 0;
     if (32 >>> 0 <= ($1_1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $15_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $15_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $142$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $139$hi;
     i64toi32_i32$1 = $139_1;
     i64toi32_i32$2 = $142$hi;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $143_1 = i64toi32_i32$1 | $15_1 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$1 + 16568 | 0) >> 2] = $143_1;
     HEAP32[(i64toi32_i32$1 + 16572 | 0) >> 2] = i64toi32_i32$2;
     $2_1 = $2_1 + 8 | 0;
     HEAP32[$0_1 >> 2] = $2_1;
     HEAP32[((($2_1 & -4 | 0) + $0_1 | 0) + -4 | 0) >> 2] = $2_1;
     break label$3;
    }
    HEAP32[(($0_1 + $1_1 | 0) + -4 | 0) >> 2] = $1_1;
   }
   $3_1 = $0_1 + 4 | 0;
  }
  return $3_1 | 0;
 }
 
 function $1062($0_1) {
  $0_1 = $0_1 | 0;
  return $1060(8 | 0, $0_1 | 0) | 0 | 0;
 }
 
 function $1063($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $1_1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, i64toi32_i32$4 = 0, $14_1 = 0, $117_1 = 0, $117$hi = 0, $119$hi = 0, $120$hi = 0, $121_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $0_1 + -4 | 0;
   $2_1 = HEAP32[$1_1 >> 2] | 0;
   $3_1 = $2_1;
   $4_1 = $1_1;
   label$2 : {
    $0_1 = HEAP32[($0_1 + -8 | 0) >> 2] | 0;
    if (($0_1 | 0) > (-1 | 0)) {
     break label$2
    }
    $3_1 = ($0_1 >> 31 | 0) ^ $0_1 | 0;
    $4_1 = $1_1 - $3_1 | 0;
    $0_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $0_1;
    $3_1 = $3_1 + $2_1 | 0;
   }
   label$3 : {
    $0_1 = $1_1 + $2_1 | 0;
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    if (($1_1 | 0) == (HEAP32[(($0_1 + $1_1 | 0) + -4 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $2_1;
    $3_1 = $1_1 + $3_1 | 0;
   }
   HEAP32[$4_1 >> 2] = $3_1;
   HEAP32[((($3_1 & -4 | 0) + $4_1 | 0) + -4 | 0) >> 2] = $3_1 ^ -1 | 0;
   label$4 : {
    label$5 : {
     $3_1 = (HEAP32[$4_1 >> 2] | 0) + -8 | 0;
     if ($3_1 >>> 0 > 127 >>> 0) {
      break label$5
     }
     $3_1 = ($3_1 >>> 3 | 0) + -1 | 0;
     break label$4;
    }
    $0_1 = Math_clz32($3_1);
    label$6 : {
     if ($3_1 >>> 0 > 4095 >>> 0) {
      break label$6
     }
     $3_1 = ((($3_1 >>> (29 - $0_1 | 0) | 0) ^ 4 | 0) - ($0_1 << 2 | 0) | 0) + 110 | 0;
     break label$4;
    }
    $3_1 = ((($3_1 >>> (30 - $0_1 | 0) | 0) ^ 2 | 0) - ($0_1 << 1 | 0) | 0) + 71 | 0;
    $3_1 = $3_1 >>> 0 < 63 >>> 0 ? $3_1 : 63;
   }
   $0_1 = $3_1 << 4 | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 + 15536 | 0;
   $0_1 = $0_1 + 15544 | 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $4_1;
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $4_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16568 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16572 | 0) >> 2] | 0;
   $117_1 = i64toi32_i32$0;
   $117$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   $119$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 1;
   i64toi32_i32$0 = $119$hi;
   i64toi32_i32$4 = $3_1 & 31 | 0;
   if (32 >>> 0 <= ($3_1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $14_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $14_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $120$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $117$hi;
   i64toi32_i32$1 = $117_1;
   i64toi32_i32$2 = $120$hi;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $121_1 = i64toi32_i32$1 | $14_1 | 0;
   i64toi32_i32$1 = 0;
   HEAP32[(i64toi32_i32$1 + 16568 | 0) >> 2] = $121_1;
   HEAP32[(i64toi32_i32$1 + 16572 | 0) >> 2] = i64toi32_i32$2;
  }
 }
 
 function $1064($0_1) {
  $0_1 = $0_1 | 0;
  $1063($0_1 | 0);
 }
 
 function $1065($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return $1060($1_1 | 0, $2_1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($2_1) {
    break label$2
   }
   $1064($0_1 | 0);
   return 0 | 0;
  }
  label$3 : {
   $3_1 = $0_1 + -4 | 0;
   $2_1 = $2_1 >>> 0 > 8 >>> 0 ? ($2_1 + 3 | 0) & -4 | 0 : 8;
   if (!($1066($3_1 | 0, $2_1 + 8 | 0 | 0) | 0)) {
    break label$3
   }
   return $0_1 | 0;
  }
  label$4 : {
   $1_1 = $1060($1_1 | 0, $2_1 | 0) | 0;
   if ($1_1) {
    break label$4
   }
   return 0 | 0;
  }
  $3_1 = (HEAP32[$3_1 >> 2] | 0) + -8 | 0;
  $1070($1_1 | 0, $0_1 | 0, ($2_1 >>> 0 < $3_1 >>> 0 ? $2_1 : $3_1) | 0) | 0;
  $1064($0_1 | 0);
  return $1_1 | 0;
 }
 
 function $1066($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $4_1 = 0, $21_1 = 0, $22_1 = 0, $97_1 = 0, $97$hi = 0, $99$hi = 0, $100$hi = 0, $101_1 = 0, $211_1 = 0, $211$hi = 0, $213$hi = 0, $214$hi = 0, $215_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[$0_1 >> 2] | 0;
     $3_1 = $0_1 + $2_1 | 0;
     $4_1 = HEAP32[$3_1 >> 2] | 0;
     $5_1 = $3_1 + $4_1 | 0;
     if (($4_1 | 0) == (HEAP32[($5_1 + -4 | 0) >> 2] | 0 | 0)) {
      break label$3
     }
     label$4 : {
      $1_1 = $0_1 + $1_1 | 0;
      if (($1_1 + 16 | 0) >>> 0 > $5_1 >>> 0) {
       break label$4
      }
      $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $2_1;
      $3_1 = $5_1 - $1_1 | 0;
      HEAP32[$1_1 >> 2] = $3_1;
      HEAP32[((($3_1 & -4 | 0) + $1_1 | 0) + -4 | 0) >> 2] = $3_1 ^ -1 | 0;
      label$5 : {
       label$6 : {
        $3_1 = (HEAP32[$1_1 >> 2] | 0) + -8 | 0;
        if ($3_1 >>> 0 > 127 >>> 0) {
         break label$6
        }
        $3_1 = ($3_1 >>> 3 | 0) + -1 | 0;
        break label$5;
       }
       $2_1 = Math_clz32($3_1);
       label$7 : {
        if ($3_1 >>> 0 > 4095 >>> 0) {
         break label$7
        }
        $3_1 = ((($3_1 >>> (29 - $2_1 | 0) | 0) ^ 4 | 0) - ($2_1 << 2 | 0) | 0) + 110 | 0;
        break label$5;
       }
       $3_1 = ((($3_1 >>> (30 - $2_1 | 0) | 0) ^ 2 | 0) - ($2_1 << 1 | 0) | 0) + 71 | 0;
       $3_1 = $3_1 >>> 0 < 63 >>> 0 ? $3_1 : 63;
      }
      $2_1 = $3_1 << 4 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 15536 | 0;
      $2_1 = $2_1 + 15544 | 0;
      HEAP32[($1_1 + 8 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $1_1;
      HEAP32[((HEAP32[($1_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $1_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16568 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16572 | 0) >> 2] | 0;
      $97_1 = i64toi32_i32$0;
      $97$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $99$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$0 = $99$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$4 = $3_1 & 31 | 0;
      if (32 >>> 0 <= ($3_1 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $21_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $21_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $100$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $97$hi;
      i64toi32_i32$1 = $97_1;
      i64toi32_i32$2 = $100$hi;
      i64toi32_i32$3 = $21_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $101_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      i64toi32_i32$1 = 0;
      HEAP32[(i64toi32_i32$1 + 16568 | 0) >> 2] = $101_1;
      HEAP32[(i64toi32_i32$1 + 16572 | 0) >> 2] = i64toi32_i32$2;
      $1_1 = $1_1 - $0_1 | 0;
      HEAP32[$0_1 >> 2] = $1_1;
      HEAP32[((($1_1 & -4 | 0) + $0_1 | 0) + -4 | 0) >> 2] = $1_1;
      return 1 | 0;
     }
     if ($1_1 >>> 0 > $5_1 >>> 0) {
      break label$2
     }
     $1_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     HEAP32[($1_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $1_1;
     $1_1 = $4_1 + $2_1 | 0;
     HEAP32[$0_1 >> 2] = $1_1;
     HEAP32[((($1_1 & -4 | 0) + $0_1 | 0) + -4 | 0) >> 2] = $1_1;
     return 1 | 0;
    }
    label$8 : {
     if (($1_1 + 16 | 0) >>> 0 > $2_1 >>> 0) {
      break label$8
     }
     HEAP32[$0_1 >> 2] = $1_1;
     HEAP32[((($1_1 & -4 | 0) + $0_1 | 0) + -4 | 0) >> 2] = $1_1;
     $0_1 = $0_1 + $1_1 | 0;
     $1_1 = $2_1 - $1_1 | 0;
     HEAP32[$0_1 >> 2] = $1_1;
     HEAP32[((($1_1 & -4 | 0) + $0_1 | 0) + -4 | 0) >> 2] = $1_1 ^ -1 | 0;
     label$9 : {
      label$10 : {
       $1_1 = (HEAP32[$0_1 >> 2] | 0) + -8 | 0;
       if ($1_1 >>> 0 > 127 >>> 0) {
        break label$10
       }
       $1_1 = ($1_1 >>> 3 | 0) + -1 | 0;
       break label$9;
      }
      $3_1 = Math_clz32($1_1);
      label$11 : {
       if ($1_1 >>> 0 > 4095 >>> 0) {
        break label$11
       }
       $1_1 = ((($1_1 >>> (29 - $3_1 | 0) | 0) ^ 4 | 0) - ($3_1 << 2 | 0) | 0) + 110 | 0;
       break label$9;
      }
      $1_1 = ((($1_1 >>> (30 - $3_1 | 0) | 0) ^ 2 | 0) - ($3_1 << 1 | 0) | 0) + 71 | 0;
      $1_1 = $1_1 >>> 0 < 63 >>> 0 ? $1_1 : 63;
     }
     $3_1 = $1_1 << 4 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + 15536 | 0;
     $3_1 = $3_1 + 15544 | 0;
     HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
     HEAP32[$3_1 >> 2] = $0_1;
     HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $0_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 16568 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 16572 | 0) >> 2] | 0;
     $211_1 = i64toi32_i32$2;
     $211$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $213$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$2 = $213$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$4 = $1_1 & 31 | 0;
     if (32 >>> 0 <= ($1_1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $22_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $214$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $211$hi;
     i64toi32_i32$1 = $211_1;
     i64toi32_i32$0 = $214$hi;
     i64toi32_i32$3 = $22_1;
     i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $215_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$1 + 16568 | 0) >> 2] = $215_1;
     HEAP32[(i64toi32_i32$1 + 16572 | 0) >> 2] = i64toi32_i32$0;
     return 1 | 0;
    }
    $0_1 = 1;
    if ($2_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
   }
   $0_1 = 0;
  }
  return $0_1 | 0;
 }
 
 function $1067($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1065($0_1 | 0, 8 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1068($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   $0_1 = Math_imul($1_1, $0_1);
   $1_1 = $1060(8 | 0, $0_1 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   $1071($1_1 | 0, 0 | 0, $0_1 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $1069($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = $0() | 0;
  $2_1 = __wasm_memory_size();
  label$1 : {
   $3_1 = HEAP32[$1_1 >> 2] | 0;
   $0_1 = $3_1 + (($0_1 + 3 | 0) & -4 | 0) | 0;
   if ($0_1 >>> 0 <= ($2_1 << 16 | 0) >>> 0) {
    break label$1
   }
   if (fimport$9($0_1 | 0) | 0) {
    break label$1
   }
   (wasm2js_i32$0 = $969() | 0, wasm2js_i32$1 = 48), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   return -1 | 0;
  }
  HEAP32[$1_1 >> 2] = $0_1;
  return $3_1 | 0;
 }
 
 function $1070($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 512 >>> 0) {
    break label$1
   }
   fimport$10($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $0_1 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if (($2_1 | 0) >= (1 | 0)) {
       break label$5
      }
      $2_1 = $0_1;
      break label$4;
     }
     label$6 : {
      if ($0_1 & 3 | 0) {
       break label$6
      }
      $2_1 = $0_1;
      break label$4;
     }
     $2_1 = $0_1;
     label$7 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if ($2_1 >>> 0 >= $3_1 >>> 0) {
       break label$4
      }
      if ($2_1 & 3 | 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4_1 = $3_1 & -4 | 0;
     if ($4_1 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2_1 = $0_1;
    break label$2;
   }
   label$12 : {
    $4_1 = $3_1 + -4 | 0;
    if ($4_1 >>> 0 >= $0_1 >>> 0) {
     break label$12
    }
    $2_1 = $0_1;
    break label$2;
   }
   $2_1 = $0_1;
   label$13 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $1071($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $6$hi = 0, i64toi32_i32$3 = 0, $5_1 = 0, $14_1 = 0, $104$hi = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $2_1 + $0_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   HEAP8[$0_1 >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $6_1 = $1_1;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $14_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $14_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $104$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$1 = $104$hi;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $6_1 = i64toi32_i32$0 | $6_1 | 0;
   $6$hi = i64toi32_i32$2;
   $1_1 = $3_1 + $5_1 | 0;
   label$2 : while (1) {
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$2;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $1072($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (($1_1 + $2_1 | 0) >>> 0 <= $0_1 >>> 0) {
      break label$3
     }
     $3_1 = $0_1 + $2_1 | 0;
     if ($3_1 >>> 0 > $1_1 >>> 0) {
      break label$2
     }
    }
    return $1070($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
   }
   $4_1 = ($1_1 ^ $0_1 | 0) & 3 | 0;
   label$4 : {
    label$5 : {
     label$6 : {
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
       break label$6
      }
      label$7 : {
       if (!$4_1) {
        break label$7
       }
       $4_1 = $0_1;
       break label$4;
      }
      label$8 : {
       if ($0_1 & 3 | 0) {
        break label$8
       }
       $4_1 = $0_1;
       break label$5;
      }
      $4_1 = $0_1;
      label$9 : while (1) {
       if (!$2_1) {
        break label$1
       }
       HEAP8[$4_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
       $1_1 = $1_1 + 1 | 0;
       $2_1 = $2_1 + -1 | 0;
       $4_1 = $4_1 + 1 | 0;
       if (!($4_1 & 3 | 0)) {
        break label$5
       }
       continue label$9;
      };
     }
     label$10 : {
      if ($4_1) {
       break label$10
      }
      label$11 : {
       if (!($3_1 & 3 | 0)) {
        break label$11
       }
       label$12 : while (1) {
        if (!$2_1) {
         break label$1
        }
        $2_1 = $2_1 + -1 | 0;
        $4_1 = $0_1 + $2_1 | 0;
        HEAP8[$4_1 >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
        if ($4_1 & 3 | 0) {
         continue label$12
        }
        break label$12;
       };
      }
      if ($2_1 >>> 0 <= 3 >>> 0) {
       break label$10
      }
      label$13 : while (1) {
       $2_1 = $2_1 + -4 | 0;
       HEAP32[($0_1 + $2_1 | 0) >> 2] = HEAP32[($1_1 + $2_1 | 0) >> 2] | 0;
       if ($2_1 >>> 0 > 3 >>> 0) {
        continue label$13
       }
       break label$13;
      };
     }
     if (!$2_1) {
      break label$1
     }
     label$14 : while (1) {
      $2_1 = $2_1 + -1 | 0;
      HEAP8[($0_1 + $2_1 | 0) >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
      if ($2_1) {
       continue label$14
      }
      break label$1;
     };
    }
    if ($2_1 >>> 0 <= 3 >>> 0) {
     break label$4
    }
    label$15 : while (1) {
     HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $4_1 = $4_1 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3 >>> 0) {
      continue label$15
     }
     break label$15;
    };
   }
   if (!$2_1) {
    break label$1
   }
   label$16 : while (1) {
    HEAP8[$4_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$16
    }
    break label$16;
   };
  }
  return $0_1 | 0;
 }
 
 function $1073($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $1074($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 0;
    if ($1073($2_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if (($3_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   $6_1 = 0;
   label$4 : {
    if ((HEAP8[($2_1 + 75 | 0) >> 0] | 0 | 0) < (0 | 0)) {
     break label$4
    }
    $4_1 = $1_1;
    label$5 : while (1) {
     $3_1 = $4_1;
     if (!$3_1) {
      break label$4
     }
     $4_1 = $3_1 + -1 | 0;
     if ((HEAPU8[($0_1 + $4_1 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      continue label$5
     }
     break label$5;
    };
    $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0]($2_1, $0_1, $3_1) | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     break label$1
    }
    $1_1 = $1_1 - $3_1 | 0;
    $0_1 = $0_1 + $3_1 | 0;
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    $6_1 = $3_1;
   }
   $1070($5_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $1_1 | 0;
   $4_1 = $6_1 + $1_1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $1075($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1076($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1077($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = $0_1;
  label$1 : {
   label$2 : {
    if (!($0_1 & 3 | 0)) {
     break label$2
    }
    label$3 : {
     if (HEAPU8[$0_1 >> 0] | 0) {
      break label$3
     }
     return $0_1 - $0_1 | 0 | 0;
    }
    $1_1 = $0_1;
    label$4 : while (1) {
     $1_1 = $1_1 + 1 | 0;
     if (!($1_1 & 3 | 0)) {
      break label$2
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$1
     }
     continue label$4;
    };
   }
   label$5 : while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$5
    }
    break label$5;
   };
   label$6 : {
    if ($3_1 & 255 | 0) {
     break label$6
    }
    return $2_1 - $0_1 | 0 | 0;
   }
   label$7 : while (1) {
    $3_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
    $1_1 = $2_1 + 1 | 0;
    $2_1 = $1_1;
    if ($3_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1078($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (HEAP32[(0 + 16576 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[(0 + 16580 | 0) >> 2] = $1_1;
   HEAP32[(0 + 16576 | 0) >> 2] = $0_1;
  }
 }
 
 function $1079($0_1) {
  $0_1 = $0_1 | 0;
  global$2 = $0_1;
 }
 
 function $1080() {
  return global$0 | 0;
 }
 
 function $1081($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  return $1_1 | 0;
 }
 
 function $1082($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $0_1;
  if ($1_1 >>> 0 < global$2 >>> 0) {
   fimport$11()
  }
  global$0 = $1_1;
 }
 
 function $1083($0_1) {
  $0_1 = $0_1 | 0;
  return __wasm_memory_grow($0_1 | 0) | 0;
 }
 
 function $1084($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1);
 }
 
 function $1085($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1) | 0 | 0;
 }
 
 function $1086($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1) | 0 | 0;
 }
 
 function $1087($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1);
 }
 
 function $1088($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return +(+FUNCTION_TABLE[$0_1]($1_1));
 }
 
 function $1089($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1) | 0 | 0;
 }
 
 function $1090($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1, $2_1);
 }
 
 function $1091($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $1092($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0_1]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1093($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1);
 }
 
 function $1094($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $1095($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0, $5_1 = 0, $5$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  i64toi32_i32$0 = 0;
  $9_1 = $2_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = $1092($6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  fimport$12($18_1 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5_1 | 0;
 }
 
 function $1096($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  $4_1 = $0_1;
  i64toi32_i32$0 = $1$hi;
  $6_1 = $1_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return fimport$13($4_1 | 0, $6_1 | 0, $12_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function legalfunc$wasm2js_scratch_store_i64($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $2_1 = 0, i64toi32_i32$2 = 0;
  i64toi32_i32$0 = $0$hi;
  $2_1 = $0_1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  legalimport$wasm2js_scratch_store_i64($2_1 | 0, $8_1 | 0);
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              block : {
               i64toi32_i32$1 = var$1$hi;
               var$3 = var$1;
               if (!var$3) {
                break label$11
               }
               i64toi32_i32$1 = var$1$hi;
               i64toi32_i32$0 = var$1;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               var$4 = $38_1;
               if (!var$4) {
                break label$9
               }
               var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
               if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
               }
               break label$2;
              }
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             legalfunc$wasm2js_scratch_store_i64(var$0 - Math_imul(var$2, var$3) | 0 | 0, i64toi32_i32$1 | 0);
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            legalfunc$wasm2js_scratch_store_i64(i64toi32_i32$3 | i64toi32_i32$0 | 0 | 0, i64toi32_i32$1 | 0);
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        legalfunc$wasm2js_scratch_store_i64($41_1 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      legalfunc$wasm2js_scratch_store_i64(var$4 & var$0 | 0 | 0, i64toi32_i32$2 | 0);
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      block3 : {
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$1 = var$1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       var$8 = i64toi32_i32$4;
       var$8$hi = i64toi32_i32$5;
       label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $45_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
         $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140_1 = $45_1;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = 0;
         $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
         $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140_1;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $46_1;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144_1 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
         $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $47_1;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144_1;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151_1;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $48_1;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    i64toi32_i32$3 = var$5$hi;
    legalfunc$wasm2js_scratch_store_i64(var$5 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   legalfunc$wasm2js_scratch_store_i64(var$0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 function __wasm_ctz_i64(var$0, var$0$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $10_1 = 0, $5$hi = 0, $8$hi = 0;
  i64toi32_i32$0 = var$0$hi;
  if (!!(var$0 | i64toi32_i32$0 | 0)) {
   i64toi32_i32$0 = var$0$hi;
   i64toi32_i32$2 = var$0;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = -1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $5$hi = i64toi32_i32$5;
   i64toi32_i32$5 = var$0$hi;
   i64toi32_i32$5 = $5$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = var$0$hi;
   i64toi32_i32$3 = var$0;
   i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   i64toi32_i32$3 = Math_clz32(i64toi32_i32$2);
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$3 | 0) == (32 | 0)) {
    $10_1 = Math_clz32(i64toi32_i32$0) + 32 | 0
   } else {
    $10_1 = i64toi32_i32$3
   }
   $8$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 63;
   i64toi32_i32$2 = $8$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
   i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
   return i64toi32_i32$0 | 0;
  }
  i64toi32_i32$0 = 0;
  i64toi32_i32$4 = 64;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$4 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i64(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, var$2$hi = 0, var$2 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $6$hi = 0, $8$hi = 0, $10_1 = 0, $10$hi = 0, $15$hi = 0, $17$hi = 0, $19$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  var$2 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = -1;
  i64toi32_i32$2 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $19_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $19_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6$hi = i64toi32_i32$2;
  i64toi32_i32$2 = var$0$hi;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$1 = $19_1;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $8$hi = i64toi32_i32$0;
  i64toi32_i32$0 = var$2$hi;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $10_1 = $20_1;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
  i64toi32_i32$5 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  var$1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  var$1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$5 = -1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
   $21_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
   $21_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
  }
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$0 = $21_1;
  i64toi32_i32$5 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
  $17$hi = i64toi32_i32$5;
  i64toi32_i32$5 = var$1$hi;
  i64toi32_i32$5 = $17$hi;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $22_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
   $22_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
  }
  $19$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$5 = $10_1;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$3 = $22_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$5 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$5 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 FUNCTION_TABLE[1] = $488;
 FUNCTION_TABLE[2] = $264;
 FUNCTION_TABLE[3] = $38;
 FUNCTION_TABLE[4] = $48;
 FUNCTION_TABLE[5] = $50;
 FUNCTION_TABLE[6] = $250;
 FUNCTION_TABLE[7] = $1030;
 FUNCTION_TABLE[8] = $946;
 FUNCTION_TABLE[9] = $548;
 FUNCTION_TABLE[10] = $540;
 FUNCTION_TABLE[11] = $542;
 FUNCTION_TABLE[12] = $1064;
 FUNCTION_TABLE[13] = $238;
 FUNCTION_TABLE[14] = $240;
 FUNCTION_TABLE[15] = $30;
 FUNCTION_TABLE[16] = $537;
 FUNCTION_TABLE[17] = $274;
 FUNCTION_TABLE[18] = $19;
 FUNCTION_TABLE[19] = $267;
 FUNCTION_TABLE[20] = $314;
 FUNCTION_TABLE[21] = $563;
 FUNCTION_TABLE[22] = $316;
 FUNCTION_TABLE[23] = $517;
 FUNCTION_TABLE[24] = $1018;
 FUNCTION_TABLE[25] = $564;
 FUNCTION_TABLE[26] = $957;
 FUNCTION_TABLE[27] = $958;
 FUNCTION_TABLE[28] = $956;
 FUNCTION_TABLE[29] = $954;
 FUNCTION_TABLE[30] = $955;
 FUNCTION_TABLE[31] = $989;
 FUNCTION_TABLE[32] = $990;
 FUNCTION_TABLE[33] = $995;
 FUNCTION_TABLE[34] = $999;
 FUNCTION_TABLE[35] = $996;
 FUNCTION_TABLE[36] = $993;
 FUNCTION_TABLE[37] = $973;
 FUNCTION_TABLE[38] = $1027;
 FUNCTION_TABLE[39] = $1028;
 FUNCTION_TABLE[40] = $1029;
 FUNCTION_TABLE[41] = $1034;
 FUNCTION_TABLE[42] = $1035;
 FUNCTION_TABLE[43] = $1037;
 FUNCTION_TABLE[44] = $1039;
 FUNCTION_TABLE[45] = $1042;
 FUNCTION_TABLE[46] = $1040;
 FUNCTION_TABLE[47] = $1041;
 FUNCTION_TABLE[48] = $1047;
 FUNCTION_TABLE[49] = $1057;
 FUNCTION_TABLE[50] = $1055;
 FUNCTION_TABLE[51] = $1050;
 FUNCTION_TABLE[52] = $1043;
 FUNCTION_TABLE[53] = $1056;
 FUNCTION_TABLE[54] = $1054;
 FUNCTION_TABLE[55] = $1051;
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new global.Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = newHEAP8;
   HEAP8 = new global.Int8Array(newBuffer);
   HEAP16 = new global.Int16Array(newBuffer);
   HEAP32 = new global.Int32Array(newBuffer);
   HEAPU8 = new global.Uint8Array(newBuffer);
   HEAPU16 = new global.Uint16Array(newBuffer);
   HEAPU32 = new global.Uint32Array(newBuffer);
   HEAPF32 = new global.Float32Array(newBuffer);
   HEAPF64 = new global.Float64Array(newBuffer);
   buffer = newBuffer;
   memory.buffer = newBuffer;
  }
  return oldPages;
 }
 
 return {
  "__wasm_call_ctors": $1, 
  "createBuffer": $2, 
  "malloc": $1062, 
  "create_buffer": $3, 
  "destroyBuffer": $4, 
  "free": $1064, 
  "edgeBetweenness": $6, 
  "edgeBetweennessMod2": $7, 
  "fastGreedy": $8, 
  "infomap": $9, 
  "labelPropagation": $10, 
  "louvain": $11, 
  "getMembershipPointer": $12, 
  "getModularityPointer": $13, 
  "getModularitySize": $14, 
  "freeResult": $15, 
  "__errno_location": $969, 
  "fflush": $971, 
  "setThrew": $1078, 
  "__set_stack_limit": $1079, 
  "stackSave": $1080, 
  "stackAlloc": $1081, 
  "stackRestore": $1082, 
  "__growWasmMemory": $1083, 
  "dynCall_vi": $1084, 
  "dynCall_ii": $1085, 
  "dynCall_iii": $1086, 
  "dynCall_viiii": $1087, 
  "dynCall_di": $1088, 
  "dynCall_iidiiii": $1089, 
  "dynCall_vii": $1090, 
  "dynCall_iiii": $1091, 
  "dynCall_jiji": $1095, 
  "dynCall_viiiiii": $1093, 
  "dynCall_viiiii": $1094
 };
}

for (var base64ReverseLookup = new Uint8Array(123/*'z'+1*/), i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2);
    if (b64[bLength-2] == '=') --end;
    if (b64[bLength-1] == '=') --end;
    for (; i < bLength; i += 4, j += 3) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j+1 < end) uint8Array[j+1] = b1 << 4 | b2 >> 2;
      if (j+2 < end) uint8Array[j+2] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
var bufferView = new Uint8Array(wasmMemory.buffer);
base64DecodeToExistingUint8Array(bufferView, 1024, "");
base64DecodeToExistingUint8Array(bufferView, 9872, "cwUAAHwFAACDBQAAkQUAAJ0FAACrBQAAugUAAM4FAADgBQAA8gUAAP8FAAAUBgAALQYAAEkGAABVBgAAeAYAAJUGAACoBgAAvQYAADQHAABkBwAAfAcAAJMHAACmBwAA2QcAAPEHAAABCAAAIggAADgIAABcCAAAhQgAAKsIAAC9CAAA2wgAAAUJAAAxCQAAZAkAAHkJAACxCQAA2AkAAP0JAACVCgAA9woAABQLAAArCwAAQQsAAFgLAABvCwAAhQsAAJ0LAAC0CwAAyQsAAOoLAAAcDAAAOgwAAE0MAABoDAAAfAwAAI4MAACqDAAAwAwAAHAiAABsLgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAAAAAAAAAAAAhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiAAAAIwAAAIg4AAAABAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAK/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4KAAAAAAAAAUAAAAAAAAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACIAAAAlAAAAkDwAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAP//////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==");
base64DecodeToExistingUint8Array(bufferView
return asmFunc({
    'Int8Array': Int8Array,
    'Int16Array': Int16Array,
    'Int32Array': Int32Array,
    'Uint8Array': Uint8Array,
    'Uint16Array': Uint16Array,
    'Uint32Array': Uint32Array,
    'Float32Array': Float32Array,
    'Float64Array': Float64Array,
    'NaN': NaN,
    'Infinity': Infinity,
    'Math': Math
  },
  asmLibraryArg,
  wasmMemory.buffer
)

}
)(asmLibraryArg, wasmMemory, wasmTable);
    return {
      'exports': exports
    };
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        ok({
          'instance': new WebAssembly.Instance(new WebAssembly.Module(binary))
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];



if (typeof WebAssembly !== 'object') {
  abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');
}


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.
var wasmTable = new WebAssembly.Table({
  'initial': 56,
  'maximum': 56 + 0,
  'element': 'anyfunc'
});


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}



// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 1024,
    STACK_BASE = 5259632,
    STACKTOP = STACK_BASE,
    STACK_MAX = 16752,
    DYNAMIC_BASE = 5259632,
    DYNAMICTOP_PTR = 16592;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) Object.defineProperty(Module, 'INITIAL_MEMORY', { configurable: true, get: function() { abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_INITIAL_MEMORY') } });

assert(INITIAL_INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');






// In standalone mode, the wasm creates the memory, and the user can't provide it.
// In non-standalone/normal mode, we create the memory here.

// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
    });
  }


if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_INITIAL_MEMORY % WASM_PAGE_SIZE === 0);
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;




// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  // The stack grows downwards
  HEAPU32[(STACK_MAX >> 2)+1] = 0x2135467;
  HEAPU32[(STACK_MAX >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)+1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}




// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

/** @param {number|boolean=} ignore */
function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
/** @param {number|boolean=} ignore */
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw new WebAssembly.RuntimeError(what);
}


var memoryInitializer = null;





// show errors on likely calls to FS when it was not included
var FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}




var wasmBinaryFile = 'community-detection.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (wasmBinary) {
      return new Uint8Array(wasmBinary);
    }

    var binary = tryParseAsDataURI(wasmBinaryFile);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // if we don't have the binary yet, and have the Fetch api, use that
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return new Promise(function(resolve, reject) {
    resolve(getBinary());
  });
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
   // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');


  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
      // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
      // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}


// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};




// STATICTOP = STATIC_BASE + 15728;
/* global initializers */  __ATINIT__.push({ func: function() { ___wasm_call_ctors() } });




/* no memory initializer */
// {{PRE_LIBRARY}}


  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var ___exception_infos={};
  
  var ___exception_last=0;
  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return __ZSt18uncaught_exceptionv.uncaught_exceptions > 0;
    }function ___cxa_throw(ptr, type, destructor) {
      ___exception_infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      ___exception_last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exceptions++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function ___handle_stack_overflow() {
      abort('stack overflow')
    }

  function _abort() {
      abort();
    }

  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }

  function _emscripten_get_sbrk_ptr() {
      return 16592;
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  
  function emscripten_realloc_buffer(size) {
      try {
        // round size grow request up to wasm page size (fixed 64KB per spec)
        wasmMemory.grow((size - buffer.byteLength + 65535) >> 16); // .grow() takes a delta compared to the previous size
        updateGlobalBufferAndViews(wasmMemory.buffer);
        return 1 /*success*/;
      } catch(e) {
        console.error('emscripten_realloc_buffer: Attempted to grow heap from ' + buffer.byteLength  + ' bytes to ' + size + ' bytes, but got error: ' + e);
      }
    }function _emscripten_resize_heap(requestedSize) {
      var oldSize = _emscripten_get_heap_size();
      // With pthreads, races can happen (another thread might increase the size in between), so return a failure, and let the caller retry.
      assert(requestedSize > oldSize);
  
  
      var PAGE_MULTIPLE = 65536;
  
      // Memory resize rules:
      // 1. When resizing, always produce a resized heap that is at least 16MB (to avoid tiny heap sizes receiving lots of repeated resizes at startup)
      // 2. Always increase heap size to at least the requested size, rounded up to next page multiple.
      // 3a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap geometrically: increase the heap size according to 
      //                                         MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%),
      //                                         At most overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
      // 3b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap linearly: increase the heap size by at least MEMORY_GROWTH_LINEAR_STEP bytes.
      // 4. Max size for the heap is capped at 2048MB-PAGE_MULTIPLE, or by MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
      // 5. If we were unable to allocate as much memory, it may be due to over-eager decision to excessively reserve due to (3) above.
      //    Hence if an allocation fails, cut down on the amount of excess growth, in an attempt to succeed to perform a smaller allocation.
  
      var maxHeapSize = 2147483648 - PAGE_MULTIPLE;
      if (requestedSize > maxHeapSize) {
        err('Cannot enlarge memory, asked to go up to ' + requestedSize + ' bytes, but the limit is ' + maxHeapSize + ' bytes!');
        return false;
      }
  
      var minHeapSize = 16777216;
  
      // Loop through potential heap size increases. If we attempt a too eager reservation that fails, cut down on the
      // attempted size and reserve a smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
      for(var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth
        // but limit overreserving (default to capping at +96MB overgrowth at most)
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );
  
  
        var newSize = Math.min(maxHeapSize, alignUp(Math.max(minHeapSize, requestedSize, overGrownHeapSize), PAGE_MULTIPLE));
  
        var replacement = emscripten_realloc_buffer(newSize);
        if (replacement) {
          err('Warning: Enlarging memory arrays, this is not fast! ' + [oldSize, newSize]);
  
          return true;
        }
      }
      err('Failed to grow the heap from ' + oldSize + ' bytes to ' + newSize + ' bytes, not enough memory!');
      return false;
    }

  
  
  var ENV={};
  
  function __getExecutableName() {
      return thisProgram || './this.program';
    }function _emscripten_get_environ() {
      if (!_emscripten_get_environ.strings) {
        // Default values.
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          // Browser language detection #8751
          'LANG': ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8',
          '_': __getExecutableName()
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(x + '=' + env[x]);
        }
        _emscripten_get_environ.strings = strings;
      }
      return _emscripten_get_environ.strings;
    }function _environ_get(__environ, environ_buf) {
      var strings = _emscripten_get_environ();
      var bufSize = 0;
      strings.forEach(function(string, i) {
        var ptr = environ_buf + bufSize;
        HEAP32[(((__environ)+(i * 4))>>2)]=ptr;
        writeAsciiToMemory(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    }

  function _environ_sizes_get(penviron_count, penviron_buf_size) {
      var strings = _emscripten_get_environ();
      HEAP32[((penviron_count)>>2)]=strings.length;
      var bufSize = 0;
      strings.forEach(function(string) {
        bufSize += string.length + 1;
      });
      HEAP32[((penviron_buf_size)>>2)]=bufSize;
      return 0;
    }

  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};var SYSCALLS={mappings:{},buffers:[null,[],[]],printChar:function(stream, curr) {
        var buffer = SYSCALLS.buffers[stream];
        assert(buffer);
        if (curr === 0 || curr === 10) {
          (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
          buffer.length = 0;
        } else {
          buffer.push(curr);
        }
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};function _fd_close(fd) {
      abort('it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM');
      return 0;
    }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
  abort('it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM')}

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      if (typeof _fflush !== 'undefined') _fflush(0);
      var buffers = SYSCALLS.buffers;
      if (buffers[1].length) SYSCALLS.printChar(1, 10);
      if (buffers[2].length) SYSCALLS.printChar(2, 10);
    }function _fd_write(fd, iov, iovcnt, pnum) {
      // hack to support printf in SYSCALLS_REQUIRE_FILESYSTEM=0
      var num = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          SYSCALLS.printChar(fd, HEAPU8[ptr+j]);
        }
        num += len;
      }
      HEAP32[((pnum)>>2)]=num
      return 0;
    }

  var _memcpy=undefined;

  
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
      end = (ptr + num)|0;
  
      value = value & 0xff;
      if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
        while ((ptr&3) != 0) {
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
  
        aligned_end = (end & -4)|0;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
  
        block_aligned_end = (aligned_end - 64)|0;
  
        while((ptr|0) <= (block_aligned_end|0)) {
          HEAP32[((ptr)>>2)]=value4;
          HEAP32[(((ptr)+(4))>>2)]=value4;
          HEAP32[(((ptr)+(8))>>2)]=value4;
          HEAP32[(((ptr)+(12))>>2)]=value4;
          HEAP32[(((ptr)+(16))>>2)]=value4;
          HEAP32[(((ptr)+(20))>>2)]=value4;
          HEAP32[(((ptr)+(24))>>2)]=value4;
          HEAP32[(((ptr)+(28))>>2)]=value4;
          HEAP32[(((ptr)+(32))>>2)]=value4;
          HEAP32[(((ptr)+(36))>>2)]=value4;
          HEAP32[(((ptr)+(40))>>2)]=value4;
          HEAP32[(((ptr)+(44))>>2)]=value4;
          HEAP32[(((ptr)+(48))>>2)]=value4;
          HEAP32[(((ptr)+(52))>>2)]=value4;
          HEAP32[(((ptr)+(56))>>2)]=value4;
          HEAP32[(((ptr)+(60))>>2)]=value4;
          ptr = (ptr + 64)|0;
        }
  
        while ((ptr|0) < (aligned_end|0) ) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      // The remaining bytes.
      while ((ptr|0) < (end|0)) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }
      return (end-num)|0;
    }

  function _setTempRet0($i) {
      setTempRet0(($i) | 0);
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Int8Array,Int32Array

var asmGlobalArg = {};
var asmLibraryArg = { "__assert_fail": ___assert_fail, "__cxa_allocate_exception": ___cxa_allocate_exception, "__cxa_throw": ___cxa_throw, "__handle_stack_overflow": ___handle_stack_overflow, "abort": _abort, "emscripten_get_sbrk_ptr": _emscripten_get_sbrk_ptr, "emscripten_memcpy_big": _emscripten_memcpy_big, "emscripten_resize_heap": _emscripten_resize_heap, "environ_get": _environ_get, "environ_sizes_get": _environ_sizes_get, "fd_close": _fd_close, "fd_seek": _fd_seek, "fd_write": _fd_write, "getTempRet0": getTempRet0, "memory": wasmMemory, "setTempRet0": setTempRet0, "table": wasmTable, "time": _time };
var asm = createWasm();
Module["asm"] = asm;
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__wasm_call_ctors"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _createBuffer = Module["_createBuffer"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["createBuffer"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["malloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _create_buffer = Module["_create_buffer"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["create_buffer"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _destroyBuffer = Module["_destroyBuffer"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["destroyBuffer"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _free = Module["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["free"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _edgeBetweenness = Module["_edgeBetweenness"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["edgeBetweenness"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _edgeBetweennessMod2 = Module["_edgeBetweennessMod2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["edgeBetweennessMod2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fastGreedy = Module["_fastGreedy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fastGreedy"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _infomap = Module["_infomap"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["infomap"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _labelPropagation = Module["_labelPropagation"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["labelPropagation"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _louvain = Module["_louvain"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["louvain"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getMembershipPointer = Module["_getMembershipPointer"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getMembershipPointer"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getModularityPointer = Module["_getModularityPointer"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getModularityPointer"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _getModularitySize = Module["_getModularitySize"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getModularitySize"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _freeResult = Module["_freeResult"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["freeResult"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__errno_location"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fflush"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setThrew = Module["_setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setThrew"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___set_stack_limit = Module["___set_stack_limit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__set_stack_limit"].apply(null, arguments)
};

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackSave"].apply(null, arguments)
};

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackAlloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackRestore"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __growWasmMemory = Module["__growWasmMemory"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__growWasmMemory"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_vi = Module["dynCall_vi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_ii = Module["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iii = Module["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiii = Module["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_di = Module["dynCall_di"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_di"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iidiiii = Module["dynCall_iidiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iidiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_vii = Module["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiii = Module["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_jiji"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiii"].apply(null, arguments)
};




// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["cwrap"] = cwrap;
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getMemory")) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setjmpId")) Module["setjmpId"] = function() { abort("'setjmpId' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flush_NO_FILESYSTEM")) Module["flush_NO_FILESYSTEM"] = function() { abort("'flush_NO_FILESYSTEM' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
Module["abortStackOverflow"] = abortStackOverflow;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });



var calledRun;


/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};





/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush();
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
    warnOnce('(this may also be due to not including full filesystem support - try building with -s FORCE_FILESYSTEM=1)');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}



